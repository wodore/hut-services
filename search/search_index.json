{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Hut Services <p> Retrieve mountain hut informations. </p> <p> Documentation     | PyPi </p> <p> </p> <p>Hut Services is a tool to get (mountain) hut information from different sources.</p> <p>For more information check out the documentation.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#012-2025-05-04","title":"0.1.2 - 2025-05-04","text":""},{"location":"changelog/#fixes","title":"\ud83d\udc1b Fixes","text":"<ul> <li>Fix coordinates for Refuge-auberge de Salanfe (#16) - b283cfc</li> <li>Fix coordinates for Refuges de Petoudes (#15) - 06f7a6a</li> </ul>"},{"location":"changelog/#documentation","title":"\ud83d\udcd8 Documentation","text":"<ul> <li>Update contributing page with release section (#14) - 162b79e</li> </ul>"},{"location":"changelog/#011-2025-03-16","title":"0.1.1 - 2025-03-16","text":""},{"location":"changelog/#fixes_1","title":"\ud83d\udc1b Fixes","text":"<ul> <li>Fix refuges.info photos url detection from html (#12) - e9fdbf5</li> </ul>"},{"location":"changelog/#010-2025-01-05","title":"0.1.0 - 2025-01-05","text":""},{"location":"changelog/#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Add photos support (#3) - dc2caed</li> </ul>"},{"location":"changelog/#documentation_1","title":"\ud83d\udcd8 Documentation","text":"<ul> <li>Add documentation page (#6) - a630a92</li> </ul>"},{"location":"changelog/#tooling","title":"\ud83d\udcbb Tooling","text":"<ul> <li>Replace <code>make</code> with <code>invoke</code> (see <code>inv help</code>) (#5) - 1c26026</li> <li>Change from <code>poetry</code> to <code>uv</code> (#4) - 748bca2</li> </ul>"},{"location":"docu/","title":"Getting Started","text":"<p>Example for getting data from open street map:</p> osm_service.py<pre><code>from rich import print as rprint\n\nfrom hut_services import OsmService\n\nosm_service = OsmService()\nosm_service.get_wikidata_photos = True  # include photos\nhuts = osm_service.get_huts_from_source(limit=5)  # get the first 10 entries\nfor h in huts:\n    hut = osm_service.convert(h.model_dump(by_alias=True))\n    rprint(hut.name.i18n)\n    rprint(hut.url) if hut.url else None\n    if hut.photos:\n        rprint(hut.photos)\n</code></pre> python osm_service.pyNeur\u00fctiEngelhornh\u00fctteReutsperreDossenh\u00fctte SAChttps://www.dossenhuette.chBrochh\u00fcttehttps://www.brochhuette.ch/"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>hut_services<ul> <li>core<ul> <li>cache</li> <li>guess</li> <li>schema<ul> <li>geo<ul> <li>bbox</li> <li>geo</li> <li>types</li> </ul> </li> <li>locale</li> </ul> </li> <li>service</li> <li>utils</li> </ul> </li> <li>geocode<ul> <li>schema</li> <li>script</li> <li>service</li> </ul> </li> <li>osm<ul> <li>coordinates</li> <li>exceptions</li> <li>schema</li> <li>service</li> </ul> </li> <li>refuges_info<ul> <li>coordinates</li> <li>exceptions</li> <li>massif</li> <li>schema</li> <li>service</li> <li>utils</li> </ul> </li> <li>services</li> <li>wikicommons<ul> <li>service</li> </ul> </li> <li>wikidata<ul> <li>schema</li> <li>script</li> <li>service</li> </ul> </li> </ul> </li> </ul>"},{"location":"reference/hut_services/","title":"hut_services","text":""},{"location":"reference/hut_services/#hut_services","title":"hut_services","text":"<p>Modules:</p> <ul> <li> <code>core</code>           \u2013            </li> <li> <code>geocode</code>           \u2013            </li> <li> <code>osm</code>           \u2013            </li> <li> <code>refuges_info</code>           \u2013            </li> <li> <code>services</code>           \u2013            </li> <li> <code>wikicommons</code>           \u2013            </li> <li> <code>wikidata</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>AnswerEnum</code>           \u2013            <p>Anser enum.</p> </li> <li> <code>AuthorSchema</code>           \u2013            <p>Author information.</p> </li> <li> <code>BaseHutConverterSchema</code>           \u2013            <p>Base class used for a converter schema.</p> </li> <li> <code>BaseHutSourceSchema</code>           \u2013            <p>Base class for a hut source.</p> </li> <li> <code>CapacitySchema</code>           \u2013            <p>Hut capacities.</p> </li> <li> <code>ContactSchema</code>           \u2013            <p>Schema for a contact.</p> </li> <li> <code>HutSchema</code>           \u2013            <p>Hut schema.</p> </li> <li> <code>HutTypeEnum</code>           \u2013            <p>Enum with hut types.</p> </li> <li> <code>HutTypeSchema</code>           \u2013            <p>Hut type schema.</p> </li> <li> <code>LicenseSchema</code>           \u2013            <p>License information.</p> </li> <li> <code>OpenMonthlySchema</code>           \u2013            <p>Shows for every month if it is usally, open, partially open or closed.</p> </li> <li> <code>OwnerSchema</code>           \u2013            <p>Schema for the owner.</p> </li> <li> <code>PhotoSchema</code>           \u2013            <p>Schema for a hut photo.</p> </li> <li> <code>PhotoSchemaOld</code>           \u2013            <p>Photo schema.</p> </li> <li> <code>SourceDataSchema</code>           \u2013            <p>SourceData schema</p> </li> <li> <code>SourcePropertiesSchema</code>           \u2013            <p>Properties saved together with the source data.</p> </li> <li> <code>SourceSchema</code>           \u2013            <p>Source information.</p> </li> <li> <code>LocationEleSchema</code>           \u2013            <p>Location with longitude, latitude and (optional) elevation in WSG84.</p> </li> <li> <code>LocationSchema</code>           \u2013            <p>Location with longitude, latitude and optional elevation in WSG84.</p> </li> <li> <code>TranslationSchema</code>           \u2013            <p>Field with different translations.</p> </li> <li> <code>BaseService</code>           \u2013            <p>Base service which is inheritated by other services.</p> </li> <li> <code>GeocodeService</code>           \u2013            <p>Service to get Information from</p> </li> <li> <code>OsmService</code>           \u2013            <p>Service to get huts from</p> </li> <li> <code>RefugesInfoService</code>           \u2013            <p>Service to get huts from</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>file_cache</code>             \u2013              <p>Chaches function, if 'forever' is True, cache will never expire (and 'expire_in_seconds' will be ignored).</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>clear_file_cache</code>           \u2013            <p>Cleares cache.</p> </li> <li> <code>HutSourceSchema</code>               (<code>TypeAlias</code>)           \u2013            <p>Hut source schema, used for typing.</p> </li> <li> <code>SERVICES</code>               (<code>dict[str, BaseService[HutSourceSchema]]</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/#hut_services-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/#hut_services.clear_file_cache","title":"clear_file_cache  <code>module-attribute</code>","text":"<pre><code>clear_file_cache = clear\n</code></pre> <p>Cleares cache.</p>"},{"location":"reference/hut_services/#hut_services.HutSourceSchema","title":"HutSourceSchema  <code>module-attribute</code>","text":"<pre><code>HutSourceSchema: TypeAlias = BaseHutSourceSchema[\n    SourceDataSchema, SourcePropertiesSchema\n]\n</code></pre> <p>Hut source schema, used for typing. With pydantic <code>BaseModel</code> and <code>SourcePrpertiesSchema</code>.</p>"},{"location":"reference/hut_services/#hut_services.SERVICES","title":"SERVICES  <code>module-attribute</code>","text":"<pre><code>SERVICES: dict[str, BaseService[HutSourceSchema]] = {\n    \"osm\": OsmService(),\n    \"refuges\": RefugesInfoService(),\n    \"wikidata\": WikidataService(),\n}\n</code></pre>"},{"location":"reference/hut_services/#hut_services-classes","title":"Classes","text":""},{"location":"reference/hut_services/#hut_services.AnswerEnum","title":"AnswerEnum","text":"<p>Anser enum.</p> <p>'yesish' and 'noish' means it is likely to be 'yes' or 'no'. 'maybe' means is is either 'yes' or 'no'.</p> <p>Attributes:</p> <ul> <li> <code>yes</code>           \u2013            </li> <li> <code>yesish</code>           \u2013            </li> <li> <code>maybe</code>           \u2013            </li> <li> <code>noish</code>           \u2013            </li> <li> <code>no</code>           \u2013            </li> <li> <code>unknown</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/#hut_services.AnswerEnum-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/#hut_services.AnswerEnum.yes","title":"yes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>yes = 'yes'\n</code></pre>"},{"location":"reference/hut_services/#hut_services.AnswerEnum.yesish","title":"yesish  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>yesish = 'yesish'\n</code></pre>"},{"location":"reference/hut_services/#hut_services.AnswerEnum.maybe","title":"maybe  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maybe = 'maybe'\n</code></pre>"},{"location":"reference/hut_services/#hut_services.AnswerEnum.noish","title":"noish  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>noish = 'noish'\n</code></pre>"},{"location":"reference/hut_services/#hut_services.AnswerEnum.no","title":"no  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>no = 'no'\n</code></pre>"},{"location":"reference/hut_services/#hut_services.AnswerEnum.unknown","title":"unknown  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unknown = 'unknown'\n</code></pre>"},{"location":"reference/hut_services/#hut_services.AuthorSchema","title":"AuthorSchema","text":"<p>Author information.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name of the author.</p> </li> <li> <code>url</code>               (<code>None | HttpUrl</code>)           \u2013            <p>URL of the author.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> <li> <code>url</code>               (<code>None | HttpUrl</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/#hut_services.AuthorSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/#hut_services.AuthorSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.AuthorSchema.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/hut_services/#hut_services.AuthorSchema.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url: None | HttpUrl = None\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema","title":"BaseHutConverterSchema","text":"<p>Base class used for a converter schema.</p> <p>Attributes:</p> <ul> <li> <code>source</code>               (<code>SourceSchema | None</code>)           \u2013            <p>Source data</p> </li> </ul> <p>All attributes as in <code>HutSchema</code> either as attribute or pydantic <code>computed_field</code>.</p> <p>Examples:</p> <p>See <code>hut_services.osm.schema.OsmHut0Convert</code>.</p> <p>Classes:</p> <ul> <li> <code>FieldNotImplementedError</code>           \u2013            <p>Field is not implemented.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get_hut</code>             \u2013              <p>Convert to hut.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>source_data</code>               (<code>TSourceData</code>)           \u2013            </li> <li> <code>include_photos</code>               (<code>bool</code>)           \u2013            </li> <li> <code>slug</code>               (<code>str</code>)           \u2013            </li> <li> <code>name</code>               (<code>TranslationSchema</code>)           \u2013            </li> <li> <code>source</code>               (<code>SourceSchema | None</code>)           \u2013            </li> <li> <code>author</code>               (<code>AuthorSchema | None</code>)           \u2013            </li> <li> <code>source_name</code>               (<code>str</code>)           \u2013            </li> <li> <code>location</code>               (<code>LocationEleSchema</code>)           \u2013            </li> <li> <code>description</code>               (<code>TranslationSchema</code>)           \u2013            </li> <li> <code>notes</code>               (<code>list[TranslationSchema]</code>)           \u2013            </li> <li> <code>owner</code>               (<code>OwnerSchema | None</code>)           \u2013            </li> <li> <code>url</code>               (<code>str</code>)           \u2013            </li> <li> <code>contacts</code>               (<code>list[ContactSchema]</code>)           \u2013            </li> <li> <code>country_code</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>comment</code>               (<code>str</code>)           \u2013            </li> <li> <code>capacity</code>               (<code>CapacitySchema</code>)           \u2013            </li> <li> <code>hut_type</code>               (<code>HutTypeSchema</code>)           \u2013            </li> <li> <code>photos</code>               (<code>list[PhotoSchema]</code>)           \u2013            </li> <li> <code>open_monthly</code>               (<code>OpenMonthlySchema</code>)           \u2013            </li> <li> <code>is_active</code>               (<code>bool</code>)           \u2013            </li> <li> <code>is_public</code>               (<code>bool</code>)           \u2013            </li> <li> <code>extras</code>               (<code>dict[str, Any]</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.source_data","title":"source_data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_data: TSourceData = Field(..., exclude=True)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.include_photos","title":"include_photos  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>include_photos: bool = True\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.slug","title":"slug  <code>property</code>","text":"<pre><code>slug: str\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.name","title":"name  <code>property</code>","text":"<pre><code>name: TranslationSchema\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.source","title":"source  <code>property</code>","text":"<pre><code>source: SourceSchema | None\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.author","title":"author  <code>property</code>","text":"<pre><code>author: AuthorSchema | None\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.source_name","title":"source_name  <code>property</code>","text":"<pre><code>source_name: str\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.location","title":"location  <code>property</code>","text":"<pre><code>location: LocationEleSchema\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.description","title":"description  <code>property</code>","text":"<pre><code>description: TranslationSchema\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.notes","title":"notes  <code>property</code>","text":"<pre><code>notes: list[TranslationSchema]\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.owner","title":"owner  <code>property</code>","text":"<pre><code>owner: OwnerSchema | None\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.url","title":"url  <code>property</code>","text":"<pre><code>url: str\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.contacts","title":"contacts  <code>property</code>","text":"<pre><code>contacts: list[ContactSchema]\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.country_code","title":"country_code  <code>property</code>","text":"<pre><code>country_code: str | None\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.comment","title":"comment  <code>property</code>","text":"<pre><code>comment: str\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.capacity","title":"capacity  <code>property</code>","text":"<pre><code>capacity: CapacitySchema\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.hut_type","title":"hut_type  <code>property</code>","text":"<pre><code>hut_type: HutTypeSchema\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.photos","title":"photos  <code>property</code>","text":"<pre><code>photos: list[PhotoSchema]\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.open_monthly","title":"open_monthly  <code>property</code>","text":"<pre><code>open_monthly: OpenMonthlySchema\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.is_active","title":"is_active  <code>property</code>","text":"<pre><code>is_active: bool\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.is_public","title":"is_public  <code>property</code>","text":"<pre><code>is_public: bool\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.extras","title":"extras  <code>property</code>","text":"<pre><code>extras: dict[str, Any]\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema-classes","title":"Classes","text":""},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.FieldNotImplementedError","title":"FieldNotImplementedError","text":"<pre><code>FieldNotImplementedError(\n    obj: BaseHutConverterSchema, field: str\n)\n</code></pre> <p>Field is not implemented.</p> <p>Parameters:</p>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.FieldNotImplementedError(obj)","title":"<code>obj</code>","text":"(<code>BaseHutConverterSchema</code>)           \u2013            <p>Current object.</p>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.FieldNotImplementedError(field)","title":"<code>field</code>","text":"(<code>str</code>)           \u2013            <p>Field which is not implementd.</p>"},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.FieldNotImplementedError-functions","title":"Functions","text":""},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema-functions","title":"Functions","text":""},{"location":"reference/hut_services/#hut_services.BaseHutConverterSchema.get_hut","title":"get_hut","text":"<pre><code>get_hut() -&gt; HutSchema\n</code></pre> <p>Convert to hut.</p> <p>Returns:</p> <ul> <li> <code>HutSchema</code>           \u2013            <p>Converted hut.</p> </li> </ul>"},{"location":"reference/hut_services/#hut_services.BaseHutSourceSchema","title":"BaseHutSourceSchema","text":"<p>Base class for a hut source.</p> <p>Attributes:</p> <ul> <li> <code>source_name</code>               (<code>str</code>)           \u2013            <p>Name of the source (e.g. osm, wikipedia, ...).</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Original hut name.</p> </li> <li> <code>location</code>               (<code>LocationEleSchema | None</code>)           \u2013            <p>Location of the hut.</p> </li> <li> <code>source_id</code>               (<code>str</code>)           \u2013            <p>Originial source id of the hut.</p> </li> <li> <code>source_data</code>               (<code>TSourceData_co | None</code>)           \u2013            <p>Source data for this hut.</p> </li> <li> <code>source_properties</code>               (<code>TProperties_co | None</code>)           \u2013            <p>Additinal source data properties.</p> </li> <li> <code>version</code>               (<code>int</code>)           \u2013            <p>Version of the service when this entry was created.</p> </li> <li> <code>created</code>               (<code>datetime</code>)           \u2013            <p>Created.</p> </li> </ul> <p>Examples:</p> <pre><code>class MyHutSource(BaseHutSourceSchema[MyHutSchema, SourcePropertiesSchema]):\n    source_name: str = \"my\"\n</code></pre> <p>Or with different properties: <code>hut_services.osm.schema.OsmHutSource</code>.</p> <p>Methods:</p> <ul> <li> <code>__str__</code>             \u2013              </li> <li> <code>show</code>             \u2013              <p>Returns a formatted string with the hut information which can be printed.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>source_name</code>               (<code>str</code>)           \u2013            </li> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> <li> <code>location</code>               (<code>LocationEleSchema | None</code>)           \u2013            </li> <li> <code>source_id</code>               (<code>str</code>)           \u2013            </li> <li> <code>source_data</code>               (<code>TSourceData_co | None</code>)           \u2013            </li> <li> <code>source_properties</code>               (<code>TProperties_co | None</code>)           \u2013            </li> <li> <code>version</code>               (<code>int</code>)           \u2013            </li> <li> <code>created</code>               (<code>datetime</code>)           \u2013            </li> <li> <code>source_properties_schema</code>               (<code>dict</code>)           \u2013            <p>Returns JSON schema for the 'source_properties' fields.</p> </li> </ul>"},{"location":"reference/hut_services/#hut_services.BaseHutSourceSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/#hut_services.BaseHutSourceSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(coerce_numbers_to_str=True)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutSourceSchema.source_name","title":"source_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_name: str = Field(\n    \"unknown\",\n    description=\"Name of the source (e.g. osm, wikipedia, ...).\",\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutSourceSchema.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = Field(..., description='Original hut name.')\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutSourceSchema.location","title":"location  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>location: LocationEleSchema | None = Field(\n    None, description=\"Location of the hut.\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutSourceSchema.source_id","title":"source_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_id: str = Field(\n    ..., description=\"Originial source id of the hut.\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutSourceSchema.source_data","title":"source_data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_data: TSourceData_co | None = Field(\n    None, description=\"Source data for this hut.\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutSourceSchema.source_properties","title":"source_properties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_properties: TProperties_co | None = Field(\n    None, description=\"Additinal source data properties.\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutSourceSchema.version","title":"version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>version: int = Field(\n    default=0,\n    description=\"Version of the service when this entry was created.\",\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutSourceSchema.created","title":"created  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created: datetime = Field(\n    default_factory=now,\n    description=\"Version of the service when this entry was created.\",\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutSourceSchema.source_properties_schema","title":"source_properties_schema  <code>property</code>","text":"<pre><code>source_properties_schema: dict\n</code></pre> <p>Returns JSON schema for the 'source_properties' fields.</p> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>JSON schema.</p> </li> </ul>"},{"location":"reference/hut_services/#hut_services.BaseHutSourceSchema-functions","title":"Functions","text":""},{"location":"reference/hut_services/#hut_services.BaseHutSourceSchema.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseHutSourceSchema.show","title":"show","text":"<pre><code>show(\n    source_id: bool = True,\n    location: bool = True,\n    elevation: bool = True,\n    source_name: bool = True,\n    version: bool = False,\n    created: bool = False,\n) -&gt; str\n</code></pre> <p>Returns a formatted string with the hut information which can be printed.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>Formatted string.</p> </li> </ul>"},{"location":"reference/hut_services/#hut_services.BaseHutSourceSchema.show(source_id)","title":"<code>source_id</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show source ID.</p>"},{"location":"reference/hut_services/#hut_services.BaseHutSourceSchema.show(location)","title":"<code>location</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show location.</p>"},{"location":"reference/hut_services/#hut_services.BaseHutSourceSchema.show(elevation)","title":"<code>elevation</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show elevation.</p>"},{"location":"reference/hut_services/#hut_services.BaseHutSourceSchema.show(source_name)","title":"<code>source_name</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show source name.</p>"},{"location":"reference/hut_services/#hut_services.BaseHutSourceSchema.show(version)","title":"<code>version</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Show verions.</p>"},{"location":"reference/hut_services/#hut_services.BaseHutSourceSchema.show(created)","title":"<code>created</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Show created date.</p>"},{"location":"reference/hut_services/#hut_services.CapacitySchema","title":"CapacitySchema","text":"<p>Hut capacities.</p> Hint <p>For unattended accomodations the <code>opened</code> attribute should be used.</p> <p>Attributes:</p> <ul> <li> <code>open</code>           \u2013            <p>Capacity when the hut is open</p> </li> <li> <code>closed</code>           \u2013            <p>Capacity when the hut is closed (shelter, winterroom, ...)</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>if_open</code>               (<code>NaturalInt | None</code>)           \u2013            </li> <li> <code>if_closed</code>               (<code>NaturalInt | None</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/#hut_services.CapacitySchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/#hut_services.CapacitySchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.CapacitySchema.if_open","title":"if_open  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>if_open: NaturalInt | None = Field(\n    None,\n    alias=\"open\",\n    description=\"Capacity when the hut is open\",\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.CapacitySchema.if_closed","title":"if_closed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>if_closed: NaturalInt | None = Field(\n    None,\n    alias=\"closed\",\n    description=\"Capacity when the hut is closed (shelter, winterroom, ...)\",\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.ContactSchema","title":"ContactSchema","text":"<p>Schema for a contact.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Contact name (persion or organization), can also be empty.</p> </li> <li> <code>email</code>               (<code>str</code>)           \u2013            <p>E-mail address.</p> </li> <li> <code>phone</code>               (<code>str</code>)           \u2013            <p>Phone number.</p> </li> <li> <code>mobile</code>               (<code>str</code>)           \u2013            <p>Mobule phone number.</p> </li> <li> <code>function</code>               (<code>str</code>)           \u2013            <p>Function, e.g. hut warden.</p> </li> <li> <code>url</code>               (<code>str</code>)           \u2013            <p>Additional url for this contact (not the hut website).</p> </li> <li> <code>address</code>               (<code>str</code>)           \u2013            <p>Address (street, city).</p> </li> <li> <code>note</code>               (<code>TranslationSchema</code>)           \u2013            <p>Additional note/information.</p> </li> <li> <code>is_active</code>               (<code>bool</code>)           \u2013            <p>Contact is active.</p> </li> <li> <code>is_public</code>               (<code>bool</code>)           \u2013            <p>Show contact public.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>extract_phone_numbers</code>             \u2013              <p>Extracts phone numbers from a string and returns them formatted</p> </li> <li> <code>number_to_phone_or_mobile</code>             \u2013              <p>Given a phone number it returns it eihter as <code>phone</code> or <code>mobile</code> number.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> <li> <code>email</code>               (<code>str</code>)           \u2013            </li> <li> <code>phone</code>               (<code>str</code>)           \u2013            </li> <li> <code>mobile</code>               (<code>str</code>)           \u2013            </li> <li> <code>function</code>               (<code>str</code>)           \u2013            </li> <li> <code>url</code>               (<code>str</code>)           \u2013            </li> <li> <code>address</code>               (<code>str</code>)           \u2013            </li> <li> <code>note</code>               (<code>TranslationSchema</code>)           \u2013            </li> <li> <code>is_active</code>               (<code>bool</code>)           \u2013            </li> <li> <code>is_public</code>               (<code>bool</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/#hut_services.ContactSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/#hut_services.ContactSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.ContactSchema.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = Field('', max_length=70)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.ContactSchema.email","title":"email  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>email: str = Field('', max_length=70)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.ContactSchema.phone","title":"phone  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>phone: str = Field('', max_length=30)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.ContactSchema.mobile","title":"mobile  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>mobile: str = Field('', max_length=30)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.ContactSchema.function","title":"function  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>function: str = Field('', max_length=20)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.ContactSchema.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url: str = Field('', max_length=200)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.ContactSchema.address","title":"address  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>address: str = Field('', max_length=200)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.ContactSchema.note","title":"note  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>note: TranslationSchema = Field(\n    default_factory=TranslationSchema\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.ContactSchema.is_active","title":"is_active  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_active: bool = True\n</code></pre>"},{"location":"reference/hut_services/#hut_services.ContactSchema.is_public","title":"is_public  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_public: bool = False\n</code></pre>"},{"location":"reference/hut_services/#hut_services.ContactSchema-functions","title":"Functions","text":""},{"location":"reference/hut_services/#hut_services.ContactSchema.extract_phone_numbers","title":"extract_phone_numbers  <code>classmethod</code>","text":"<pre><code>extract_phone_numbers(\n    numbers_string: str, region: str | None\n) -&gt; list[str]\n</code></pre> <p>Extracts phone numbers from a string and returns them formatted with international code. Uses the <code>phonenumbers</code> package.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>A list with formatted phone numbers.</p> </li> </ul>"},{"location":"reference/hut_services/#hut_services.ContactSchema.extract_phone_numbers(numbers_string)","title":"<code>numbers_string</code>","text":"(<code>str</code>)           \u2013            <p>A string with phone numbers in it.</p>"},{"location":"reference/hut_services/#hut_services.ContactSchema.extract_phone_numbers(region)","title":"<code>region</code>","text":"(<code>str | None</code>)           \u2013            <p>Country code.</p>"},{"location":"reference/hut_services/#hut_services.ContactSchema.number_to_phone_or_mobile","title":"number_to_phone_or_mobile  <code>classmethod</code>","text":"<pre><code>number_to_phone_or_mobile(\n    numbers: str | Sequence[str],\n    region: str | None,\n    formatted: bool = False,\n) -&gt; PhoneMobile\n</code></pre> <p>Given a phone number it returns it eihter as <code>phone</code> or <code>mobile</code> number. Uses the <code>phonenumbers</code> package.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>PhoneMobile</code>           \u2013            <p>Tuple with <code>phone</code> and <code>mobile</code> number (<code>(phone, mobile)</code>).</p> </li> </ul>"},{"location":"reference/hut_services/#hut_services.ContactSchema.number_to_phone_or_mobile(numbers)","title":"<code>numbers</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>List or string of phone numbers, they are extraced and the two assigned to phone and mobile.</p>"},{"location":"reference/hut_services/#hut_services.ContactSchema.number_to_phone_or_mobile(region)","title":"<code>region</code>","text":"(<code>str | None</code>)           \u2013            <p>Country code.</p>"},{"location":"reference/hut_services/#hut_services.ContactSchema.number_to_phone_or_mobile(formatted)","title":"<code>formatted</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Phone list is alreaad formatted</p>"},{"location":"reference/hut_services/#hut_services.HutSchema","title":"HutSchema","text":"<p>Hut schema.</p> <p>Attributes:</p> <ul> <li> <code>slug</code>               (<code>str</code>)           \u2013            <p>Hut slug, if empty it is replaced by slugified <code>name</code>.</p> </li> <li> <code>name</code>               (<code>TranslationSchema</code>)           \u2013            <p>Original hut name.</p> </li> <li> <code>location</code>               (<code>LocationEleSchema</code>)           \u2013            <p>Location of the hut.</p> </li> <li> <code>description</code>               (<code>TranslationSchema</code>)           \u2013            <p>Description.</p> </li> <li> <code>notes</code>               (<code>Sequence[TranslationSchema]</code>)           \u2013            <p>Additional public notes to the hut.</p> </li> <li> <code>owner</code>               (<code>OwnerSchema | None</code>)           \u2013            <p>Hut owner.</p> </li> <li> <code>url</code>               (<code>str</code>)           \u2013            <p>Hut website.</p> </li> <li> <code>contacts</code>               (<code>Sequence[ContactSchema]</code>)           \u2013            <p>Hut contacts.</p> </li> <li> <code>country_code</code>               (<code>str | None</code>)           \u2013            <p>Country.</p> </li> <li> <code>comment</code>               (<code>str</code>)           \u2013            <p>Additional private comment to the hut.</p> </li> <li> <code>capacity</code>               (<code>CapacitySchema</code>)           \u2013            <p>Cpacities of the hut.</p> </li> <li> <code>type</code>               (<code>CapacitySchema</code>)           \u2013            <p>Hut type (e.g. <code>selfhut</code>).</p> </li> <li> <code>photos</code>               (<code>list[PhotoSchema]</code>)           \u2013            <p>Hut photos.</p> </li> <li> <code>open_monthly</code>               (<code>OpenMonthlySchema</code>)           \u2013            <p>Monthly value if open, closed or partially open.</p> </li> <li> <code>is_active</code>               (<code>bool</code>)           \u2013            <p>Hut is active.</p> </li> <li> <code>is_public</code>               (<code>bool</code>)           \u2013            <p>Show hut public.</p> </li> <li> <code>extras</code>               (<code>Mapping[str, Any]</code>)           \u2013            <p>Additional information to the hut as dictionary.</p> </li> <li> <code>source</code>               (<code>SourceSchema | None</code>)           \u2013            <p>Short name of source (e.g. 'hrs' for alpsonline.org, or 'sac', 'refuges', ...).</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>__str__</code>             \u2013              </li> <li> <code>add_slug</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>slug</code>               (<code>str</code>)           \u2013            </li> <li> <code>name</code>               (<code>TranslationSchema</code>)           \u2013            </li> <li> <code>location</code>               (<code>LocationEleSchema</code>)           \u2013            </li> <li> <code>description</code>               (<code>TranslationSchema</code>)           \u2013            </li> <li> <code>license</code>               (<code>LicenseSchema | None</code>)           \u2013            </li> <li> <code>source</code>               (<code>SourceSchema | None</code>)           \u2013            </li> <li> <code>author</code>               (<code>AuthorSchema | None</code>)           \u2013            </li> <li> <code>notes</code>               (<code>Sequence[TranslationSchema]</code>)           \u2013            </li> <li> <code>owner</code>               (<code>OwnerSchema | None</code>)           \u2013            </li> <li> <code>url</code>               (<code>str</code>)           \u2013            </li> <li> <code>contacts</code>               (<code>Sequence[ContactSchema]</code>)           \u2013            </li> <li> <code>country_code</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>comment</code>               (<code>str</code>)           \u2013            </li> <li> <code>capacity</code>               (<code>CapacitySchema</code>)           \u2013            </li> <li> <code>hut_type</code>               (<code>HutTypeSchema</code>)           \u2013            </li> <li> <code>photos</code>               (<code>list[PhotoSchema]</code>)           \u2013            </li> <li> <code>open_monthly</code>               (<code>OpenMonthlySchema</code>)           \u2013            </li> <li> <code>is_active</code>               (<code>bool</code>)           \u2013            </li> <li> <code>is_public</code>               (<code>bool</code>)           \u2013            </li> <li> <code>extras</code>               (<code>Mapping[str, Any]</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/#hut_services.HutSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/#hut_services.HutSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutSchema.slug","title":"slug  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>slug: str = Field('', max_length=50)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutSchema.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: TranslationSchema = Field(\n    ..., description=\"Original hut name.\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutSchema.location","title":"location  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>location: LocationEleSchema = Field(\n    ...,\n    description=\"Location of the hut with optional elevation.\",\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutSchema.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description: TranslationSchema = Field(\n    default_factory=TranslationSchema\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutSchema.license","title":"license  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>license: LicenseSchema | None = Field(\n    None,\n    description=\"License for the hut information (mainly descpription)\",\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutSchema.source","title":"source  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source: SourceSchema | None = Field(\n    None,\n    description=\"Source origin information (e.g. 'hrs' for alpsonline.org, or 'sac', 'refuges', ...).\",\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutSchema.author","title":"author  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>author: AuthorSchema | None = Field(\n    None,\n    description=\"Author of the hut information, this is an addition to the source information (e.g. custom author)\",\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutSchema.notes","title":"notes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>notes: Sequence[TranslationSchema] = Field(\n    ..., description=\"Additional notes to the hut.\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutSchema.owner","title":"owner  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>owner: OwnerSchema | None = Field(None)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutSchema.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url: str = Field('', max_length=200)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutSchema.contacts","title":"contacts  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contacts: Sequence[ContactSchema] = Field(\n    default_factory=list\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutSchema.country_code","title":"country_code  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>country_code: str | None = Field(\n    None, max_length=2, min_length=2\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutSchema.comment","title":"comment  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>comment: str = Field(\n    \"\",\n    max_length=20000,\n    description=\"Additional private comment, e.g for review.\",\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutSchema.capacity","title":"capacity  <code>instance-attribute</code>","text":"<pre><code>capacity: CapacitySchema\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutSchema.hut_type","title":"hut_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>hut_type: HutTypeSchema = Field(..., alias='type')\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutSchema.photos","title":"photos  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>photos: list[PhotoSchema] = Field(default_factory=list)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutSchema.open_monthly","title":"open_monthly  <code>instance-attribute</code>","text":"<pre><code>open_monthly: OpenMonthlySchema\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutSchema.is_active","title":"is_active  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_active: bool = Field(default=True)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutSchema.is_public","title":"is_public  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_public: bool = Field(default=True)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutSchema.extras","title":"extras  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extras: Mapping[str, Any] = Field(\n    default_factory=dict,\n    description=\"Additional information as dictionary.\",\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutSchema-functions","title":"Functions","text":""},{"location":"reference/hut_services/#hut_services.HutSchema.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutSchema.add_slug","title":"add_slug","text":"<pre><code>add_slug() -&gt; HutSchema\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutTypeEnum","title":"HutTypeEnum","text":"<p>Enum with hut types.</p> <p>Attributes:</p> <ul> <li> <code>unknown</code>           \u2013            </li> <li> <code>closed</code>           \u2013            </li> <li> <code>campgr</code>           \u2013            </li> <li> <code>shelter</code>           \u2013            </li> <li> <code>camping</code>           \u2013            </li> <li> <code>bivouac</code>           \u2013            </li> <li> <code>selfhut</code>           \u2013            </li> <li> <code>hut</code>           \u2013            </li> <li> <code>alp</code>           \u2013            </li> <li> <code>bhotel</code>           \u2013            </li> <li> <code>hostel</code>           \u2013            </li> <li> <code>hotel</code>           \u2013            </li> <li> <code>special</code>           \u2013            </li> <li> <code>resta</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/#hut_services.HutTypeEnum-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/#hut_services.HutTypeEnum.unknown","title":"unknown  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unknown = 'unknown'\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutTypeEnum.closed","title":"closed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>closed = 'closed'\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutTypeEnum.campgr","title":"campgr  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>campgr = 'campgr'\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutTypeEnum.shelter","title":"shelter  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>shelter = 'shelter'\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutTypeEnum.camping","title":"camping  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>camping = 'camping'\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutTypeEnum.bivouac","title":"bivouac  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bivouac = 'bivouac'\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutTypeEnum.selfhut","title":"selfhut  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>selfhut = 'selfhut'\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutTypeEnum.hut","title":"hut  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>hut = 'hut'\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutTypeEnum.alp","title":"alp  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>alp = 'alp'\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutTypeEnum.bhotel","title":"bhotel  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bhotel = 'bhotel'\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutTypeEnum.hostel","title":"hostel  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>hostel = 'hostel'\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutTypeEnum.hotel","title":"hotel  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>hotel = 'hotel'\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutTypeEnum.special","title":"special  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>special = 'special'\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutTypeEnum.resta","title":"resta  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>resta = 'resta'\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutTypeSchema","title":"HutTypeSchema","text":"<p>Hut type schema.</p> <p>Defines the type of the hut if it is open and closed. E.g. a hut can be a 'selfhut' if it is closed. If a hut is always open do not add anything to <code>closed</code>. If it is specifcally closed, e.g. during winter ass <code>'closed'</code>.</p> <p>Attributes:</p> <ul> <li> <code>open</code>           \u2013            <p>Type when the hut is open</p> </li> <li> <code>closed</code>           \u2013            <p>Type when the hut is closed (bivouac, selfhut, closed, ...)</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>if_open</code>               (<code>HutTypeEnum</code>)           \u2013            </li> <li> <code>if_closed</code>               (<code>HutTypeEnum | None</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/#hut_services.HutTypeSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/#hut_services.HutTypeSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutTypeSchema.if_open","title":"if_open  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>if_open: HutTypeEnum = Field(\n    unknown,\n    alias=\"open\",\n    description=\"Type when the hut is open\",\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.HutTypeSchema.if_closed","title":"if_closed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>if_closed: HutTypeEnum | None = Field(\n    None,\n    alias=\"closed\",\n    description=\"Type when the hut is closed (bivouac, selfhut, closed, ...)\",\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.LicenseSchema","title":"LicenseSchema","text":"<p>License information.</p> <p>Attributes:</p> <ul> <li> <code>slug</code>               (<code>str</code>)           \u2013            <p>Identifier or slug of the license (e.g. by-sa, cc-0, ...).</p> </li> <li> <code>url</code>               (<code>HttpUrl | None</code>)           \u2013            <p>URL of the license.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Fullname of the license.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>slug</code>               (<code>str</code>)           \u2013            </li> <li> <code>url</code>               (<code>HttpUrl | None</code>)           \u2013            </li> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/#hut_services.LicenseSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/#hut_services.LicenseSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.LicenseSchema.slug","title":"slug  <code>instance-attribute</code>","text":"<pre><code>slug: str\n</code></pre>"},{"location":"reference/hut_services/#hut_services.LicenseSchema.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url: HttpUrl | None = None\n</code></pre>"},{"location":"reference/hut_services/#hut_services.LicenseSchema.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = Field('', max_length=300)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OpenMonthlySchema","title":"OpenMonthlySchema","text":"<p>Shows for every month if it is usally, open, partially open or closed. Can be accessed as index, but it starts with 1 (month_01)!.</p> <p>Attributes:</p> <ul> <li> <code>url</code>               (<code>str</code>)           \u2013            <p>URL which shows if it is open or not.</p> </li> <li> <code>month_mm</code>               (<code>OpenMonthly</code>)           \u2013            <p>Month (starting with 01).</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>__getitem__</code>             \u2013              </li> <li> <code>__setitem__</code>             \u2013              </li> <li> <code>__iter__</code>             \u2013              </li> <li> <code>__next__</code>             \u2013              </li> <li> <code>set_month</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>url</code>               (<code>str</code>)           \u2013            </li> <li> <code>month_01</code>               (<code>AnswerEnum</code>)           \u2013            </li> <li> <code>month_02</code>               (<code>AnswerEnum</code>)           \u2013            </li> <li> <code>month_03</code>               (<code>AnswerEnum</code>)           \u2013            </li> <li> <code>month_04</code>               (<code>AnswerEnum</code>)           \u2013            </li> <li> <code>month_05</code>               (<code>AnswerEnum</code>)           \u2013            </li> <li> <code>month_06</code>               (<code>AnswerEnum</code>)           \u2013            </li> <li> <code>month_07</code>               (<code>AnswerEnum</code>)           \u2013            </li> <li> <code>month_08</code>               (<code>AnswerEnum</code>)           \u2013            </li> <li> <code>month_09</code>               (<code>AnswerEnum</code>)           \u2013            </li> <li> <code>month_10</code>               (<code>AnswerEnum</code>)           \u2013            </li> <li> <code>month_11</code>               (<code>AnswerEnum</code>)           \u2013            </li> <li> <code>month_12</code>               (<code>AnswerEnum</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/#hut_services.OpenMonthlySchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/#hut_services.OpenMonthlySchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OpenMonthlySchema.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url: str = Field(\n    \"\", description=\"URL which shows if it is open or not.\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OpenMonthlySchema.month_01","title":"month_01  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month_01: AnswerEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OpenMonthlySchema.month_02","title":"month_02  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month_02: AnswerEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OpenMonthlySchema.month_03","title":"month_03  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month_03: AnswerEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OpenMonthlySchema.month_04","title":"month_04  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month_04: AnswerEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OpenMonthlySchema.month_05","title":"month_05  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month_05: AnswerEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OpenMonthlySchema.month_06","title":"month_06  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month_06: AnswerEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OpenMonthlySchema.month_07","title":"month_07  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month_07: AnswerEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OpenMonthlySchema.month_08","title":"month_08  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month_08: AnswerEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OpenMonthlySchema.month_09","title":"month_09  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month_09: AnswerEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OpenMonthlySchema.month_10","title":"month_10  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month_10: AnswerEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OpenMonthlySchema.month_11","title":"month_11  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month_11: AnswerEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OpenMonthlySchema.month_12","title":"month_12  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month_12: AnswerEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OpenMonthlySchema-functions","title":"Functions","text":""},{"location":"reference/hut_services/#hut_services.OpenMonthlySchema.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(month: int) -&gt; AnswerEnum\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OpenMonthlySchema.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(month: int, value: AnswerEnum) -&gt; None\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OpenMonthlySchema.__iter__","title":"__iter__","text":"<pre><code>__iter__()\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OpenMonthlySchema.__next__","title":"__next__","text":"<pre><code>__next__() -&gt; AnswerEnum\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OpenMonthlySchema.set_month","title":"set_month","text":"<pre><code>set_month(month: int, value: AnswerEnum) -&gt; None\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OwnerSchema","title":"OwnerSchema","text":"<p>Schema for the owner.</p> <p>Attributes:</p> <ul> <li> <code>slug</code>               (<code>str</code>)           \u2013            <p>Owner slug, if empty it is replaced by slugified <code>name</code>.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Owner name, required.</p> </li> <li> <code>url</code>               (<code>str</code>)           \u2013            <p>Owners URL (not the hut website).</p> </li> <li> <code>note</code>               (<code>TranslationSchema</code>)           \u2013            <p>Additonal (public) note to the owner.</p> </li> <li> <code>comment</code>               (<code>str</code>)           \u2013            <p>Private comment to the owner.</p> </li> <li> <code>contacts</code>               (<code>ContactSchema | None</code>)           \u2013            <p>Contacts used for the owner.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>add_slug</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>slug</code>               (<code>str</code>)           \u2013            </li> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> <li> <code>url</code>               (<code>str</code>)           \u2013            </li> <li> <code>note</code>               (<code>TranslationSchema</code>)           \u2013            </li> <li> <code>comment</code>               (<code>str</code>)           \u2013            </li> <li> <code>contacts</code>               (<code>ContactSchema | None</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/#hut_services.OwnerSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/#hut_services.OwnerSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OwnerSchema.slug","title":"slug  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>slug: str = Field('', max_length=50)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OwnerSchema.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = Field(..., max_length=100)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OwnerSchema.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url: str = Field('', max_length=200)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OwnerSchema.note","title":"note  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>note: TranslationSchema = Field(\n    default_factory=TranslationSchema\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OwnerSchema.comment","title":"comment  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>comment: str = ''\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OwnerSchema.contacts","title":"contacts  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contacts: ContactSchema | None = None\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OwnerSchema-functions","title":"Functions","text":""},{"location":"reference/hut_services/#hut_services.OwnerSchema.add_slug","title":"add_slug","text":"<pre><code>add_slug() -&gt; OwnerSchema\n</code></pre>"},{"location":"reference/hut_services/#hut_services.PhotoSchema","title":"PhotoSchema","text":"<p>Schema for a hut photo.</p> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>licenses</code>               (<code>list[LicenseSchema]</code>)           \u2013            </li> <li> <code>caption</code>               (<code>TranslationSchema</code>)           \u2013            </li> <li> <code>source</code>               (<code>SourceSchema | None</code>)           \u2013            </li> <li> <code>author</code>               (<code>AuthorSchema | None</code>)           \u2013            </li> <li> <code>comment</code>               (<code>str</code>)           \u2013            </li> <li> <code>raw_url</code>               (<code>HttpUrl</code>)           \u2013            </li> <li> <code>width</code>               (<code>int</code>)           \u2013            </li> <li> <code>height</code>               (<code>int</code>)           \u2013            </li> <li> <code>url</code>               (<code>HttpUrl</code>)           \u2013            </li> <li> <code>capture_date</code>               (<code>datetime | None</code>)           \u2013            </li> <li> <code>tags</code>               (<code>set[str] | None</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/#hut_services.PhotoSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/#hut_services.PhotoSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.PhotoSchema.licenses","title":"licenses  <code>instance-attribute</code>","text":"<pre><code>licenses: list[LicenseSchema]\n</code></pre>"},{"location":"reference/hut_services/#hut_services.PhotoSchema.caption","title":"caption  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>caption: TranslationSchema = Field(\n    default_factory=TranslationSchema\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.PhotoSchema.source","title":"source  <code>instance-attribute</code>","text":"<pre><code>source: SourceSchema | None\n</code></pre>"},{"location":"reference/hut_services/#hut_services.PhotoSchema.author","title":"author  <code>instance-attribute</code>","text":"<pre><code>author: AuthorSchema | None\n</code></pre>"},{"location":"reference/hut_services/#hut_services.PhotoSchema.comment","title":"comment  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>comment: str = Field(\n    \"\",\n    max_length=20000,\n    description=\"Additional private comment, e.g for review.\",\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.PhotoSchema.raw_url","title":"raw_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>raw_url: HttpUrl = Field(\n    ...,\n    description=\"Url to the raw image, this can be used to download or embed the image.\",\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.PhotoSchema.width","title":"width  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>width: int = Field(\n    ..., description=\"Image width in pixels.\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.PhotoSchema.height","title":"height  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>height: int = Field(\n    ..., description=\"Image height in pixels.\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.PhotoSchema.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url: HttpUrl = Field(\n    ...,\n    description=\"Url to the image on the side, this should not be used to include it direclty, rather to just link to it.\",\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.PhotoSchema.capture_date","title":"capture_date  <code>instance-attribute</code>","text":"<pre><code>capture_date: datetime | None\n</code></pre>"},{"location":"reference/hut_services/#hut_services.PhotoSchema.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags: set[str] | None = None\n</code></pre>"},{"location":"reference/hut_services/#hut_services.PhotoSchemaOld","title":"PhotoSchemaOld","text":"<p>Photo schema.</p> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>attribution</code>               (<code>str</code>)           \u2013            </li> <li> <code>url</code>               (<code>str</code>)           \u2013            </li> <li> <code>thumb</code>               (<code>str</code>)           \u2013            </li> <li> <code>caption</code>               (<code>TranslationSchema | None</code>)           \u2013            </li> <li> <code>comment</code>               (<code>str</code>)           \u2013            </li> <li> <code>is_public</code>               (<code>bool</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/#hut_services.PhotoSchemaOld-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/#hut_services.PhotoSchemaOld.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.PhotoSchemaOld.attribution","title":"attribution  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>attribution: str = Field(\n    \"\",\n    description=\"Attribution, resp. copyright information as markdown text\",\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.PhotoSchemaOld.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url: str\n</code></pre>"},{"location":"reference/hut_services/#hut_services.PhotoSchemaOld.thumb","title":"thumb  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>thumb: str = Field(\n    \"\", description=\"Url to thumbnail (around 400px).\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.PhotoSchemaOld.caption","title":"caption  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>caption: TranslationSchema | None = Field(\n    None, description=\"Original hut name.\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.PhotoSchemaOld.comment","title":"comment  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>comment: str = Field(\n    \"\",\n    max_length=20000,\n    description=\"Additional private comment, e.g for review.\",\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.PhotoSchemaOld.is_public","title":"is_public  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_public: bool = Field(default=True)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.SourceDataSchema","title":"SourceDataSchema","text":"<p>SourceData schema</p> <p>Methods:</p> <ul> <li> <code>get_id</code>             \u2013              <p>Get source <code>id</code>.</p> </li> <li> <code>get_name</code>             \u2013              <p>Get source hut <code>name</code>.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/#hut_services.SourceDataSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/#hut_services.SourceDataSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.SourceDataSchema-functions","title":"Functions","text":""},{"location":"reference/hut_services/#hut_services.SourceDataSchema.get_id","title":"get_id","text":"<pre><code>get_id() -&gt; str\n</code></pre> <p>Get source <code>id</code>.</p>"},{"location":"reference/hut_services/#hut_services.SourceDataSchema.get_name","title":"get_name","text":"<pre><code>get_name() -&gt; str\n</code></pre> <p>Get source hut <code>name</code>.</p>"},{"location":"reference/hut_services/#hut_services.SourcePropertiesSchema","title":"SourcePropertiesSchema","text":"<p>Properties saved together with the source data.</p> <p>Examples:</p> <p>See <code>hut_services.osm.schema.OsmProperties</code>.</p>"},{"location":"reference/hut_services/#hut_services.SourceSchema","title":"SourceSchema","text":"<p>Source information.</p> <p>Attributes:</p> <ul> <li> <code>ident</code>               (<code>str</code>)           \u2013            <p>Identifier or slug of the source.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name of the source, either person or organization (e.g refuges, wikicommon, sac, ...)</p> </li> <li> <code>url</code>               (<code>HttpUrl | None</code>)           \u2013            <p>URL of the source.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>ident</code>               (<code>str</code>)           \u2013            </li> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> <li> <code>url</code>               (<code>HttpUrl | None</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/#hut_services.SourceSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/#hut_services.SourceSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.SourceSchema.ident","title":"ident  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ident: str = Field('', max_length=300)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.SourceSchema.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = Field('', max_length=300)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.SourceSchema.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url: HttpUrl | None = None\n</code></pre>"},{"location":"reference/hut_services/#hut_services.LocationEleSchema","title":"LocationEleSchema","text":"<p>Location with longitude, latitude and (optional) elevation in WSG84.</p> <p>Attributes:</p> <ul> <li> <code>lat</code>               (<code>Latitude</code>)           \u2013            <p>Latitude.</p> </li> <li> <code>lon</code>               (<code>Longitude</code>)           \u2013            <p>Longitude.</p> </li> <li> <code>ele</code>               (<code>Elevation | None</code>)           \u2013            <p>Elevation in meter.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>check_field_aliases</code>             \u2013              </li> <li> <code>from_swiss</code>             \u2013              </li> <li> <code>__str__</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>lat</code>               (<code>Latitude</code>)           \u2013            </li> <li> <code>lon</code>               (<code>Longitude</code>)           \u2013            </li> <li> <code>lon_lat</code>               (<code>tuple[Longitude, Latitude]</code>)           \u2013            <p>Tuple with (<code>longitude</code>, <code>latitude</code>).</p> </li> <li> <code>model_config</code>           \u2013            </li> <li> <code>ele</code>               (<code>Elevation | None</code>)           \u2013            </li> <li> <code>lon_lat_ele</code>               (<code>tuple[Longitude, Latitude, Elevation]</code>)           \u2013            <p>Tuple with longitude, latitude and elevation. If elevation is not defined it returns 0.</p> </li> <li> <code>geojson</code>               (<code>Point</code>)           \u2013            <p>Retuns as geojson point.</p> </li> </ul>"},{"location":"reference/hut_services/#hut_services.LocationEleSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/#hut_services.LocationEleSchema.lat","title":"lat  <code>instance-attribute</code>","text":"<pre><code>lat: Latitude\n</code></pre>"},{"location":"reference/hut_services/#hut_services.LocationEleSchema.lon","title":"lon  <code>instance-attribute</code>","text":"<pre><code>lon: Longitude\n</code></pre>"},{"location":"reference/hut_services/#hut_services.LocationEleSchema.lon_lat","title":"lon_lat  <code>property</code>","text":"<pre><code>lon_lat: tuple[Longitude, Latitude]\n</code></pre> <p>Tuple with (<code>longitude</code>, <code>latitude</code>).</p> <p>Returns:</p> <ul> <li> <code>tuple[Longitude, Latitude]</code>           \u2013            <p>Longitude and latitude.</p> </li> </ul>"},{"location":"reference/hut_services/#hut_services.LocationEleSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(from_attributes=True)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.LocationEleSchema.ele","title":"ele  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ele: Elevation | None = None\n</code></pre>"},{"location":"reference/hut_services/#hut_services.LocationEleSchema.lon_lat_ele","title":"lon_lat_ele  <code>property</code>","text":"<pre><code>lon_lat_ele: tuple[Longitude, Latitude, Elevation]\n</code></pre> <p>Tuple with longitude, latitude and elevation. If elevation is not defined it returns 0.</p> <p>Returns:</p> <ul> <li> <code>tuple[Longitude, Latitude, Elevation]</code>           \u2013            <p>Longitude, latitude and elevation.</p> </li> </ul>"},{"location":"reference/hut_services/#hut_services.LocationEleSchema.geojson","title":"geojson  <code>property</code>","text":"<pre><code>geojson: Point\n</code></pre> <p>Retuns as geojson point.</p>"},{"location":"reference/hut_services/#hut_services.LocationEleSchema-functions","title":"Functions","text":""},{"location":"reference/hut_services/#hut_services.LocationEleSchema.check_field_aliases","title":"check_field_aliases  <code>classmethod</code>","text":"<pre><code>check_field_aliases(data: Any) -&gt; Any\n</code></pre>"},{"location":"reference/hut_services/#hut_services.LocationEleSchema.from_swiss","title":"from_swiss  <code>classmethod</code>","text":"<pre><code>from_swiss(\n    ch_lat: float, ch_lon: float, ele: float | None\n) -&gt; LocationEleSchema\n</code></pre>"},{"location":"reference/hut_services/#hut_services.LocationEleSchema.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre>"},{"location":"reference/hut_services/#hut_services.LocationSchema","title":"LocationSchema","text":"<p>Location with longitude, latitude and optional elevation in WSG84.</p> <p>Attributes:</p> <ul> <li> <code>lon</code>               (<code>Longitude</code>)           \u2013            <p>Longitude (x).</p> </li> <li> <code>lat</code>               (<code>Latitude</code>)           \u2013            <p>Latitude (y).</p> </li> <li> <code>ele</code>               (<code>Latitude</code>)           \u2013            <p>Elevation in meter.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>check_field_aliases</code>             \u2013              </li> <li> <code>from_swiss</code>             \u2013              <p>Takes LV03 or LV95 (newest) coordiates.</p> </li> <li> <code>__str__</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>lat</code>               (<code>Latitude</code>)           \u2013            </li> <li> <code>lon</code>               (<code>Longitude</code>)           \u2013            </li> <li> <code>lon_lat</code>               (<code>tuple[Longitude, Latitude]</code>)           \u2013            <p>Tuple with (<code>longitude</code>, <code>latitude</code>).</p> </li> <li> <code>geojson</code>               (<code>Point</code>)           \u2013            <p>Retuns as geojson point.</p> </li> </ul>"},{"location":"reference/hut_services/#hut_services.LocationSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/#hut_services.LocationSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(from_attributes=True)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.LocationSchema.lat","title":"lat  <code>instance-attribute</code>","text":"<pre><code>lat: Latitude\n</code></pre>"},{"location":"reference/hut_services/#hut_services.LocationSchema.lon","title":"lon  <code>instance-attribute</code>","text":"<pre><code>lon: Longitude\n</code></pre>"},{"location":"reference/hut_services/#hut_services.LocationSchema.lon_lat","title":"lon_lat  <code>property</code>","text":"<pre><code>lon_lat: tuple[Longitude, Latitude]\n</code></pre> <p>Tuple with (<code>longitude</code>, <code>latitude</code>).</p> <p>Returns:</p> <ul> <li> <code>tuple[Longitude, Latitude]</code>           \u2013            <p>Longitude and latitude.</p> </li> </ul>"},{"location":"reference/hut_services/#hut_services.LocationSchema.geojson","title":"geojson  <code>property</code>","text":"<pre><code>geojson: Point\n</code></pre> <p>Retuns as geojson point.</p>"},{"location":"reference/hut_services/#hut_services.LocationSchema-functions","title":"Functions","text":""},{"location":"reference/hut_services/#hut_services.LocationSchema.check_field_aliases","title":"check_field_aliases  <code>classmethod</code>","text":"<pre><code>check_field_aliases(data: Any) -&gt; Any\n</code></pre>"},{"location":"reference/hut_services/#hut_services.LocationSchema.from_swiss","title":"from_swiss  <code>classmethod</code>","text":"<pre><code>from_swiss(\n    ch_lat: float, ch_lon: float, ele: float | None\n) -&gt; LocationSchema | LocationEleSchema\n</code></pre> <p>Takes LV03 or LV95 (newest) coordiates. More information.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>LocationSchema | LocationEleSchema</code>           \u2013            <p><code>LocationSchema</code> object.</p> </li> </ul>"},{"location":"reference/hut_services/#hut_services.LocationSchema.from_swiss(ch_lat)","title":"<code>ch_lat</code>","text":"(<code>float</code>)           \u2013            <p>Latitude in swiss format (east).</p>"},{"location":"reference/hut_services/#hut_services.LocationSchema.from_swiss(ch_lon)","title":"<code>ch_lon</code>","text":"(<code>float</code>)           \u2013            <p>Longitude in swiss format (north).</p>"},{"location":"reference/hut_services/#hut_services.LocationSchema.from_swiss(ele)","title":"<code>ele</code>","text":"(<code>float | None</code>)           \u2013            <p>Elevation in meter.</p>"},{"location":"reference/hut_services/#hut_services.LocationSchema.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre>"},{"location":"reference/hut_services/#hut_services.TranslationSchema","title":"TranslationSchema","text":"<p>Field with different translations.</p> <p>Attributes:</p> <ul> <li> <code>de</code>               (<code>NoneStr</code>)           \u2013            <p>German</p> </li> <li> <code>en</code>               (<code>NoneStr</code>)           \u2013            <p>English</p> </li> <li> <code>fr</code>               (<code>NoneStr</code>)           \u2013            <p>French</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>de</code>               (<code>NoneStr</code>)           \u2013            </li> <li> <code>en</code>               (<code>NoneStr</code>)           \u2013            </li> <li> <code>fr</code>               (<code>NoneStr</code>)           \u2013            </li> <li> <code>it</code>               (<code>NoneStr</code>)           \u2013            </li> <li> <code>i18n</code>               (<code>str</code>)           \u2013            <p>Returns the first stored translation in the following order:</p> </li> </ul>"},{"location":"reference/hut_services/#hut_services.TranslationSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/#hut_services.TranslationSchema.de","title":"de  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>de: NoneStr = ''\n</code></pre>"},{"location":"reference/hut_services/#hut_services.TranslationSchema.en","title":"en  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>en: NoneStr = ''\n</code></pre>"},{"location":"reference/hut_services/#hut_services.TranslationSchema.fr","title":"fr  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fr: NoneStr = ''\n</code></pre>"},{"location":"reference/hut_services/#hut_services.TranslationSchema.it","title":"it  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>it: NoneStr = ''\n</code></pre>"},{"location":"reference/hut_services/#hut_services.TranslationSchema.i18n","title":"i18n  <code>property</code>","text":"<pre><code>i18n: str\n</code></pre> <p>Returns the first stored translation in the following order: <code>de</code>, <code>en</code>, <code>fr</code> or <code>it</code>.</p>"},{"location":"reference/hut_services/#hut_services.BaseService","title":"BaseService","text":"<pre><code>BaseService(\n    support_bbox: bool = False,\n    support_limit: bool = False,\n    support_offset: bool = False,\n    support_convert: bool = False,\n    support_booking: bool = False,\n)\n</code></pre> <p>Base service which is inheritated by other services.</p> Warning <p>Do not use this directly.</p> <p>The following attributes are used to define which paramets are supported by a service.</p> <p>Attributes:</p> <ul> <li> <code>support_bbox</code>               (<code>bool</code>)           \u2013            <p>Support for <code>bbox</code> as parameter.</p> </li> <li> <code>support_limit</code>               (<code>bool</code>)           \u2013            <p>Support for <code>limit</code> as parameter.</p> </li> <li> <code>support_offset</code>               (<code>bool</code>)           \u2013            <p>Support for <code>offset</code> as parameter.</p> </li> <li> <code>support_convert</code>               (<code>bool</code>)           \u2013            <p>Support for <code>convert</code> as parameter.</p> </li> </ul> <p>Examples:</p> <p>Custom service base in <code>BaseService</code>. For this the two schemas <code>MyHutSource</code> and <code>MyInfoHutConvert</code> need to be defined as well. <pre><code>from typing import Any\nfrom hut_services.core.schema.geo import BBox\nfrom hut_services import BaseService, HutSchema\n\n# TODO: define this somewhere:\nfrom my_service.schema import MyHutSource, MyInfoHutConvert\n\nclass MyService(BaseService[MyHutSource]):\n    def __init__(self, request_url: str = \"http://hut.info\"):\n        super().__init__(support_bbox=True,\n                         support_limit=True,\n                         support_offset=True,\n                         support_convert=True)\n        self.request_url = request_url\n\n    def get_huts_from_source(\n        self, bbox: BBox | None = None, limit: int = 1,\n        offset: int = 0, **kwargs: Any\n    ) -&gt; list[MyHutSource]:\n        src_huts = httpx.get(self.request_url)\n        return [MyHutSource(**h) for h in src_huts]\n\n    def convert(self, src: MyHutSource) -&gt; HutSchema:\n        return MyInfoHutConvert(source=src.source_data).get_hut()\n</code></pre></p> <p>Classes:</p> <ul> <li> <code>MethodNotImplementedError</code>           \u2013            <p>Method is not implemented exception.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>clear_all_cache</code>             \u2013              <p>Clears the cache of all services!</p> </li> <li> <code>get_huts_from_source</code>             \u2013              <p>Get all huts from source.</p> </li> <li> <code>convert</code>             \u2013              <p>Convert one hut from source to <code>HutSchema</code>.</p> </li> <li> <code>get_huts</code>             \u2013              <p>Get all huts form source and converts them.</p> </li> <li> <code>get_bookings</code>             \u2013              <p>Get bookings for a list of huts.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>support_bbox</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_limit</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_offset</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_convert</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_booking</code>               (<code>bool</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/#hut_services.BaseService-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/#hut_services.BaseService.support_bbox","title":"support_bbox  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_bbox: bool = support_bbox\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseService.support_limit","title":"support_limit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_limit: bool = support_limit\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseService.support_offset","title":"support_offset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_offset: bool = support_offset\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseService.support_convert","title":"support_convert  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_convert: bool = support_convert\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseService.support_booking","title":"support_booking  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_booking: bool = support_booking\n</code></pre>"},{"location":"reference/hut_services/#hut_services.BaseService-classes","title":"Classes","text":""},{"location":"reference/hut_services/#hut_services.BaseService.MethodNotImplementedError","title":"MethodNotImplementedError","text":"<pre><code>MethodNotImplementedError(obj: BaseService, method: str)\n</code></pre> <p>Method is not implemented exception.</p> <p>Parameters:</p>"},{"location":"reference/hut_services/#hut_services.BaseService.MethodNotImplementedError(obj)","title":"<code>obj</code>","text":"(<code>BaseService</code>)           \u2013            <p>Service object (e.g. <code>MyService</code>).</p>"},{"location":"reference/hut_services/#hut_services.BaseService.MethodNotImplementedError(method)","title":"<code>method</code>","text":"(<code>str</code>)           \u2013            <p>Method which is not implemented.</p>"},{"location":"reference/hut_services/#hut_services.BaseService.MethodNotImplementedError-functions","title":"Functions","text":""},{"location":"reference/hut_services/#hut_services.BaseService-functions","title":"Functions","text":""},{"location":"reference/hut_services/#hut_services.BaseService.clear_all_cache","title":"clear_all_cache  <code>classmethod</code>","text":"<pre><code>clear_all_cache() -&gt; None\n</code></pre> <p>Clears the cache of all services!</p>"},{"location":"reference/hut_services/#hut_services.BaseService.get_huts_from_source","title":"get_huts_from_source","text":"<pre><code>get_huts_from_source(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    **kwargs: Any,\n) -&gt; list[THutSourceSchema]\n</code></pre> <p>Get all huts from source.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[THutSourceSchema]</code>           \u2013            <p>Huts from source.</p> </li> </ul>"},{"location":"reference/hut_services/#hut_services.BaseService.get_huts_from_source(bbox)","title":"<code>bbox</code>","text":"(<code>BBox | None</code>, default:                   <code>None</code> )           \u2013            <p>Boundary box.</p>"},{"location":"reference/hut_services/#hut_services.BaseService.get_huts_from_source(limit)","title":"<code>limit</code>","text":"(<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Limit (how many entries to retrieve).</p>"},{"location":"reference/hut_services/#hut_services.BaseService.get_huts_from_source(offset)","title":"<code>offset</code>","text":"(<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Offset of the request.</p>"},{"location":"reference/hut_services/#hut_services.BaseService.convert","title":"convert","text":"<pre><code>convert(\n    src: Mapping | Any, include_photos: bool = True\n) -&gt; HutSchema\n</code></pre> <p>Convert one hut from source to <code>HutSchema</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>HutSchema</code>           \u2013            <p>Converted hut.</p> </li> </ul>"},{"location":"reference/hut_services/#hut_services.BaseService.convert(src)","title":"<code>src</code>","text":"(<code>Mapping | Any</code>)           \u2013            <p>Source schema.</p>"},{"location":"reference/hut_services/#hut_services.BaseService.convert(include_photos)","title":"<code>include_photos</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Include photos, some service need additonal requests to get the photos.</p>"},{"location":"reference/hut_services/#hut_services.BaseService.get_huts","title":"get_huts","text":"<pre><code>get_huts(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    include_photos: bool = True,\n    **kwargs: Any,\n) -&gt; list[HutSchema]\n</code></pre> <p>Get all huts form source and converts them. Calls <code>get_huts_from_source()</code> and <code>convert()</code>.</p> <p>Returns:</p> <ul> <li> <code>list[HutSchema]</code>           \u2013            <p>Converted huts from source.</p> </li> </ul>"},{"location":"reference/hut_services/#hut_services.BaseService.get_bookings","title":"get_bookings","text":"<pre><code>get_bookings(\n    date: datetime | date | Literal[\"now\"] | None = None,\n    days: int | None = None,\n    source_ids: list[int] | None = None,\n    lang: str = \"de\",\n) -&gt; dict[int, HutBookingsSchema]\n</code></pre> <p>Get bookings for a list of huts.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[int, HutBookingsSchema]</code>           \u2013            <p>A dictionary with the bookings (key = soruce id).</p> </li> </ul>"},{"location":"reference/hut_services/#hut_services.BaseService.get_bookings(date)","title":"<code>date</code>","text":"(<code>datetime | date | Literal['now'] | None</code>, default:                   <code>None</code> )           \u2013            <p>Start daye for the bookings</p>"},{"location":"reference/hut_services/#hut_services.BaseService.get_bookings(days)","title":"<code>days</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Duration in days</p>"},{"location":"reference/hut_services/#hut_services.BaseService.get_bookings(source_ids)","title":"<code>source_ids</code>","text":"(<code>list[int] | None</code>, default:                   <code>None</code> )           \u2013            <p>A list of ids to return (source id, not the hut id), if set to <code>None</code> all are returned</p>"},{"location":"reference/hut_services/#hut_services.GeocodeService","title":"GeocodeService","text":"<pre><code>GeocodeService()\n</code></pre> <p>Service to get Information from Nominatim.</p> Note <p>This is not used to get huts, rather to get additional info (like location) from huts.</p> <p>Classes:</p> <ul> <li> <code>MethodNotImplementedError</code>           \u2013            <p>Method is not implemented exception.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>clear_all_cache</code>             \u2013              <p>Clears the cache of all services!</p> </li> <li> <code>get_huts_from_source</code>             \u2013              <p>Get all huts from source.</p> </li> <li> <code>get_huts</code>             \u2013              <p>Get all huts form source and converts them.</p> </li> <li> <code>get_bookings</code>             \u2013              <p>Get bookings for a list of huts.</p> </li> <li> <code>get_location_by_name</code>             \u2013              <p>Get location (coordinates) from a name (uses 'https://nominatim.openstreetmap.org).</p> </li> <li> <code>get_elevations</code>             \u2013              <p>Get elevations from a list of locations (coordinates) (uses 'https://open-elevation.com).</p> </li> <li> <code>get_elevation</code>             \u2013              <p>Get elevation from a location (coordinates) (uses 'https://open-elevation.com).</p> </li> <li> <code>convert</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>support_bbox</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_limit</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_offset</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_convert</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_booking</code>               (<code>bool</code>)           \u2013            </li> <li> <code>loc_request_url</code>           \u2013            </li> <li> <code>ele_request_url</code>           \u2013            </li> <li> <code>httpx_client</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/#hut_services.GeocodeService-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/#hut_services.GeocodeService.support_bbox","title":"support_bbox  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_bbox: bool = support_bbox\n</code></pre>"},{"location":"reference/hut_services/#hut_services.GeocodeService.support_limit","title":"support_limit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_limit: bool = support_limit\n</code></pre>"},{"location":"reference/hut_services/#hut_services.GeocodeService.support_offset","title":"support_offset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_offset: bool = support_offset\n</code></pre>"},{"location":"reference/hut_services/#hut_services.GeocodeService.support_convert","title":"support_convert  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_convert: bool = support_convert\n</code></pre>"},{"location":"reference/hut_services/#hut_services.GeocodeService.support_booking","title":"support_booking  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_booking: bool = support_booking\n</code></pre>"},{"location":"reference/hut_services/#hut_services.GeocodeService.loc_request_url","title":"loc_request_url  <code>instance-attribute</code>","text":"<pre><code>loc_request_url = (\n    \"https://nominatim.openstreetmap.org/search\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.GeocodeService.ele_request_url","title":"ele_request_url  <code>instance-attribute</code>","text":"<pre><code>ele_request_url = (\n    \"https://api.open-elevation.com/api/v1/lookup\"\n)\n</code></pre>"},{"location":"reference/hut_services/#hut_services.GeocodeService.httpx_client","title":"httpx_client  <code>instance-attribute</code>","text":"<pre><code>httpx_client = Client()\n</code></pre>"},{"location":"reference/hut_services/#hut_services.GeocodeService-classes","title":"Classes","text":""},{"location":"reference/hut_services/#hut_services.GeocodeService.MethodNotImplementedError","title":"MethodNotImplementedError","text":"<pre><code>MethodNotImplementedError(obj: BaseService, method: str)\n</code></pre> <p>Method is not implemented exception.</p> <p>Parameters:</p>"},{"location":"reference/hut_services/#hut_services.GeocodeService.MethodNotImplementedError(obj)","title":"<code>obj</code>","text":"(<code>BaseService</code>)           \u2013            <p>Service object (e.g. <code>MyService</code>).</p>"},{"location":"reference/hut_services/#hut_services.GeocodeService.MethodNotImplementedError(method)","title":"<code>method</code>","text":"(<code>str</code>)           \u2013            <p>Method which is not implemented.</p>"},{"location":"reference/hut_services/#hut_services.GeocodeService.MethodNotImplementedError-functions","title":"Functions","text":""},{"location":"reference/hut_services/#hut_services.GeocodeService-functions","title":"Functions","text":""},{"location":"reference/hut_services/#hut_services.GeocodeService.clear_all_cache","title":"clear_all_cache  <code>classmethod</code>","text":"<pre><code>clear_all_cache() -&gt; None\n</code></pre> <p>Clears the cache of all services!</p>"},{"location":"reference/hut_services/#hut_services.GeocodeService.get_huts_from_source","title":"get_huts_from_source","text":"<pre><code>get_huts_from_source(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    **kwargs: Any,\n) -&gt; list[THutSourceSchema]\n</code></pre> <p>Get all huts from source.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[THutSourceSchema]</code>           \u2013            <p>Huts from source.</p> </li> </ul>"},{"location":"reference/hut_services/#hut_services.GeocodeService.get_huts_from_source(bbox)","title":"<code>bbox</code>","text":"(<code>BBox | None</code>, default:                   <code>None</code> )           \u2013            <p>Boundary box.</p>"},{"location":"reference/hut_services/#hut_services.GeocodeService.get_huts_from_source(limit)","title":"<code>limit</code>","text":"(<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Limit (how many entries to retrieve).</p>"},{"location":"reference/hut_services/#hut_services.GeocodeService.get_huts_from_source(offset)","title":"<code>offset</code>","text":"(<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Offset of the request.</p>"},{"location":"reference/hut_services/#hut_services.GeocodeService.get_huts","title":"get_huts","text":"<pre><code>get_huts(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    include_photos: bool = True,\n    **kwargs: Any,\n) -&gt; list[HutSchema]\n</code></pre> <p>Get all huts form source and converts them. Calls <code>get_huts_from_source()</code> and <code>convert()</code>.</p> <p>Returns:</p> <ul> <li> <code>list[HutSchema]</code>           \u2013            <p>Converted huts from source.</p> </li> </ul>"},{"location":"reference/hut_services/#hut_services.GeocodeService.get_bookings","title":"get_bookings","text":"<pre><code>get_bookings(\n    date: datetime | date | Literal[\"now\"] | None = None,\n    days: int | None = None,\n    source_ids: list[int] | None = None,\n    lang: str = \"de\",\n) -&gt; dict[int, HutBookingsSchema]\n</code></pre> <p>Get bookings for a list of huts.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[int, HutBookingsSchema]</code>           \u2013            <p>A dictionary with the bookings (key = soruce id).</p> </li> </ul>"},{"location":"reference/hut_services/#hut_services.GeocodeService.get_bookings(date)","title":"<code>date</code>","text":"(<code>datetime | date | Literal['now'] | None</code>, default:                   <code>None</code> )           \u2013            <p>Start daye for the bookings</p>"},{"location":"reference/hut_services/#hut_services.GeocodeService.get_bookings(days)","title":"<code>days</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Duration in days</p>"},{"location":"reference/hut_services/#hut_services.GeocodeService.get_bookings(source_ids)","title":"<code>source_ids</code>","text":"(<code>list[int] | None</code>, default:                   <code>None</code> )           \u2013            <p>A list of ids to return (source id, not the hut id), if set to <code>None</code> all are returned</p>"},{"location":"reference/hut_services/#hut_services.GeocodeService.get_location_by_name","title":"get_location_by_name","text":"<pre><code>get_location_by_name(\n    name: str, client: Client | None = None\n) -&gt; LocationEleSchema | None\n</code></pre> <p>Get location (coordinates) from a name (uses 'https://nominatim.openstreetmap.org).</p>"},{"location":"reference/hut_services/#hut_services.GeocodeService.get_elevations","title":"get_elevations","text":"<pre><code>get_elevations(\n    locations: Sequence[LocationSchema | LocationEleSchema],\n    client: Client | None = None,\n) -&gt; list[LocationEleSchema]\n</code></pre> <p>Get elevations from a list of locations (coordinates) (uses 'https://open-elevation.com).</p>"},{"location":"reference/hut_services/#hut_services.GeocodeService.get_elevation","title":"get_elevation","text":"<pre><code>get_elevation(\n    location: LocationSchema | LocationEleSchema,\n    client: Client | None = None,\n) -&gt; LocationEleSchema\n</code></pre> <p>Get elevation from a location (coordinates) (uses 'https://open-elevation.com).</p>"},{"location":"reference/hut_services/#hut_services.GeocodeService.convert","title":"convert","text":"<pre><code>convert(\n    src: Mapping | Any, include_photos: bool = True\n) -&gt; HutSchema\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OsmService","title":"OsmService","text":"<pre><code>OsmService(\n    request_url: str = \"https://overpass.osm.ch/api/\",\n)\n</code></pre> <p>Service to get huts from Open Street Map with overpass api.</p> Note <p>The methods are descriebed in <code>BaseService</code>.</p> <p>Classes:</p> <ul> <li> <code>MethodNotImplementedError</code>           \u2013            <p>Method is not implemented exception.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>clear_all_cache</code>             \u2013              <p>Clears the cache of all services!</p> </li> <li> <code>get_huts</code>             \u2013              <p>Get all huts form source and converts them.</p> </li> <li> <code>get_bookings</code>             \u2013              <p>Get bookings for a list of huts.</p> </li> <li> <code>get_huts_from_source</code>             \u2013              </li> <li> <code>convert</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>support_bbox</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_limit</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_offset</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_convert</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_booking</code>               (<code>bool</code>)           \u2013            </li> <li> <code>request_url</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/#hut_services.OsmService-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/#hut_services.OsmService.support_bbox","title":"support_bbox  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_bbox: bool = support_bbox\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OsmService.support_limit","title":"support_limit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_limit: bool = support_limit\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OsmService.support_offset","title":"support_offset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_offset: bool = support_offset\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OsmService.support_convert","title":"support_convert  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_convert: bool = support_convert\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OsmService.support_booking","title":"support_booking  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_booking: bool = support_booking\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OsmService.request_url","title":"request_url  <code>instance-attribute</code>","text":"<pre><code>request_url = request_url\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OsmService-classes","title":"Classes","text":""},{"location":"reference/hut_services/#hut_services.OsmService.MethodNotImplementedError","title":"MethodNotImplementedError","text":"<pre><code>MethodNotImplementedError(obj: BaseService, method: str)\n</code></pre> <p>Method is not implemented exception.</p> <p>Parameters:</p>"},{"location":"reference/hut_services/#hut_services.OsmService.MethodNotImplementedError(obj)","title":"<code>obj</code>","text":"(<code>BaseService</code>)           \u2013            <p>Service object (e.g. <code>MyService</code>).</p>"},{"location":"reference/hut_services/#hut_services.OsmService.MethodNotImplementedError(method)","title":"<code>method</code>","text":"(<code>str</code>)           \u2013            <p>Method which is not implemented.</p>"},{"location":"reference/hut_services/#hut_services.OsmService.MethodNotImplementedError-functions","title":"Functions","text":""},{"location":"reference/hut_services/#hut_services.OsmService-functions","title":"Functions","text":""},{"location":"reference/hut_services/#hut_services.OsmService.clear_all_cache","title":"clear_all_cache  <code>classmethod</code>","text":"<pre><code>clear_all_cache() -&gt; None\n</code></pre> <p>Clears the cache of all services!</p>"},{"location":"reference/hut_services/#hut_services.OsmService.get_huts","title":"get_huts","text":"<pre><code>get_huts(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    include_photos: bool = True,\n    **kwargs: Any,\n) -&gt; list[HutSchema]\n</code></pre> <p>Get all huts form source and converts them. Calls <code>get_huts_from_source()</code> and <code>convert()</code>.</p> <p>Returns:</p> <ul> <li> <code>list[HutSchema]</code>           \u2013            <p>Converted huts from source.</p> </li> </ul>"},{"location":"reference/hut_services/#hut_services.OsmService.get_bookings","title":"get_bookings","text":"<pre><code>get_bookings(\n    date: datetime | date | Literal[\"now\"] | None = None,\n    days: int | None = None,\n    source_ids: list[int] | None = None,\n    lang: str = \"de\",\n) -&gt; dict[int, HutBookingsSchema]\n</code></pre> <p>Get bookings for a list of huts.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[int, HutBookingsSchema]</code>           \u2013            <p>A dictionary with the bookings (key = soruce id).</p> </li> </ul>"},{"location":"reference/hut_services/#hut_services.OsmService.get_bookings(date)","title":"<code>date</code>","text":"(<code>datetime | date | Literal['now'] | None</code>, default:                   <code>None</code> )           \u2013            <p>Start daye for the bookings</p>"},{"location":"reference/hut_services/#hut_services.OsmService.get_bookings(days)","title":"<code>days</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Duration in days</p>"},{"location":"reference/hut_services/#hut_services.OsmService.get_bookings(source_ids)","title":"<code>source_ids</code>","text":"(<code>list[int] | None</code>, default:                   <code>None</code> )           \u2013            <p>A list of ids to return (source id, not the hut id), if set to <code>None</code> all are returned</p>"},{"location":"reference/hut_services/#hut_services.OsmService.get_huts_from_source","title":"get_huts_from_source","text":"<pre><code>get_huts_from_source(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    **kwargs: dict,\n) -&gt; list[OsmHutSource]\n</code></pre>"},{"location":"reference/hut_services/#hut_services.OsmService.convert","title":"convert","text":"<pre><code>convert(\n    src: Mapping | Any, include_photos: bool = True\n) -&gt; HutSchema\n</code></pre>"},{"location":"reference/hut_services/#hut_services.RefugesInfoService","title":"RefugesInfoService","text":"<pre><code>RefugesInfoService(\n    request_url: str = \"https://www.refuges.info/api\",\n)\n</code></pre> <p>Service to get huts from refuges.info with its api.</p> Note <p>The methods are descriebed in <code>BaseService</code>.</p> <p>Classes:</p> <ul> <li> <code>MethodNotImplementedError</code>           \u2013            <p>Method is not implemented exception.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>clear_all_cache</code>             \u2013              <p>Clears the cache of all services!</p> </li> <li> <code>get_huts</code>             \u2013              <p>Get all huts form source and converts them.</p> </li> <li> <code>get_bookings</code>             \u2013              <p>Get bookings for a list of huts.</p> </li> <li> <code>get_huts_from_source</code>             \u2013              </li> <li> <code>convert</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>support_bbox</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_limit</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_offset</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_convert</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_booking</code>               (<code>bool</code>)           \u2013            </li> <li> <code>request_url</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/#hut_services.RefugesInfoService-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/#hut_services.RefugesInfoService.support_bbox","title":"support_bbox  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_bbox: bool = support_bbox\n</code></pre>"},{"location":"reference/hut_services/#hut_services.RefugesInfoService.support_limit","title":"support_limit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_limit: bool = support_limit\n</code></pre>"},{"location":"reference/hut_services/#hut_services.RefugesInfoService.support_offset","title":"support_offset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_offset: bool = support_offset\n</code></pre>"},{"location":"reference/hut_services/#hut_services.RefugesInfoService.support_convert","title":"support_convert  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_convert: bool = support_convert\n</code></pre>"},{"location":"reference/hut_services/#hut_services.RefugesInfoService.support_booking","title":"support_booking  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_booking: bool = support_booking\n</code></pre>"},{"location":"reference/hut_services/#hut_services.RefugesInfoService.request_url","title":"request_url  <code>instance-attribute</code>","text":"<pre><code>request_url = request_url\n</code></pre>"},{"location":"reference/hut_services/#hut_services.RefugesInfoService-classes","title":"Classes","text":""},{"location":"reference/hut_services/#hut_services.RefugesInfoService.MethodNotImplementedError","title":"MethodNotImplementedError","text":"<pre><code>MethodNotImplementedError(obj: BaseService, method: str)\n</code></pre> <p>Method is not implemented exception.</p> <p>Parameters:</p>"},{"location":"reference/hut_services/#hut_services.RefugesInfoService.MethodNotImplementedError(obj)","title":"<code>obj</code>","text":"(<code>BaseService</code>)           \u2013            <p>Service object (e.g. <code>MyService</code>).</p>"},{"location":"reference/hut_services/#hut_services.RefugesInfoService.MethodNotImplementedError(method)","title":"<code>method</code>","text":"(<code>str</code>)           \u2013            <p>Method which is not implemented.</p>"},{"location":"reference/hut_services/#hut_services.RefugesInfoService.MethodNotImplementedError-functions","title":"Functions","text":""},{"location":"reference/hut_services/#hut_services.RefugesInfoService-functions","title":"Functions","text":""},{"location":"reference/hut_services/#hut_services.RefugesInfoService.clear_all_cache","title":"clear_all_cache  <code>classmethod</code>","text":"<pre><code>clear_all_cache() -&gt; None\n</code></pre> <p>Clears the cache of all services!</p>"},{"location":"reference/hut_services/#hut_services.RefugesInfoService.get_huts","title":"get_huts","text":"<pre><code>get_huts(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    include_photos: bool = True,\n    **kwargs: Any,\n) -&gt; list[HutSchema]\n</code></pre> <p>Get all huts form source and converts them. Calls <code>get_huts_from_source()</code> and <code>convert()</code>.</p> <p>Returns:</p> <ul> <li> <code>list[HutSchema]</code>           \u2013            <p>Converted huts from source.</p> </li> </ul>"},{"location":"reference/hut_services/#hut_services.RefugesInfoService.get_bookings","title":"get_bookings","text":"<pre><code>get_bookings(\n    date: datetime | date | Literal[\"now\"] | None = None,\n    days: int | None = None,\n    source_ids: list[int] | None = None,\n    lang: str = \"de\",\n) -&gt; dict[int, HutBookingsSchema]\n</code></pre> <p>Get bookings for a list of huts.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[int, HutBookingsSchema]</code>           \u2013            <p>A dictionary with the bookings (key = soruce id).</p> </li> </ul>"},{"location":"reference/hut_services/#hut_services.RefugesInfoService.get_bookings(date)","title":"<code>date</code>","text":"(<code>datetime | date | Literal['now'] | None</code>, default:                   <code>None</code> )           \u2013            <p>Start daye for the bookings</p>"},{"location":"reference/hut_services/#hut_services.RefugesInfoService.get_bookings(days)","title":"<code>days</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Duration in days</p>"},{"location":"reference/hut_services/#hut_services.RefugesInfoService.get_bookings(source_ids)","title":"<code>source_ids</code>","text":"(<code>list[int] | None</code>, default:                   <code>None</code> )           \u2013            <p>A list of ids to return (source id, not the hut id), if set to <code>None</code> all are returned</p>"},{"location":"reference/hut_services/#hut_services.RefugesInfoService.get_huts_from_source","title":"get_huts_from_source","text":"<pre><code>get_huts_from_source(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    **kwargs: Any,\n) -&gt; list[RefugesInfoHutSource]\n</code></pre>"},{"location":"reference/hut_services/#hut_services.RefugesInfoService.convert","title":"convert","text":"<pre><code>convert(\n    src: Mapping | Any, include_photos: bool = True\n) -&gt; HutSchema\n</code></pre>"},{"location":"reference/hut_services/#hut_services-functions","title":"Functions","text":""},{"location":"reference/hut_services/#hut_services.file_cache","title":"file_cache","text":"<pre><code>file_cache(\n    func: None | Callable = None,\n    ignore: Sequence = [],\n    expire_in_seconds: int = default_seconds,\n    forever: bool = False,\n) -&gt; Any\n</code></pre> <p>Chaches function, if 'forever' is True, cache will never expire (and 'expire_in_seconds' will be ignored).</p>"},{"location":"reference/hut_services/services/","title":"services","text":""},{"location":"reference/hut_services/services/#hut_services.services","title":"services","text":"<p>Attributes:</p> <ul> <li> <code>SERVICES</code>               (<code>dict[str, BaseService[HutSourceSchema]]</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/services/#hut_services.services-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/services/#hut_services.services.SERVICES","title":"SERVICES  <code>module-attribute</code>","text":"<pre><code>SERVICES: dict[str, BaseService[HutSourceSchema]] = {\n    \"osm\": OsmService(),\n    \"refuges\": RefugesInfoService(),\n    \"wikidata\": WikidataService(),\n}\n</code></pre>"},{"location":"reference/hut_services/services/#hut_services.services-classes","title":"Classes","text":""},{"location":"reference/hut_services/core/","title":"core","text":""},{"location":"reference/hut_services/core/#hut_services.core","title":"core","text":"<p>Modules:</p> <ul> <li> <code>cache</code>           \u2013            </li> <li> <code>guess</code>           \u2013            </li> <li> <code>schema</code>           \u2013            </li> <li> <code>service</code>           \u2013            </li> <li> <code>utils</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/core/cache/","title":"cache","text":""},{"location":"reference/hut_services/core/cache/#hut_services.core.cache","title":"cache","text":"<p>Functions:</p> <ul> <li> <code>file_cache</code>             \u2013              <p>Chaches function, if 'forever' is True, cache will never expire (and 'expire_in_seconds' will be ignored).</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>clear_file_cache</code>           \u2013            <p>Cleares cache.</p> </li> </ul>"},{"location":"reference/hut_services/core/cache/#hut_services.core.cache-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/cache/#hut_services.core.cache.cachedir","title":"cachedir  <code>module-attribute</code>","text":"<pre><code>cachedir = get(\n    \"HUT_SERVICE_CACHE_DIR\",\n    join(gettempdir(), \"py_file_cache\"),\n)\n</code></pre>"},{"location":"reference/hut_services/core/cache/#hut_services.core.cache.default_seconds","title":"default_seconds  <code>module-attribute</code>","text":"<pre><code>default_seconds = int(\n    get(\"HUT_SERVICE_EXPIRE_SECONDS\", 3600 * 24 * 2)\n)\n</code></pre>"},{"location":"reference/hut_services/core/cache/#hut_services.core.cache.forever_seconds","title":"forever_seconds  <code>module-attribute</code>","text":"<pre><code>forever_seconds = int(3600 * 24 * 365 * 10)\n</code></pre>"},{"location":"reference/hut_services/core/cache/#hut_services.core.cache.T","title":"T  <code>module-attribute</code>","text":"<pre><code>T = TypeVar('T')\n</code></pre>"},{"location":"reference/hut_services/core/cache/#hut_services.core.cache.clear_file_cache","title":"clear_file_cache  <code>module-attribute</code>","text":"<pre><code>clear_file_cache = clear\n</code></pre> <p>Cleares cache.</p>"},{"location":"reference/hut_services/core/cache/#hut_services.core.cache-functions","title":"Functions","text":""},{"location":"reference/hut_services/core/cache/#hut_services.core.cache.file_cache","title":"file_cache","text":"<pre><code>file_cache(\n    func: None | Callable = None,\n    ignore: Sequence = [],\n    expire_in_seconds: int = default_seconds,\n    forever: bool = False,\n) -&gt; Any\n</code></pre> <p>Chaches function, if 'forever' is True, cache will never expire (and 'expire_in_seconds' will be ignored).</p>"},{"location":"reference/hut_services/core/guess/","title":"guess","text":""},{"location":"reference/hut_services/core/guess/#hut_services.core.guess","title":"guess","text":"<p>Functions:</p> <ul> <li> <code>guess_hut_type</code>             \u2013              <p>Guess hut type based on some input parameters.</p> </li> <li> <code>guess_slug_name</code>             \u2013              </li> </ul>"},{"location":"reference/hut_services/core/guess/#hut_services.core.guess-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/guess/#hut_services.core.guess.HUT_NAMES","title":"HUT_NAMES  <code>module-attribute</code>","text":"<pre><code>HUT_NAMES = [\n    \"huette\",\n    \"r[ie]fug[ei]\",\n    \"h[i\u00fc]tt[ae]\",\n    \"camona\",\n    \"capanna\",\n    \"cabane\",\n    \"huisli\",\n]\n</code></pre>"},{"location":"reference/hut_services/core/guess/#hut_services.core.guess.BIVI_NAMES","title":"BIVI_NAMES  <code>module-attribute</code>","text":"<pre><code>BIVI_NAMES = ['biwak', 'bivouac', 'bivacco']\n</code></pre>"},{"location":"reference/hut_services/core/guess/#hut_services.core.guess.BASIC_HOTEL_NAMES","title":"BASIC_HOTEL_NAMES  <code>module-attribute</code>","text":"<pre><code>BASIC_HOTEL_NAMES = [\n    \"berghotel\",\n    \"berggasthaus\",\n    \"auberge\",\n    \"gasthaus\",\n    \"berghaus\",\n]\n</code></pre>"},{"location":"reference/hut_services/core/guess/#hut_services.core.guess.CAMPING_NAMES","title":"CAMPING_NAMES  <code>module-attribute</code>","text":"<pre><code>CAMPING_NAMES = ['camping', 'zelt']\n</code></pre>"},{"location":"reference/hut_services/core/guess/#hut_services.core.guess.HOTEL_NAMES","title":"HOTEL_NAMES  <code>module-attribute</code>","text":"<pre><code>HOTEL_NAMES = ['h[o\u00f4]tel']\n</code></pre>"},{"location":"reference/hut_services/core/guess/#hut_services.core.guess.HOSTEL_NAMES","title":"HOSTEL_NAMES  <code>module-attribute</code>","text":"<pre><code>HOSTEL_NAMES = ['hostel', 'jugendherberg']\n</code></pre>"},{"location":"reference/hut_services/core/guess/#hut_services.core.guess.RESTAURANT_NAMES","title":"RESTAURANT_NAMES  <code>module-attribute</code>","text":"<pre><code>RESTAURANT_NAMES = ['restaurant', 'ristorante', 'beizli']\n</code></pre>"},{"location":"reference/hut_services/core/guess/#hut_services.core.guess-classes","title":"Classes","text":""},{"location":"reference/hut_services/core/guess/#hut_services.core.guess-functions","title":"Functions","text":""},{"location":"reference/hut_services/core/guess/#hut_services.core.guess.guess_hut_type","title":"guess_hut_type","text":"<pre><code>guess_hut_type(\n    name: str = \"\",\n    default: HutTypeEnum = unknown,\n    capacity: CapacitySchema | None = None,\n    elevation: float | None = 1500,\n    operator: Literal[\"sac\", \"dav\"] | None = None,\n    osm_tag: str | None = \"\",\n    missing_walls: int | None | str = 0,\n    open_monthly: OpenMonthlySchema | None = None,\n) -&gt; HutTypeSchema\n</code></pre> <p>Guess hut type based on some input parameters.</p> <p>Parameters:</p>"},{"location":"reference/hut_services/core/guess/#hut_services.core.guess.guess_hut_type(name)","title":"<code>name</code>","text":"(<code>str</code>, default:                   <code>''</code> )           \u2013            <p>hut name</p>"},{"location":"reference/hut_services/core/guess/#hut_services.core.guess.guess_hut_type(default)","title":"<code>default</code>","text":"(<code>HutTypeEnum</code>, default:                   <code>unknown</code> )           \u2013            <p>default type if nothing else fits</p>"},{"location":"reference/hut_services/core/guess/#hut_services.core.guess.guess_hut_type(capacity)","title":"<code>capacity</code>","text":"(<code>CapacitySchema | None</code>, default:                   <code>None</code> )           \u2013            <p>capacity for a open and closed hut</p>"},{"location":"reference/hut_services/core/guess/#hut_services.core.guess.guess_hut_type(operator)","title":"<code>operator</code>","text":"(<code>Literal['sac', 'dav'] | None</code>, default:                   <code>None</code> )           \u2013            <p>who is operating the hut</p>"},{"location":"reference/hut_services/core/guess/#hut_services.core.guess.guess_hut_type(osm_tag)","title":"<code>osm_tag</code>","text":"(<code>str | None</code>, default:                   <code>''</code> )           \u2013            <p>osm toursm tag</p>"},{"location":"reference/hut_services/core/guess/#hut_services.core.guess.guess_hut_type(missing_walls)","title":"<code>missing_walls</code>","text":"(<code>int | None | str</code>, default:                   <code>0</code> )           \u2013            <p>missing_walls value from refuges.info</p>"},{"location":"reference/hut_services/core/guess/#hut_services.core.guess.guess_hut_type(open_monthly)","title":"<code>open_monthly</code>","text":"(<code>OpenMonthlySchema | None</code>, default:                   <code>None</code> )           \u2013            <p>list which month it is open</p>"},{"location":"reference/hut_services/core/guess/#hut_services.core.guess.guess_slug_name","title":"guess_slug_name","text":"<pre><code>guess_slug_name(\n    hut_name: str, max_length: int = 25, min_length: int = 4\n) -&gt; str\n</code></pre>"},{"location":"reference/hut_services/core/schema/","title":"schema","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema","title":"schema","text":"<p>Modules:</p> <ul> <li> <code>geo</code>           \u2013            </li> <li> <code>locale</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>BookingSchema</code>           \u2013            </li> <li> <code>HutBookingsSchema</code>           \u2013            </li> <li> <code>OccupancyStatusEnum</code>           \u2013            <p>Enum with with occuptation status.</p> </li> <li> <code>PlacesSchema</code>           \u2013            </li> <li> <code>ReservationStatusEnum</code>           \u2013            <p>Enum with reservation status.</p> </li> <li> <code>ContactSchema</code>           \u2013            <p>Schema for a contact.</p> </li> <li> <code>HutSchema</code>           \u2013            <p>Hut schema.</p> </li> <li> <code>BaseHutConverterSchema</code>           \u2013            <p>Base class used for a converter schema.</p> </li> <li> <code>BaseHutSourceSchema</code>           \u2013            <p>Base class for a hut source.</p> </li> <li> <code>SourceDataSchema</code>           \u2013            <p>SourceData schema</p> </li> <li> <code>SourcePropertiesSchema</code>           \u2013            <p>Properties saved together with the source data.</p> </li> <li> <code>AnswerEnum</code>           \u2013            <p>Anser enum.</p> </li> <li> <code>CapacitySchema</code>           \u2013            <p>Hut capacities.</p> </li> <li> <code>HutTypeEnum</code>           \u2013            <p>Enum with hut types.</p> </li> <li> <code>HutTypeSchema</code>           \u2013            <p>Hut type schema.</p> </li> <li> <code>OpenMonthlySchema</code>           \u2013            <p>Shows for every month if it is usally, open, partially open or closed.</p> </li> <li> <code>OwnerSchema</code>           \u2013            <p>Schema for the owner.</p> </li> <li> <code>PhotoSchemaOld</code>           \u2013            <p>Photo schema.</p> </li> <li> <code>AuthorSchema</code>           \u2013            <p>Author information.</p> </li> <li> <code>LicenseSchema</code>           \u2013            <p>License information.</p> </li> <li> <code>SourceSchema</code>           \u2013            <p>Source information.</p> </li> <li> <code>PhotoSchema</code>           \u2013            <p>Schema for a hut photo.</p> </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema-classes","title":"Classes","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BookingSchema","title":"BookingSchema","text":"<p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>date</code>               (<code>date</code>)           \u2013            </li> <li> <code>reservation_status</code>               (<code>ReservationStatusEnum</code>)           \u2013            </li> <li> <code>unattended</code>               (<code>bool</code>)           \u2013            </li> <li> <code>places</code>               (<code>PlacesSchema</code>)           \u2013            </li> <li> <code>link</code>               (<code>str | None</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BookingSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BookingSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BookingSchema.date","title":"date  <code>instance-attribute</code>","text":"<pre><code>date: date\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BookingSchema.reservation_status","title":"reservation_status  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reservation_status: ReservationStatusEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BookingSchema.unattended","title":"unattended  <code>instance-attribute</code>","text":"<pre><code>unattended: bool\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BookingSchema.places","title":"places  <code>instance-attribute</code>","text":"<pre><code>places: PlacesSchema\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BookingSchema.link","title":"link  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>link: str | None = None\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutBookingsSchema","title":"HutBookingsSchema","text":"<p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>source_id</code>               (<code>int</code>)           \u2013            </li> <li> <code>start_date</code>               (<code>date</code>)           \u2013            </li> <li> <code>days</code>               (<code>int</code>)           \u2013            </li> <li> <code>link</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>bookings</code>               (<code>list[BookingSchema]</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutBookingsSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutBookingsSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutBookingsSchema.source_id","title":"source_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_id: int = Field(\n    ...,\n    description=\"ID of the booking provider, e.g. alpsonline.org.\",\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutBookingsSchema.start_date","title":"start_date  <code>instance-attribute</code>","text":"<pre><code>start_date: date\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutBookingsSchema.days","title":"days  <code>instance-attribute</code>","text":"<pre><code>days: int\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutBookingsSchema.link","title":"link  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>link: str | None = None\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutBookingsSchema.bookings","title":"bookings  <code>instance-attribute</code>","text":"<pre><code>bookings: list[BookingSchema]\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OccupancyStatusEnum","title":"OccupancyStatusEnum","text":"<p>Enum with with occuptation status.</p> <p>Attributes:</p> <ul> <li> <code>unknown</code>           \u2013            </li> <li> <code>empty</code>           \u2013            </li> <li> <code>low</code>           \u2013            </li> <li> <code>medium</code>           \u2013            </li> <li> <code>high</code>           \u2013            </li> <li> <code>full</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OccupancyStatusEnum-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OccupancyStatusEnum.unknown","title":"unknown  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unknown = 'unknown'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OccupancyStatusEnum.empty","title":"empty  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>empty = 'empty'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OccupancyStatusEnum.low","title":"low  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>low = 'low'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OccupancyStatusEnum.medium","title":"medium  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>medium = 'medium'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OccupancyStatusEnum.high","title":"high  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>high = 'high'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OccupancyStatusEnum.full","title":"full  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>full = 'full'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PlacesSchema","title":"PlacesSchema","text":"<p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>free</code>               (<code>int</code>)           \u2013            </li> <li> <code>total</code>               (<code>int</code>)           \u2013            </li> <li> <code>occupancy_percent</code>               (<code>float</code>)           \u2013            </li> <li> <code>occupancy_steps</code>               (<code>float</code>)           \u2013            </li> <li> <code>occupancy_status</code>               (<code>OccupancyStatusEnum</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PlacesSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PlacesSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PlacesSchema.free","title":"free  <code>instance-attribute</code>","text":"<pre><code>free: int\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PlacesSchema.total","title":"total  <code>instance-attribute</code>","text":"<pre><code>total: int\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PlacesSchema.occupancy_percent","title":"occupancy_percent  <code>property</code>","text":"<pre><code>occupancy_percent: float\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PlacesSchema.occupancy_steps","title":"occupancy_steps  <code>property</code>","text":"<pre><code>occupancy_steps: float\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PlacesSchema.occupancy_status","title":"occupancy_status  <code>property</code>","text":"<pre><code>occupancy_status: OccupancyStatusEnum\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ReservationStatusEnum","title":"ReservationStatusEnum","text":"<p>Enum with reservation status.</p> <p>Attributes:</p> <ul> <li> <code>unknown</code>           \u2013            </li> <li> <code>possible</code>           \u2013            </li> <li> <code>not_possible</code>           \u2013            </li> <li> <code>not_online</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ReservationStatusEnum-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ReservationStatusEnum.unknown","title":"unknown  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unknown = 'unknown'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ReservationStatusEnum.possible","title":"possible  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>possible = 'possible'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ReservationStatusEnum.not_possible","title":"not_possible  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>not_possible = 'not_possible'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ReservationStatusEnum.not_online","title":"not_online  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>not_online = 'not_online'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ContactSchema","title":"ContactSchema","text":"<p>Schema for a contact.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Contact name (persion or organization), can also be empty.</p> </li> <li> <code>email</code>               (<code>str</code>)           \u2013            <p>E-mail address.</p> </li> <li> <code>phone</code>               (<code>str</code>)           \u2013            <p>Phone number.</p> </li> <li> <code>mobile</code>               (<code>str</code>)           \u2013            <p>Mobule phone number.</p> </li> <li> <code>function</code>               (<code>str</code>)           \u2013            <p>Function, e.g. hut warden.</p> </li> <li> <code>url</code>               (<code>str</code>)           \u2013            <p>Additional url for this contact (not the hut website).</p> </li> <li> <code>address</code>               (<code>str</code>)           \u2013            <p>Address (street, city).</p> </li> <li> <code>note</code>               (<code>TranslationSchema</code>)           \u2013            <p>Additional note/information.</p> </li> <li> <code>is_active</code>               (<code>bool</code>)           \u2013            <p>Contact is active.</p> </li> <li> <code>is_public</code>               (<code>bool</code>)           \u2013            <p>Show contact public.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>extract_phone_numbers</code>             \u2013              <p>Extracts phone numbers from a string and returns them formatted</p> </li> <li> <code>number_to_phone_or_mobile</code>             \u2013              <p>Given a phone number it returns it eihter as <code>phone</code> or <code>mobile</code> number.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> <li> <code>email</code>               (<code>str</code>)           \u2013            </li> <li> <code>phone</code>               (<code>str</code>)           \u2013            </li> <li> <code>mobile</code>               (<code>str</code>)           \u2013            </li> <li> <code>function</code>               (<code>str</code>)           \u2013            </li> <li> <code>url</code>               (<code>str</code>)           \u2013            </li> <li> <code>address</code>               (<code>str</code>)           \u2013            </li> <li> <code>note</code>               (<code>TranslationSchema</code>)           \u2013            </li> <li> <code>is_active</code>               (<code>bool</code>)           \u2013            </li> <li> <code>is_public</code>               (<code>bool</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ContactSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ContactSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ContactSchema.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = Field('', max_length=70)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ContactSchema.email","title":"email  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>email: str = Field('', max_length=70)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ContactSchema.phone","title":"phone  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>phone: str = Field('', max_length=30)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ContactSchema.mobile","title":"mobile  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>mobile: str = Field('', max_length=30)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ContactSchema.function","title":"function  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>function: str = Field('', max_length=20)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ContactSchema.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url: str = Field('', max_length=200)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ContactSchema.address","title":"address  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>address: str = Field('', max_length=200)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ContactSchema.note","title":"note  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>note: TranslationSchema = Field(\n    default_factory=TranslationSchema\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ContactSchema.is_active","title":"is_active  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_active: bool = True\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ContactSchema.is_public","title":"is_public  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_public: bool = False\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ContactSchema-functions","title":"Functions","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ContactSchema.extract_phone_numbers","title":"extract_phone_numbers  <code>classmethod</code>","text":"<pre><code>extract_phone_numbers(\n    numbers_string: str, region: str | None\n) -&gt; list[str]\n</code></pre> <p>Extracts phone numbers from a string and returns them formatted with international code. Uses the <code>phonenumbers</code> package.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[str]</code>           \u2013            <p>A list with formatted phone numbers.</p> </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ContactSchema.extract_phone_numbers(numbers_string)","title":"<code>numbers_string</code>","text":"(<code>str</code>)           \u2013            <p>A string with phone numbers in it.</p>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ContactSchema.extract_phone_numbers(region)","title":"<code>region</code>","text":"(<code>str | None</code>)           \u2013            <p>Country code.</p>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ContactSchema.number_to_phone_or_mobile","title":"number_to_phone_or_mobile  <code>classmethod</code>","text":"<pre><code>number_to_phone_or_mobile(\n    numbers: str | Sequence[str],\n    region: str | None,\n    formatted: bool = False,\n) -&gt; PhoneMobile\n</code></pre> <p>Given a phone number it returns it eihter as <code>phone</code> or <code>mobile</code> number. Uses the <code>phonenumbers</code> package.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>PhoneMobile</code>           \u2013            <p>Tuple with <code>phone</code> and <code>mobile</code> number (<code>(phone, mobile)</code>).</p> </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ContactSchema.number_to_phone_or_mobile(numbers)","title":"<code>numbers</code>","text":"(<code>str | Sequence[str]</code>)           \u2013            <p>List or string of phone numbers, they are extraced and the two assigned to phone and mobile.</p>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ContactSchema.number_to_phone_or_mobile(region)","title":"<code>region</code>","text":"(<code>str | None</code>)           \u2013            <p>Country code.</p>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.ContactSchema.number_to_phone_or_mobile(formatted)","title":"<code>formatted</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Phone list is alreaad formatted</p>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema","title":"HutSchema","text":"<p>Hut schema.</p> <p>Attributes:</p> <ul> <li> <code>slug</code>               (<code>str</code>)           \u2013            <p>Hut slug, if empty it is replaced by slugified <code>name</code>.</p> </li> <li> <code>name</code>               (<code>TranslationSchema</code>)           \u2013            <p>Original hut name.</p> </li> <li> <code>location</code>               (<code>LocationEleSchema</code>)           \u2013            <p>Location of the hut.</p> </li> <li> <code>description</code>               (<code>TranslationSchema</code>)           \u2013            <p>Description.</p> </li> <li> <code>notes</code>               (<code>Sequence[TranslationSchema]</code>)           \u2013            <p>Additional public notes to the hut.</p> </li> <li> <code>owner</code>               (<code>OwnerSchema | None</code>)           \u2013            <p>Hut owner.</p> </li> <li> <code>url</code>               (<code>str</code>)           \u2013            <p>Hut website.</p> </li> <li> <code>contacts</code>               (<code>Sequence[ContactSchema]</code>)           \u2013            <p>Hut contacts.</p> </li> <li> <code>country_code</code>               (<code>str | None</code>)           \u2013            <p>Country.</p> </li> <li> <code>comment</code>               (<code>str</code>)           \u2013            <p>Additional private comment to the hut.</p> </li> <li> <code>capacity</code>               (<code>CapacitySchema</code>)           \u2013            <p>Cpacities of the hut.</p> </li> <li> <code>type</code>               (<code>CapacitySchema</code>)           \u2013            <p>Hut type (e.g. <code>selfhut</code>).</p> </li> <li> <code>photos</code>               (<code>list[PhotoSchema]</code>)           \u2013            <p>Hut photos.</p> </li> <li> <code>open_monthly</code>               (<code>OpenMonthlySchema</code>)           \u2013            <p>Monthly value if open, closed or partially open.</p> </li> <li> <code>is_active</code>               (<code>bool</code>)           \u2013            <p>Hut is active.</p> </li> <li> <code>is_public</code>               (<code>bool</code>)           \u2013            <p>Show hut public.</p> </li> <li> <code>extras</code>               (<code>Mapping[str, Any]</code>)           \u2013            <p>Additional information to the hut as dictionary.</p> </li> <li> <code>source</code>               (<code>SourceSchema | None</code>)           \u2013            <p>Short name of source (e.g. 'hrs' for alpsonline.org, or 'sac', 'refuges', ...).</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>__str__</code>             \u2013              </li> <li> <code>add_slug</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>slug</code>               (<code>str</code>)           \u2013            </li> <li> <code>name</code>               (<code>TranslationSchema</code>)           \u2013            </li> <li> <code>location</code>               (<code>LocationEleSchema</code>)           \u2013            </li> <li> <code>description</code>               (<code>TranslationSchema</code>)           \u2013            </li> <li> <code>license</code>               (<code>LicenseSchema | None</code>)           \u2013            </li> <li> <code>source</code>               (<code>SourceSchema | None</code>)           \u2013            </li> <li> <code>author</code>               (<code>AuthorSchema | None</code>)           \u2013            </li> <li> <code>notes</code>               (<code>Sequence[TranslationSchema]</code>)           \u2013            </li> <li> <code>owner</code>               (<code>OwnerSchema | None</code>)           \u2013            </li> <li> <code>url</code>               (<code>str</code>)           \u2013            </li> <li> <code>contacts</code>               (<code>Sequence[ContactSchema]</code>)           \u2013            </li> <li> <code>country_code</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>comment</code>               (<code>str</code>)           \u2013            </li> <li> <code>capacity</code>               (<code>CapacitySchema</code>)           \u2013            </li> <li> <code>hut_type</code>               (<code>HutTypeSchema</code>)           \u2013            </li> <li> <code>photos</code>               (<code>list[PhotoSchema]</code>)           \u2013            </li> <li> <code>open_monthly</code>               (<code>OpenMonthlySchema</code>)           \u2013            </li> <li> <code>is_active</code>               (<code>bool</code>)           \u2013            </li> <li> <code>is_public</code>               (<code>bool</code>)           \u2013            </li> <li> <code>extras</code>               (<code>Mapping[str, Any]</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema.slug","title":"slug  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>slug: str = Field('', max_length=50)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: TranslationSchema = Field(\n    ..., description=\"Original hut name.\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema.location","title":"location  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>location: LocationEleSchema = Field(\n    ...,\n    description=\"Location of the hut with optional elevation.\",\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema.description","title":"description  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>description: TranslationSchema = Field(\n    default_factory=TranslationSchema\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema.license","title":"license  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>license: LicenseSchema | None = Field(\n    None,\n    description=\"License for the hut information (mainly descpription)\",\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema.source","title":"source  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source: SourceSchema | None = Field(\n    None,\n    description=\"Source origin information (e.g. 'hrs' for alpsonline.org, or 'sac', 'refuges', ...).\",\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema.author","title":"author  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>author: AuthorSchema | None = Field(\n    None,\n    description=\"Author of the hut information, this is an addition to the source information (e.g. custom author)\",\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema.notes","title":"notes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>notes: Sequence[TranslationSchema] = Field(\n    ..., description=\"Additional notes to the hut.\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema.owner","title":"owner  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>owner: OwnerSchema | None = Field(None)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url: str = Field('', max_length=200)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema.contacts","title":"contacts  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contacts: Sequence[ContactSchema] = Field(\n    default_factory=list\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema.country_code","title":"country_code  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>country_code: str | None = Field(\n    None, max_length=2, min_length=2\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema.comment","title":"comment  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>comment: str = Field(\n    \"\",\n    max_length=20000,\n    description=\"Additional private comment, e.g for review.\",\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema.capacity","title":"capacity  <code>instance-attribute</code>","text":"<pre><code>capacity: CapacitySchema\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema.hut_type","title":"hut_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>hut_type: HutTypeSchema = Field(..., alias='type')\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema.photos","title":"photos  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>photos: list[PhotoSchema] = Field(default_factory=list)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema.open_monthly","title":"open_monthly  <code>instance-attribute</code>","text":"<pre><code>open_monthly: OpenMonthlySchema\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema.is_active","title":"is_active  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_active: bool = Field(default=True)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema.is_public","title":"is_public  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_public: bool = Field(default=True)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema.extras","title":"extras  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extras: Mapping[str, Any] = Field(\n    default_factory=dict,\n    description=\"Additional information as dictionary.\",\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema-functions","title":"Functions","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutSchema.add_slug","title":"add_slug","text":"<pre><code>add_slug() -&gt; HutSchema\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema","title":"BaseHutConverterSchema","text":"<p>Base class used for a converter schema.</p> <p>Attributes:</p> <ul> <li> <code>source</code>               (<code>SourceSchema | None</code>)           \u2013            <p>Source data</p> </li> </ul> <p>All attributes as in <code>HutSchema</code> either as attribute or pydantic <code>computed_field</code>.</p> <p>Examples:</p> <p>See <code>hut_services.osm.schema.OsmHut0Convert</code>.</p> <p>Classes:</p> <ul> <li> <code>FieldNotImplementedError</code>           \u2013            <p>Field is not implemented.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get_hut</code>             \u2013              <p>Convert to hut.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>source_data</code>               (<code>TSourceData</code>)           \u2013            </li> <li> <code>include_photos</code>               (<code>bool</code>)           \u2013            </li> <li> <code>slug</code>               (<code>str</code>)           \u2013            </li> <li> <code>name</code>               (<code>TranslationSchema</code>)           \u2013            </li> <li> <code>source</code>               (<code>SourceSchema | None</code>)           \u2013            </li> <li> <code>author</code>               (<code>AuthorSchema | None</code>)           \u2013            </li> <li> <code>source_name</code>               (<code>str</code>)           \u2013            </li> <li> <code>location</code>               (<code>LocationEleSchema</code>)           \u2013            </li> <li> <code>description</code>               (<code>TranslationSchema</code>)           \u2013            </li> <li> <code>notes</code>               (<code>list[TranslationSchema]</code>)           \u2013            </li> <li> <code>owner</code>               (<code>OwnerSchema | None</code>)           \u2013            </li> <li> <code>url</code>               (<code>str</code>)           \u2013            </li> <li> <code>contacts</code>               (<code>list[ContactSchema]</code>)           \u2013            </li> <li> <code>country_code</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>comment</code>               (<code>str</code>)           \u2013            </li> <li> <code>capacity</code>               (<code>CapacitySchema</code>)           \u2013            </li> <li> <code>hut_type</code>               (<code>HutTypeSchema</code>)           \u2013            </li> <li> <code>photos</code>               (<code>list[PhotoSchema]</code>)           \u2013            </li> <li> <code>open_monthly</code>               (<code>OpenMonthlySchema</code>)           \u2013            </li> <li> <code>is_active</code>               (<code>bool</code>)           \u2013            </li> <li> <code>is_public</code>               (<code>bool</code>)           \u2013            </li> <li> <code>extras</code>               (<code>dict[str, Any]</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.source_data","title":"source_data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_data: TSourceData = Field(..., exclude=True)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.include_photos","title":"include_photos  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>include_photos: bool = True\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.slug","title":"slug  <code>property</code>","text":"<pre><code>slug: str\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.name","title":"name  <code>property</code>","text":"<pre><code>name: TranslationSchema\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.source","title":"source  <code>property</code>","text":"<pre><code>source: SourceSchema | None\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.author","title":"author  <code>property</code>","text":"<pre><code>author: AuthorSchema | None\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.source_name","title":"source_name  <code>property</code>","text":"<pre><code>source_name: str\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.location","title":"location  <code>property</code>","text":"<pre><code>location: LocationEleSchema\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.description","title":"description  <code>property</code>","text":"<pre><code>description: TranslationSchema\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.notes","title":"notes  <code>property</code>","text":"<pre><code>notes: list[TranslationSchema]\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.owner","title":"owner  <code>property</code>","text":"<pre><code>owner: OwnerSchema | None\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.url","title":"url  <code>property</code>","text":"<pre><code>url: str\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.contacts","title":"contacts  <code>property</code>","text":"<pre><code>contacts: list[ContactSchema]\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.country_code","title":"country_code  <code>property</code>","text":"<pre><code>country_code: str | None\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.comment","title":"comment  <code>property</code>","text":"<pre><code>comment: str\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.capacity","title":"capacity  <code>property</code>","text":"<pre><code>capacity: CapacitySchema\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.hut_type","title":"hut_type  <code>property</code>","text":"<pre><code>hut_type: HutTypeSchema\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.photos","title":"photos  <code>property</code>","text":"<pre><code>photos: list[PhotoSchema]\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.open_monthly","title":"open_monthly  <code>property</code>","text":"<pre><code>open_monthly: OpenMonthlySchema\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.is_active","title":"is_active  <code>property</code>","text":"<pre><code>is_active: bool\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.is_public","title":"is_public  <code>property</code>","text":"<pre><code>is_public: bool\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.extras","title":"extras  <code>property</code>","text":"<pre><code>extras: dict[str, Any]\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema-classes","title":"Classes","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.FieldNotImplementedError","title":"FieldNotImplementedError","text":"<pre><code>FieldNotImplementedError(\n    obj: BaseHutConverterSchema, field: str\n)\n</code></pre> <p>Field is not implemented.</p> <p>Parameters:</p>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.FieldNotImplementedError(obj)","title":"<code>obj</code>","text":"(<code>BaseHutConverterSchema</code>)           \u2013            <p>Current object.</p>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.FieldNotImplementedError(field)","title":"<code>field</code>","text":"(<code>str</code>)           \u2013            <p>Field which is not implementd.</p>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.FieldNotImplementedError-functions","title":"Functions","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema-functions","title":"Functions","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutConverterSchema.get_hut","title":"get_hut","text":"<pre><code>get_hut() -&gt; HutSchema\n</code></pre> <p>Convert to hut.</p> <p>Returns:</p> <ul> <li> <code>HutSchema</code>           \u2013            <p>Converted hut.</p> </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutSourceSchema","title":"BaseHutSourceSchema","text":"<p>Base class for a hut source.</p> <p>Attributes:</p> <ul> <li> <code>source_name</code>               (<code>str</code>)           \u2013            <p>Name of the source (e.g. osm, wikipedia, ...).</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Original hut name.</p> </li> <li> <code>location</code>               (<code>LocationEleSchema | None</code>)           \u2013            <p>Location of the hut.</p> </li> <li> <code>source_id</code>               (<code>str</code>)           \u2013            <p>Originial source id of the hut.</p> </li> <li> <code>source_data</code>               (<code>TSourceData_co | None</code>)           \u2013            <p>Source data for this hut.</p> </li> <li> <code>source_properties</code>               (<code>TProperties_co | None</code>)           \u2013            <p>Additinal source data properties.</p> </li> <li> <code>version</code>               (<code>int</code>)           \u2013            <p>Version of the service when this entry was created.</p> </li> <li> <code>created</code>               (<code>datetime</code>)           \u2013            <p>Created.</p> </li> </ul> <p>Examples:</p> <pre><code>class MyHutSource(BaseHutSourceSchema[MyHutSchema, SourcePropertiesSchema]):\n    source_name: str = \"my\"\n</code></pre> <p>Or with different properties: <code>hut_services.osm.schema.OsmHutSource</code>.</p> <p>Methods:</p> <ul> <li> <code>__str__</code>             \u2013              </li> <li> <code>show</code>             \u2013              <p>Returns a formatted string with the hut information which can be printed.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>source_name</code>               (<code>str</code>)           \u2013            </li> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> <li> <code>location</code>               (<code>LocationEleSchema | None</code>)           \u2013            </li> <li> <code>source_id</code>               (<code>str</code>)           \u2013            </li> <li> <code>source_data</code>               (<code>TSourceData_co | None</code>)           \u2013            </li> <li> <code>source_properties</code>               (<code>TProperties_co | None</code>)           \u2013            </li> <li> <code>version</code>               (<code>int</code>)           \u2013            </li> <li> <code>created</code>               (<code>datetime</code>)           \u2013            </li> <li> <code>source_properties_schema</code>               (<code>dict</code>)           \u2013            <p>Returns JSON schema for the 'source_properties' fields.</p> </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutSourceSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutSourceSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(coerce_numbers_to_str=True)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutSourceSchema.source_name","title":"source_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_name: str = Field(\n    \"unknown\",\n    description=\"Name of the source (e.g. osm, wikipedia, ...).\",\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutSourceSchema.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = Field(..., description='Original hut name.')\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutSourceSchema.location","title":"location  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>location: LocationEleSchema | None = Field(\n    None, description=\"Location of the hut.\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutSourceSchema.source_id","title":"source_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_id: str = Field(\n    ..., description=\"Originial source id of the hut.\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutSourceSchema.source_data","title":"source_data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_data: TSourceData_co | None = Field(\n    None, description=\"Source data for this hut.\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutSourceSchema.source_properties","title":"source_properties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_properties: TProperties_co | None = Field(\n    None, description=\"Additinal source data properties.\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutSourceSchema.version","title":"version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>version: int = Field(\n    default=0,\n    description=\"Version of the service when this entry was created.\",\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutSourceSchema.created","title":"created  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created: datetime = Field(\n    default_factory=now,\n    description=\"Version of the service when this entry was created.\",\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutSourceSchema.source_properties_schema","title":"source_properties_schema  <code>property</code>","text":"<pre><code>source_properties_schema: dict\n</code></pre> <p>Returns JSON schema for the 'source_properties' fields.</p> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>JSON schema.</p> </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutSourceSchema-functions","title":"Functions","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutSourceSchema.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutSourceSchema.show","title":"show","text":"<pre><code>show(\n    source_id: bool = True,\n    location: bool = True,\n    elevation: bool = True,\n    source_name: bool = True,\n    version: bool = False,\n    created: bool = False,\n) -&gt; str\n</code></pre> <p>Returns a formatted string with the hut information which can be printed.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>Formatted string.</p> </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutSourceSchema.show(source_id)","title":"<code>source_id</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show source ID.</p>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutSourceSchema.show(location)","title":"<code>location</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show location.</p>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutSourceSchema.show(elevation)","title":"<code>elevation</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show elevation.</p>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutSourceSchema.show(source_name)","title":"<code>source_name</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show source name.</p>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutSourceSchema.show(version)","title":"<code>version</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Show verions.</p>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.BaseHutSourceSchema.show(created)","title":"<code>created</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Show created date.</p>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.SourceDataSchema","title":"SourceDataSchema","text":"<p>SourceData schema</p> <p>Methods:</p> <ul> <li> <code>get_id</code>             \u2013              <p>Get source <code>id</code>.</p> </li> <li> <code>get_name</code>             \u2013              <p>Get source hut <code>name</code>.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.SourceDataSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.SourceDataSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.SourceDataSchema-functions","title":"Functions","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.SourceDataSchema.get_id","title":"get_id","text":"<pre><code>get_id() -&gt; str\n</code></pre> <p>Get source <code>id</code>.</p>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.SourceDataSchema.get_name","title":"get_name","text":"<pre><code>get_name() -&gt; str\n</code></pre> <p>Get source hut <code>name</code>.</p>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.SourcePropertiesSchema","title":"SourcePropertiesSchema","text":"<p>Properties saved together with the source data.</p> <p>Examples:</p> <p>See <code>hut_services.osm.schema.OsmProperties</code>.</p>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.AnswerEnum","title":"AnswerEnum","text":"<p>Anser enum.</p> <p>'yesish' and 'noish' means it is likely to be 'yes' or 'no'. 'maybe' means is is either 'yes' or 'no'.</p> <p>Attributes:</p> <ul> <li> <code>yes</code>           \u2013            </li> <li> <code>yesish</code>           \u2013            </li> <li> <code>maybe</code>           \u2013            </li> <li> <code>noish</code>           \u2013            </li> <li> <code>no</code>           \u2013            </li> <li> <code>unknown</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.AnswerEnum-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.AnswerEnum.yes","title":"yes  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>yes = 'yes'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.AnswerEnum.yesish","title":"yesish  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>yesish = 'yesish'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.AnswerEnum.maybe","title":"maybe  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>maybe = 'maybe'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.AnswerEnum.noish","title":"noish  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>noish = 'noish'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.AnswerEnum.no","title":"no  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>no = 'no'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.AnswerEnum.unknown","title":"unknown  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unknown = 'unknown'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.CapacitySchema","title":"CapacitySchema","text":"<p>Hut capacities.</p> Hint <p>For unattended accomodations the <code>opened</code> attribute should be used.</p> <p>Attributes:</p> <ul> <li> <code>open</code>           \u2013            <p>Capacity when the hut is open</p> </li> <li> <code>closed</code>           \u2013            <p>Capacity when the hut is closed (shelter, winterroom, ...)</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>if_open</code>               (<code>NaturalInt | None</code>)           \u2013            </li> <li> <code>if_closed</code>               (<code>NaturalInt | None</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.CapacitySchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.CapacitySchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.CapacitySchema.if_open","title":"if_open  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>if_open: NaturalInt | None = Field(\n    None,\n    alias=\"open\",\n    description=\"Capacity when the hut is open\",\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.CapacitySchema.if_closed","title":"if_closed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>if_closed: NaturalInt | None = Field(\n    None,\n    alias=\"closed\",\n    description=\"Capacity when the hut is closed (shelter, winterroom, ...)\",\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutTypeEnum","title":"HutTypeEnum","text":"<p>Enum with hut types.</p> <p>Attributes:</p> <ul> <li> <code>unknown</code>           \u2013            </li> <li> <code>closed</code>           \u2013            </li> <li> <code>campgr</code>           \u2013            </li> <li> <code>shelter</code>           \u2013            </li> <li> <code>camping</code>           \u2013            </li> <li> <code>bivouac</code>           \u2013            </li> <li> <code>selfhut</code>           \u2013            </li> <li> <code>hut</code>           \u2013            </li> <li> <code>alp</code>           \u2013            </li> <li> <code>bhotel</code>           \u2013            </li> <li> <code>hostel</code>           \u2013            </li> <li> <code>hotel</code>           \u2013            </li> <li> <code>special</code>           \u2013            </li> <li> <code>resta</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutTypeEnum-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutTypeEnum.unknown","title":"unknown  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>unknown = 'unknown'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutTypeEnum.closed","title":"closed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>closed = 'closed'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutTypeEnum.campgr","title":"campgr  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>campgr = 'campgr'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutTypeEnum.shelter","title":"shelter  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>shelter = 'shelter'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutTypeEnum.camping","title":"camping  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>camping = 'camping'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutTypeEnum.bivouac","title":"bivouac  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bivouac = 'bivouac'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutTypeEnum.selfhut","title":"selfhut  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>selfhut = 'selfhut'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutTypeEnum.hut","title":"hut  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>hut = 'hut'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutTypeEnum.alp","title":"alp  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>alp = 'alp'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutTypeEnum.bhotel","title":"bhotel  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bhotel = 'bhotel'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutTypeEnum.hostel","title":"hostel  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>hostel = 'hostel'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutTypeEnum.hotel","title":"hotel  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>hotel = 'hotel'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutTypeEnum.special","title":"special  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>special = 'special'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutTypeEnum.resta","title":"resta  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>resta = 'resta'\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutTypeSchema","title":"HutTypeSchema","text":"<p>Hut type schema.</p> <p>Defines the type of the hut if it is open and closed. E.g. a hut can be a 'selfhut' if it is closed. If a hut is always open do not add anything to <code>closed</code>. If it is specifcally closed, e.g. during winter ass <code>'closed'</code>.</p> <p>Attributes:</p> <ul> <li> <code>open</code>           \u2013            <p>Type when the hut is open</p> </li> <li> <code>closed</code>           \u2013            <p>Type when the hut is closed (bivouac, selfhut, closed, ...)</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>if_open</code>               (<code>HutTypeEnum</code>)           \u2013            </li> <li> <code>if_closed</code>               (<code>HutTypeEnum | None</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutTypeSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutTypeSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutTypeSchema.if_open","title":"if_open  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>if_open: HutTypeEnum = Field(\n    unknown,\n    alias=\"open\",\n    description=\"Type when the hut is open\",\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.HutTypeSchema.if_closed","title":"if_closed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>if_closed: HutTypeEnum | None = Field(\n    None,\n    alias=\"closed\",\n    description=\"Type when the hut is closed (bivouac, selfhut, closed, ...)\",\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OpenMonthlySchema","title":"OpenMonthlySchema","text":"<p>Shows for every month if it is usally, open, partially open or closed. Can be accessed as index, but it starts with 1 (month_01)!.</p> <p>Attributes:</p> <ul> <li> <code>url</code>               (<code>str</code>)           \u2013            <p>URL which shows if it is open or not.</p> </li> <li> <code>month_mm</code>               (<code>OpenMonthly</code>)           \u2013            <p>Month (starting with 01).</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>__getitem__</code>             \u2013              </li> <li> <code>__setitem__</code>             \u2013              </li> <li> <code>__iter__</code>             \u2013              </li> <li> <code>__next__</code>             \u2013              </li> <li> <code>set_month</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>url</code>               (<code>str</code>)           \u2013            </li> <li> <code>month_01</code>               (<code>AnswerEnum</code>)           \u2013            </li> <li> <code>month_02</code>               (<code>AnswerEnum</code>)           \u2013            </li> <li> <code>month_03</code>               (<code>AnswerEnum</code>)           \u2013            </li> <li> <code>month_04</code>               (<code>AnswerEnum</code>)           \u2013            </li> <li> <code>month_05</code>               (<code>AnswerEnum</code>)           \u2013            </li> <li> <code>month_06</code>               (<code>AnswerEnum</code>)           \u2013            </li> <li> <code>month_07</code>               (<code>AnswerEnum</code>)           \u2013            </li> <li> <code>month_08</code>               (<code>AnswerEnum</code>)           \u2013            </li> <li> <code>month_09</code>               (<code>AnswerEnum</code>)           \u2013            </li> <li> <code>month_10</code>               (<code>AnswerEnum</code>)           \u2013            </li> <li> <code>month_11</code>               (<code>AnswerEnum</code>)           \u2013            </li> <li> <code>month_12</code>               (<code>AnswerEnum</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OpenMonthlySchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OpenMonthlySchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OpenMonthlySchema.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url: str = Field(\n    \"\", description=\"URL which shows if it is open or not.\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OpenMonthlySchema.month_01","title":"month_01  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month_01: AnswerEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OpenMonthlySchema.month_02","title":"month_02  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month_02: AnswerEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OpenMonthlySchema.month_03","title":"month_03  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month_03: AnswerEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OpenMonthlySchema.month_04","title":"month_04  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month_04: AnswerEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OpenMonthlySchema.month_05","title":"month_05  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month_05: AnswerEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OpenMonthlySchema.month_06","title":"month_06  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month_06: AnswerEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OpenMonthlySchema.month_07","title":"month_07  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month_07: AnswerEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OpenMonthlySchema.month_08","title":"month_08  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month_08: AnswerEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OpenMonthlySchema.month_09","title":"month_09  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month_09: AnswerEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OpenMonthlySchema.month_10","title":"month_10  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month_10: AnswerEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OpenMonthlySchema.month_11","title":"month_11  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month_11: AnswerEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OpenMonthlySchema.month_12","title":"month_12  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>month_12: AnswerEnum = unknown\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OpenMonthlySchema-functions","title":"Functions","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OpenMonthlySchema.__getitem__","title":"__getitem__","text":"<pre><code>__getitem__(month: int) -&gt; AnswerEnum\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OpenMonthlySchema.__setitem__","title":"__setitem__","text":"<pre><code>__setitem__(month: int, value: AnswerEnum) -&gt; None\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OpenMonthlySchema.__iter__","title":"__iter__","text":"<pre><code>__iter__()\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OpenMonthlySchema.__next__","title":"__next__","text":"<pre><code>__next__() -&gt; AnswerEnum\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OpenMonthlySchema.set_month","title":"set_month","text":"<pre><code>set_month(month: int, value: AnswerEnum) -&gt; None\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OwnerSchema","title":"OwnerSchema","text":"<p>Schema for the owner.</p> <p>Attributes:</p> <ul> <li> <code>slug</code>               (<code>str</code>)           \u2013            <p>Owner slug, if empty it is replaced by slugified <code>name</code>.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Owner name, required.</p> </li> <li> <code>url</code>               (<code>str</code>)           \u2013            <p>Owners URL (not the hut website).</p> </li> <li> <code>note</code>               (<code>TranslationSchema</code>)           \u2013            <p>Additonal (public) note to the owner.</p> </li> <li> <code>comment</code>               (<code>str</code>)           \u2013            <p>Private comment to the owner.</p> </li> <li> <code>contacts</code>               (<code>ContactSchema | None</code>)           \u2013            <p>Contacts used for the owner.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>add_slug</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>slug</code>               (<code>str</code>)           \u2013            </li> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> <li> <code>url</code>               (<code>str</code>)           \u2013            </li> <li> <code>note</code>               (<code>TranslationSchema</code>)           \u2013            </li> <li> <code>comment</code>               (<code>str</code>)           \u2013            </li> <li> <code>contacts</code>               (<code>ContactSchema | None</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OwnerSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OwnerSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OwnerSchema.slug","title":"slug  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>slug: str = Field('', max_length=50)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OwnerSchema.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = Field(..., max_length=100)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OwnerSchema.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url: str = Field('', max_length=200)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OwnerSchema.note","title":"note  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>note: TranslationSchema = Field(\n    default_factory=TranslationSchema\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OwnerSchema.comment","title":"comment  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>comment: str = ''\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OwnerSchema.contacts","title":"contacts  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contacts: ContactSchema | None = None\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OwnerSchema-functions","title":"Functions","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.OwnerSchema.add_slug","title":"add_slug","text":"<pre><code>add_slug() -&gt; OwnerSchema\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PhotoSchemaOld","title":"PhotoSchemaOld","text":"<p>Photo schema.</p> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>attribution</code>               (<code>str</code>)           \u2013            </li> <li> <code>url</code>               (<code>str</code>)           \u2013            </li> <li> <code>thumb</code>               (<code>str</code>)           \u2013            </li> <li> <code>caption</code>               (<code>TranslationSchema | None</code>)           \u2013            </li> <li> <code>comment</code>               (<code>str</code>)           \u2013            </li> <li> <code>is_public</code>               (<code>bool</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PhotoSchemaOld-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PhotoSchemaOld.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PhotoSchemaOld.attribution","title":"attribution  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>attribution: str = Field(\n    \"\",\n    description=\"Attribution, resp. copyright information as markdown text\",\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PhotoSchemaOld.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url: str\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PhotoSchemaOld.thumb","title":"thumb  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>thumb: str = Field(\n    \"\", description=\"Url to thumbnail (around 400px).\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PhotoSchemaOld.caption","title":"caption  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>caption: TranslationSchema | None = Field(\n    None, description=\"Original hut name.\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PhotoSchemaOld.comment","title":"comment  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>comment: str = Field(\n    \"\",\n    max_length=20000,\n    description=\"Additional private comment, e.g for review.\",\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PhotoSchemaOld.is_public","title":"is_public  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>is_public: bool = Field(default=True)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.AuthorSchema","title":"AuthorSchema","text":"<p>Author information.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name of the author.</p> </li> <li> <code>url</code>               (<code>None | HttpUrl</code>)           \u2013            <p>URL of the author.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> <li> <code>url</code>               (<code>None | HttpUrl</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.AuthorSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.AuthorSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.AuthorSchema.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.AuthorSchema.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url: None | HttpUrl = None\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.LicenseSchema","title":"LicenseSchema","text":"<p>License information.</p> <p>Attributes:</p> <ul> <li> <code>slug</code>               (<code>str</code>)           \u2013            <p>Identifier or slug of the license (e.g. by-sa, cc-0, ...).</p> </li> <li> <code>url</code>               (<code>HttpUrl | None</code>)           \u2013            <p>URL of the license.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Fullname of the license.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>slug</code>               (<code>str</code>)           \u2013            </li> <li> <code>url</code>               (<code>HttpUrl | None</code>)           \u2013            </li> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.LicenseSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.LicenseSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.LicenseSchema.slug","title":"slug  <code>instance-attribute</code>","text":"<pre><code>slug: str\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.LicenseSchema.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url: HttpUrl | None = None\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.LicenseSchema.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = Field('', max_length=300)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.SourceSchema","title":"SourceSchema","text":"<p>Source information.</p> <p>Attributes:</p> <ul> <li> <code>ident</code>               (<code>str</code>)           \u2013            <p>Identifier or slug of the source.</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name of the source, either person or organization (e.g refuges, wikicommon, sac, ...)</p> </li> <li> <code>url</code>               (<code>HttpUrl | None</code>)           \u2013            <p>URL of the source.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>ident</code>               (<code>str</code>)           \u2013            </li> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> <li> <code>url</code>               (<code>HttpUrl | None</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.SourceSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.SourceSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.SourceSchema.ident","title":"ident  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ident: str = Field('', max_length=300)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.SourceSchema.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = Field('', max_length=300)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.SourceSchema.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url: HttpUrl | None = None\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PhotoSchema","title":"PhotoSchema","text":"<p>Schema for a hut photo.</p> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>licenses</code>               (<code>list[LicenseSchema]</code>)           \u2013            </li> <li> <code>caption</code>               (<code>TranslationSchema</code>)           \u2013            </li> <li> <code>source</code>               (<code>SourceSchema | None</code>)           \u2013            </li> <li> <code>author</code>               (<code>AuthorSchema | None</code>)           \u2013            </li> <li> <code>comment</code>               (<code>str</code>)           \u2013            </li> <li> <code>raw_url</code>               (<code>HttpUrl</code>)           \u2013            </li> <li> <code>width</code>               (<code>int</code>)           \u2013            </li> <li> <code>height</code>               (<code>int</code>)           \u2013            </li> <li> <code>url</code>               (<code>HttpUrl</code>)           \u2013            </li> <li> <code>capture_date</code>               (<code>datetime | None</code>)           \u2013            </li> <li> <code>tags</code>               (<code>set[str] | None</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PhotoSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PhotoSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PhotoSchema.licenses","title":"licenses  <code>instance-attribute</code>","text":"<pre><code>licenses: list[LicenseSchema]\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PhotoSchema.caption","title":"caption  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>caption: TranslationSchema = Field(\n    default_factory=TranslationSchema\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PhotoSchema.source","title":"source  <code>instance-attribute</code>","text":"<pre><code>source: SourceSchema | None\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PhotoSchema.author","title":"author  <code>instance-attribute</code>","text":"<pre><code>author: AuthorSchema | None\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PhotoSchema.comment","title":"comment  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>comment: str = Field(\n    \"\",\n    max_length=20000,\n    description=\"Additional private comment, e.g for review.\",\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PhotoSchema.raw_url","title":"raw_url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>raw_url: HttpUrl = Field(\n    ...,\n    description=\"Url to the raw image, this can be used to download or embed the image.\",\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PhotoSchema.width","title":"width  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>width: int = Field(\n    ..., description=\"Image width in pixels.\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PhotoSchema.height","title":"height  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>height: int = Field(\n    ..., description=\"Image height in pixels.\"\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PhotoSchema.url","title":"url  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>url: HttpUrl = Field(\n    ...,\n    description=\"Url to the image on the side, this should not be used to include it direclty, rather to just link to it.\",\n)\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PhotoSchema.capture_date","title":"capture_date  <code>instance-attribute</code>","text":"<pre><code>capture_date: datetime | None\n</code></pre>"},{"location":"reference/hut_services/core/schema/#hut_services.core.schema.PhotoSchema.tags","title":"tags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tags: set[str] | None = None\n</code></pre>"},{"location":"reference/hut_services/core/schema/locale/","title":"locale","text":""},{"location":"reference/hut_services/core/schema/locale/#hut_services.core.schema.locale","title":"locale","text":"<p>Classes:</p> <ul> <li> <code>TranslationSchema</code>           \u2013            <p>Field with different translations.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>none_to_str</code>             \u2013              <p>Convert a <code>None</code> to an empty string.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>NoneStr</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/core/schema/locale/#hut_services.core.schema.locale-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/locale/#hut_services.core.schema.locale.NoneStr","title":"NoneStr  <code>module-attribute</code>","text":"<pre><code>NoneStr = str\n</code></pre>"},{"location":"reference/hut_services/core/schema/locale/#hut_services.core.schema.locale-classes","title":"Classes","text":""},{"location":"reference/hut_services/core/schema/locale/#hut_services.core.schema.locale.TranslationSchema","title":"TranslationSchema","text":"<p>Field with different translations.</p> <p>Attributes:</p> <ul> <li> <code>de</code>               (<code>NoneStr</code>)           \u2013            <p>German</p> </li> <li> <code>en</code>               (<code>NoneStr</code>)           \u2013            <p>English</p> </li> <li> <code>fr</code>               (<code>NoneStr</code>)           \u2013            <p>French</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>de</code>               (<code>NoneStr</code>)           \u2013            </li> <li> <code>en</code>               (<code>NoneStr</code>)           \u2013            </li> <li> <code>fr</code>               (<code>NoneStr</code>)           \u2013            </li> <li> <code>it</code>               (<code>NoneStr</code>)           \u2013            </li> <li> <code>i18n</code>               (<code>str</code>)           \u2013            <p>Returns the first stored translation in the following order:</p> </li> </ul>"},{"location":"reference/hut_services/core/schema/locale/#hut_services.core.schema.locale.TranslationSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/locale/#hut_services.core.schema.locale.TranslationSchema.de","title":"de  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>de: NoneStr = ''\n</code></pre>"},{"location":"reference/hut_services/core/schema/locale/#hut_services.core.schema.locale.TranslationSchema.en","title":"en  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>en: NoneStr = ''\n</code></pre>"},{"location":"reference/hut_services/core/schema/locale/#hut_services.core.schema.locale.TranslationSchema.fr","title":"fr  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fr: NoneStr = ''\n</code></pre>"},{"location":"reference/hut_services/core/schema/locale/#hut_services.core.schema.locale.TranslationSchema.it","title":"it  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>it: NoneStr = ''\n</code></pre>"},{"location":"reference/hut_services/core/schema/locale/#hut_services.core.schema.locale.TranslationSchema.i18n","title":"i18n  <code>property</code>","text":"<pre><code>i18n: str\n</code></pre> <p>Returns the first stored translation in the following order: <code>de</code>, <code>en</code>, <code>fr</code> or <code>it</code>.</p>"},{"location":"reference/hut_services/core/schema/locale/#hut_services.core.schema.locale-functions","title":"Functions","text":""},{"location":"reference/hut_services/core/schema/locale/#hut_services.core.schema.locale.none_to_str","title":"none_to_str","text":"<pre><code>none_to_str(v: str | None) -&gt; str\n</code></pre> <p>Convert a <code>None</code> to an empty string.</p>"},{"location":"reference/hut_services/core/schema/geo/","title":"geo","text":""},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo","title":"geo","text":"<p>Modules:</p> <ul> <li> <code>bbox</code>           \u2013            </li> <li> <code>geo</code>           \u2013            </li> <li> <code>types</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>LocationEleSchema</code>           \u2013            <p>Location with longitude, latitude and (optional) elevation in WSG84.</p> </li> <li> <code>LocationSchema</code>           \u2013            <p>Location with longitude, latitude and optional elevation in WSG84.</p> </li> </ul>"},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo-classes","title":"Classes","text":""},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationEleSchema","title":"LocationEleSchema","text":"<p>Location with longitude, latitude and (optional) elevation in WSG84.</p> <p>Attributes:</p> <ul> <li> <code>lat</code>               (<code>Latitude</code>)           \u2013            <p>Latitude.</p> </li> <li> <code>lon</code>               (<code>Longitude</code>)           \u2013            <p>Longitude.</p> </li> <li> <code>ele</code>               (<code>Elevation | None</code>)           \u2013            <p>Elevation in meter.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>check_field_aliases</code>             \u2013              </li> <li> <code>from_swiss</code>             \u2013              </li> <li> <code>__str__</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>lat</code>               (<code>Latitude</code>)           \u2013            </li> <li> <code>lon</code>               (<code>Longitude</code>)           \u2013            </li> <li> <code>lon_lat</code>               (<code>tuple[Longitude, Latitude]</code>)           \u2013            <p>Tuple with (<code>longitude</code>, <code>latitude</code>).</p> </li> <li> <code>model_config</code>           \u2013            </li> <li> <code>ele</code>               (<code>Elevation | None</code>)           \u2013            </li> <li> <code>lon_lat_ele</code>               (<code>tuple[Longitude, Latitude, Elevation]</code>)           \u2013            <p>Tuple with longitude, latitude and elevation. If elevation is not defined it returns 0.</p> </li> <li> <code>geojson</code>               (<code>Point</code>)           \u2013            <p>Retuns as geojson point.</p> </li> </ul>"},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationEleSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationEleSchema.lat","title":"lat  <code>instance-attribute</code>","text":"<pre><code>lat: Latitude\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationEleSchema.lon","title":"lon  <code>instance-attribute</code>","text":"<pre><code>lon: Longitude\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationEleSchema.lon_lat","title":"lon_lat  <code>property</code>","text":"<pre><code>lon_lat: tuple[Longitude, Latitude]\n</code></pre> <p>Tuple with (<code>longitude</code>, <code>latitude</code>).</p> <p>Returns:</p> <ul> <li> <code>tuple[Longitude, Latitude]</code>           \u2013            <p>Longitude and latitude.</p> </li> </ul>"},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationEleSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(from_attributes=True)\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationEleSchema.ele","title":"ele  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ele: Elevation | None = None\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationEleSchema.lon_lat_ele","title":"lon_lat_ele  <code>property</code>","text":"<pre><code>lon_lat_ele: tuple[Longitude, Latitude, Elevation]\n</code></pre> <p>Tuple with longitude, latitude and elevation. If elevation is not defined it returns 0.</p> <p>Returns:</p> <ul> <li> <code>tuple[Longitude, Latitude, Elevation]</code>           \u2013            <p>Longitude, latitude and elevation.</p> </li> </ul>"},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationEleSchema.geojson","title":"geojson  <code>property</code>","text":"<pre><code>geojson: Point\n</code></pre> <p>Retuns as geojson point.</p>"},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationEleSchema-functions","title":"Functions","text":""},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationEleSchema.check_field_aliases","title":"check_field_aliases  <code>classmethod</code>","text":"<pre><code>check_field_aliases(data: Any) -&gt; Any\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationEleSchema.from_swiss","title":"from_swiss  <code>classmethod</code>","text":"<pre><code>from_swiss(\n    ch_lat: float, ch_lon: float, ele: float | None\n) -&gt; LocationEleSchema\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationEleSchema.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationSchema","title":"LocationSchema","text":"<p>Location with longitude, latitude and optional elevation in WSG84.</p> <p>Attributes:</p> <ul> <li> <code>lon</code>               (<code>Longitude</code>)           \u2013            <p>Longitude (x).</p> </li> <li> <code>lat</code>               (<code>Latitude</code>)           \u2013            <p>Latitude (y).</p> </li> <li> <code>ele</code>               (<code>Latitude</code>)           \u2013            <p>Elevation in meter.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>check_field_aliases</code>             \u2013              </li> <li> <code>from_swiss</code>             \u2013              <p>Takes LV03 or LV95 (newest) coordiates.</p> </li> <li> <code>__str__</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>lat</code>               (<code>Latitude</code>)           \u2013            </li> <li> <code>lon</code>               (<code>Longitude</code>)           \u2013            </li> <li> <code>lon_lat</code>               (<code>tuple[Longitude, Latitude]</code>)           \u2013            <p>Tuple with (<code>longitude</code>, <code>latitude</code>).</p> </li> <li> <code>geojson</code>               (<code>Point</code>)           \u2013            <p>Retuns as geojson point.</p> </li> </ul>"},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(from_attributes=True)\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationSchema.lat","title":"lat  <code>instance-attribute</code>","text":"<pre><code>lat: Latitude\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationSchema.lon","title":"lon  <code>instance-attribute</code>","text":"<pre><code>lon: Longitude\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationSchema.lon_lat","title":"lon_lat  <code>property</code>","text":"<pre><code>lon_lat: tuple[Longitude, Latitude]\n</code></pre> <p>Tuple with (<code>longitude</code>, <code>latitude</code>).</p> <p>Returns:</p> <ul> <li> <code>tuple[Longitude, Latitude]</code>           \u2013            <p>Longitude and latitude.</p> </li> </ul>"},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationSchema.geojson","title":"geojson  <code>property</code>","text":"<pre><code>geojson: Point\n</code></pre> <p>Retuns as geojson point.</p>"},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationSchema-functions","title":"Functions","text":""},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationSchema.check_field_aliases","title":"check_field_aliases  <code>classmethod</code>","text":"<pre><code>check_field_aliases(data: Any) -&gt; Any\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationSchema.from_swiss","title":"from_swiss  <code>classmethod</code>","text":"<pre><code>from_swiss(\n    ch_lat: float, ch_lon: float, ele: float | None\n) -&gt; LocationSchema | LocationEleSchema\n</code></pre> <p>Takes LV03 or LV95 (newest) coordiates. More information.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>LocationSchema | LocationEleSchema</code>           \u2013            <p><code>LocationSchema</code> object.</p> </li> </ul>"},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationSchema.from_swiss(ch_lat)","title":"<code>ch_lat</code>","text":"(<code>float</code>)           \u2013            <p>Latitude in swiss format (east).</p>"},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationSchema.from_swiss(ch_lon)","title":"<code>ch_lon</code>","text":"(<code>float</code>)           \u2013            <p>Longitude in swiss format (north).</p>"},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationSchema.from_swiss(ele)","title":"<code>ele</code>","text":"(<code>float | None</code>)           \u2013            <p>Elevation in meter.</p>"},{"location":"reference/hut_services/core/schema/geo/#hut_services.core.schema.geo.LocationSchema.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/bbox/","title":"bbox","text":""},{"location":"reference/hut_services/core/schema/geo/bbox/#hut_services.core.schema.geo.bbox","title":"bbox","text":""},{"location":"reference/hut_services/core/schema/geo/geo/","title":"geo","text":""},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo","title":"geo","text":"<p>Classes:</p> <ul> <li> <code>LocationSchema</code>           \u2013            <p>Location with longitude, latitude and optional elevation in WSG84.</p> </li> <li> <code>LocationEleSchema</code>           \u2013            <p>Location with longitude, latitude and (optional) elevation in WSG84.</p> </li> </ul>"},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo-classes","title":"Classes","text":""},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationSchema","title":"LocationSchema","text":"<p>Location with longitude, latitude and optional elevation in WSG84.</p> <p>Attributes:</p> <ul> <li> <code>lon</code>               (<code>Longitude</code>)           \u2013            <p>Longitude (x).</p> </li> <li> <code>lat</code>               (<code>Latitude</code>)           \u2013            <p>Latitude (y).</p> </li> <li> <code>ele</code>               (<code>Latitude</code>)           \u2013            <p>Elevation in meter.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>check_field_aliases</code>             \u2013              </li> <li> <code>from_swiss</code>             \u2013              <p>Takes LV03 or LV95 (newest) coordiates.</p> </li> <li> <code>__str__</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>lat</code>               (<code>Latitude</code>)           \u2013            </li> <li> <code>lon</code>               (<code>Longitude</code>)           \u2013            </li> <li> <code>lon_lat</code>               (<code>tuple[Longitude, Latitude]</code>)           \u2013            <p>Tuple with (<code>longitude</code>, <code>latitude</code>).</p> </li> <li> <code>geojson</code>               (<code>Point</code>)           \u2013            <p>Retuns as geojson point.</p> </li> </ul>"},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(from_attributes=True)\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationSchema.lat","title":"lat  <code>instance-attribute</code>","text":"<pre><code>lat: Latitude\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationSchema.lon","title":"lon  <code>instance-attribute</code>","text":"<pre><code>lon: Longitude\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationSchema.lon_lat","title":"lon_lat  <code>property</code>","text":"<pre><code>lon_lat: tuple[Longitude, Latitude]\n</code></pre> <p>Tuple with (<code>longitude</code>, <code>latitude</code>).</p> <p>Returns:</p> <ul> <li> <code>tuple[Longitude, Latitude]</code>           \u2013            <p>Longitude and latitude.</p> </li> </ul>"},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationSchema.geojson","title":"geojson  <code>property</code>","text":"<pre><code>geojson: Point\n</code></pre> <p>Retuns as geojson point.</p>"},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationSchema-functions","title":"Functions","text":""},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationSchema.check_field_aliases","title":"check_field_aliases  <code>classmethod</code>","text":"<pre><code>check_field_aliases(data: Any) -&gt; Any\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationSchema.from_swiss","title":"from_swiss  <code>classmethod</code>","text":"<pre><code>from_swiss(\n    ch_lat: float, ch_lon: float, ele: float | None\n) -&gt; LocationSchema | LocationEleSchema\n</code></pre> <p>Takes LV03 or LV95 (newest) coordiates. More information.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>LocationSchema | LocationEleSchema</code>           \u2013            <p><code>LocationSchema</code> object.</p> </li> </ul>"},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationSchema.from_swiss(ch_lat)","title":"<code>ch_lat</code>","text":"(<code>float</code>)           \u2013            <p>Latitude in swiss format (east).</p>"},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationSchema.from_swiss(ch_lon)","title":"<code>ch_lon</code>","text":"(<code>float</code>)           \u2013            <p>Longitude in swiss format (north).</p>"},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationSchema.from_swiss(ele)","title":"<code>ele</code>","text":"(<code>float | None</code>)           \u2013            <p>Elevation in meter.</p>"},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationSchema.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationEleSchema","title":"LocationEleSchema","text":"<p>Location with longitude, latitude and (optional) elevation in WSG84.</p> <p>Attributes:</p> <ul> <li> <code>lat</code>               (<code>Latitude</code>)           \u2013            <p>Latitude.</p> </li> <li> <code>lon</code>               (<code>Longitude</code>)           \u2013            <p>Longitude.</p> </li> <li> <code>ele</code>               (<code>Elevation | None</code>)           \u2013            <p>Elevation in meter.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>check_field_aliases</code>             \u2013              </li> <li> <code>from_swiss</code>             \u2013              </li> <li> <code>__str__</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>lat</code>               (<code>Latitude</code>)           \u2013            </li> <li> <code>lon</code>               (<code>Longitude</code>)           \u2013            </li> <li> <code>lon_lat</code>               (<code>tuple[Longitude, Latitude]</code>)           \u2013            <p>Tuple with (<code>longitude</code>, <code>latitude</code>).</p> </li> <li> <code>model_config</code>           \u2013            </li> <li> <code>ele</code>               (<code>Elevation | None</code>)           \u2013            </li> <li> <code>lon_lat_ele</code>               (<code>tuple[Longitude, Latitude, Elevation]</code>)           \u2013            <p>Tuple with longitude, latitude and elevation. If elevation is not defined it returns 0.</p> </li> <li> <code>geojson</code>               (<code>Point</code>)           \u2013            <p>Retuns as geojson point.</p> </li> </ul>"},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationEleSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationEleSchema.lat","title":"lat  <code>instance-attribute</code>","text":"<pre><code>lat: Latitude\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationEleSchema.lon","title":"lon  <code>instance-attribute</code>","text":"<pre><code>lon: Longitude\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationEleSchema.lon_lat","title":"lon_lat  <code>property</code>","text":"<pre><code>lon_lat: tuple[Longitude, Latitude]\n</code></pre> <p>Tuple with (<code>longitude</code>, <code>latitude</code>).</p> <p>Returns:</p> <ul> <li> <code>tuple[Longitude, Latitude]</code>           \u2013            <p>Longitude and latitude.</p> </li> </ul>"},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationEleSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(from_attributes=True)\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationEleSchema.ele","title":"ele  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ele: Elevation | None = None\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationEleSchema.lon_lat_ele","title":"lon_lat_ele  <code>property</code>","text":"<pre><code>lon_lat_ele: tuple[Longitude, Latitude, Elevation]\n</code></pre> <p>Tuple with longitude, latitude and elevation. If elevation is not defined it returns 0.</p> <p>Returns:</p> <ul> <li> <code>tuple[Longitude, Latitude, Elevation]</code>           \u2013            <p>Longitude, latitude and elevation.</p> </li> </ul>"},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationEleSchema.geojson","title":"geojson  <code>property</code>","text":"<pre><code>geojson: Point\n</code></pre> <p>Retuns as geojson point.</p>"},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationEleSchema-functions","title":"Functions","text":""},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationEleSchema.check_field_aliases","title":"check_field_aliases  <code>classmethod</code>","text":"<pre><code>check_field_aliases(data: Any) -&gt; Any\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationEleSchema.from_swiss","title":"from_swiss  <code>classmethod</code>","text":"<pre><code>from_swiss(\n    ch_lat: float, ch_lon: float, ele: float | None\n) -&gt; LocationEleSchema\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/geo/#hut_services.core.schema.geo.geo.LocationEleSchema.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/types/","title":"types","text":""},{"location":"reference/hut_services/core/schema/geo/types/#hut_services.core.schema.geo.types","title":"types","text":"<p>Attributes:</p> <ul> <li> <code>Elevation</code>           \u2013            </li> <li> <code>Longitude</code>           \u2013            </li> <li> <code>Latitude</code>           \u2013            </li> <li> <code>LV03X</code>           \u2013            </li> <li> <code>LV03Y</code>           \u2013            </li> <li> <code>LV03</code>               (<code>TypeAlias</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/core/schema/geo/types/#hut_services.core.schema.geo.types-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/schema/geo/types/#hut_services.core.schema.geo.types.Elevation","title":"Elevation  <code>module-attribute</code>","text":"<pre><code>Elevation = float\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/types/#hut_services.core.schema.geo.types.Longitude","title":"Longitude  <code>module-attribute</code>","text":"<pre><code>Longitude = float\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/types/#hut_services.core.schema.geo.types.Latitude","title":"Latitude  <code>module-attribute</code>","text":"<pre><code>Latitude = float\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/types/#hut_services.core.schema.geo.types.LV03X","title":"LV03X  <code>module-attribute</code>","text":"<pre><code>LV03X = float\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/types/#hut_services.core.schema.geo.types.LV03Y","title":"LV03Y  <code>module-attribute</code>","text":"<pre><code>LV03Y = float\n</code></pre>"},{"location":"reference/hut_services/core/schema/geo/types/#hut_services.core.schema.geo.types.LV03","title":"LV03  <code>module-attribute</code>","text":"<pre><code>LV03: TypeAlias = tuple[LV03Y, LV03X, Elevation]\n</code></pre>"},{"location":"reference/hut_services/core/service/","title":"service","text":""},{"location":"reference/hut_services/core/service/#hut_services.core.service","title":"service","text":"<p>Classes:</p> <ul> <li> <code>BaseService</code>           \u2013            <p>Base service which is inheritated by other services.</p> </li> </ul>"},{"location":"reference/hut_services/core/service/#hut_services.core.service-classes","title":"Classes","text":""},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService","title":"BaseService","text":"<pre><code>BaseService(\n    support_bbox: bool = False,\n    support_limit: bool = False,\n    support_offset: bool = False,\n    support_convert: bool = False,\n    support_booking: bool = False,\n)\n</code></pre> <p>Base service which is inheritated by other services.</p> Warning <p>Do not use this directly.</p> <p>The following attributes are used to define which paramets are supported by a service.</p> <p>Attributes:</p> <ul> <li> <code>support_bbox</code>               (<code>bool</code>)           \u2013            <p>Support for <code>bbox</code> as parameter.</p> </li> <li> <code>support_limit</code>               (<code>bool</code>)           \u2013            <p>Support for <code>limit</code> as parameter.</p> </li> <li> <code>support_offset</code>               (<code>bool</code>)           \u2013            <p>Support for <code>offset</code> as parameter.</p> </li> <li> <code>support_convert</code>               (<code>bool</code>)           \u2013            <p>Support for <code>convert</code> as parameter.</p> </li> </ul> <p>Examples:</p> <p>Custom service base in <code>BaseService</code>. For this the two schemas <code>MyHutSource</code> and <code>MyInfoHutConvert</code> need to be defined as well. <pre><code>from typing import Any\nfrom hut_services.core.schema.geo import BBox\nfrom hut_services import BaseService, HutSchema\n\n# TODO: define this somewhere:\nfrom my_service.schema import MyHutSource, MyInfoHutConvert\n\nclass MyService(BaseService[MyHutSource]):\n    def __init__(self, request_url: str = \"http://hut.info\"):\n        super().__init__(support_bbox=True,\n                         support_limit=True,\n                         support_offset=True,\n                         support_convert=True)\n        self.request_url = request_url\n\n    def get_huts_from_source(\n        self, bbox: BBox | None = None, limit: int = 1,\n        offset: int = 0, **kwargs: Any\n    ) -&gt; list[MyHutSource]:\n        src_huts = httpx.get(self.request_url)\n        return [MyHutSource(**h) for h in src_huts]\n\n    def convert(self, src: MyHutSource) -&gt; HutSchema:\n        return MyInfoHutConvert(source=src.source_data).get_hut()\n</code></pre></p> <p>Classes:</p> <ul> <li> <code>MethodNotImplementedError</code>           \u2013            <p>Method is not implemented exception.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>clear_all_cache</code>             \u2013              <p>Clears the cache of all services!</p> </li> <li> <code>get_huts_from_source</code>             \u2013              <p>Get all huts from source.</p> </li> <li> <code>convert</code>             \u2013              <p>Convert one hut from source to <code>HutSchema</code>.</p> </li> <li> <code>get_huts</code>             \u2013              <p>Get all huts form source and converts them.</p> </li> <li> <code>get_bookings</code>             \u2013              <p>Get bookings for a list of huts.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>support_bbox</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_limit</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_offset</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_convert</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_booking</code>               (<code>bool</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService.support_bbox","title":"support_bbox  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_bbox: bool = support_bbox\n</code></pre>"},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService.support_limit","title":"support_limit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_limit: bool = support_limit\n</code></pre>"},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService.support_offset","title":"support_offset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_offset: bool = support_offset\n</code></pre>"},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService.support_convert","title":"support_convert  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_convert: bool = support_convert\n</code></pre>"},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService.support_booking","title":"support_booking  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_booking: bool = support_booking\n</code></pre>"},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService-classes","title":"Classes","text":""},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService.MethodNotImplementedError","title":"MethodNotImplementedError","text":"<pre><code>MethodNotImplementedError(obj: BaseService, method: str)\n</code></pre> <p>Method is not implemented exception.</p> <p>Parameters:</p>"},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService.MethodNotImplementedError(obj)","title":"<code>obj</code>","text":"(<code>BaseService</code>)           \u2013            <p>Service object (e.g. <code>MyService</code>).</p>"},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService.MethodNotImplementedError(method)","title":"<code>method</code>","text":"(<code>str</code>)           \u2013            <p>Method which is not implemented.</p>"},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService.MethodNotImplementedError-functions","title":"Functions","text":""},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService-functions","title":"Functions","text":""},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService.clear_all_cache","title":"clear_all_cache  <code>classmethod</code>","text":"<pre><code>clear_all_cache() -&gt; None\n</code></pre> <p>Clears the cache of all services!</p>"},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService.get_huts_from_source","title":"get_huts_from_source","text":"<pre><code>get_huts_from_source(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    **kwargs: Any,\n) -&gt; list[THutSourceSchema]\n</code></pre> <p>Get all huts from source.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[THutSourceSchema]</code>           \u2013            <p>Huts from source.</p> </li> </ul>"},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService.get_huts_from_source(bbox)","title":"<code>bbox</code>","text":"(<code>BBox | None</code>, default:                   <code>None</code> )           \u2013            <p>Boundary box.</p>"},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService.get_huts_from_source(limit)","title":"<code>limit</code>","text":"(<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Limit (how many entries to retrieve).</p>"},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService.get_huts_from_source(offset)","title":"<code>offset</code>","text":"(<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Offset of the request.</p>"},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService.convert","title":"convert","text":"<pre><code>convert(\n    src: Mapping | Any, include_photos: bool = True\n) -&gt; HutSchema\n</code></pre> <p>Convert one hut from source to <code>HutSchema</code>.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>HutSchema</code>           \u2013            <p>Converted hut.</p> </li> </ul>"},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService.convert(src)","title":"<code>src</code>","text":"(<code>Mapping | Any</code>)           \u2013            <p>Source schema.</p>"},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService.convert(include_photos)","title":"<code>include_photos</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Include photos, some service need additonal requests to get the photos.</p>"},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService.get_huts","title":"get_huts","text":"<pre><code>get_huts(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    include_photos: bool = True,\n    **kwargs: Any,\n) -&gt; list[HutSchema]\n</code></pre> <p>Get all huts form source and converts them. Calls <code>get_huts_from_source()</code> and <code>convert()</code>.</p> <p>Returns:</p> <ul> <li> <code>list[HutSchema]</code>           \u2013            <p>Converted huts from source.</p> </li> </ul>"},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService.get_bookings","title":"get_bookings","text":"<pre><code>get_bookings(\n    date: datetime | date | Literal[\"now\"] | None = None,\n    days: int | None = None,\n    source_ids: list[int] | None = None,\n    lang: str = \"de\",\n) -&gt; dict[int, HutBookingsSchema]\n</code></pre> <p>Get bookings for a list of huts.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[int, HutBookingsSchema]</code>           \u2013            <p>A dictionary with the bookings (key = soruce id).</p> </li> </ul>"},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService.get_bookings(date)","title":"<code>date</code>","text":"(<code>datetime | date | Literal['now'] | None</code>, default:                   <code>None</code> )           \u2013            <p>Start daye for the bookings</p>"},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService.get_bookings(days)","title":"<code>days</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Duration in days</p>"},{"location":"reference/hut_services/core/service/#hut_services.core.service.BaseService.get_bookings(source_ids)","title":"<code>source_ids</code>","text":"(<code>list[int] | None</code>, default:                   <code>None</code> )           \u2013            <p>A list of ids to return (source id, not the hut id), if set to <code>None</code> all are returned</p>"},{"location":"reference/hut_services/core/utils/","title":"utils","text":""},{"location":"reference/hut_services/core/utils/#hut_services.core.utils","title":"utils","text":""},{"location":"reference/hut_services/core/utils/#hut_services.core.utils-classes","title":"Classes","text":""},{"location":"reference/hut_services/geocode/","title":"geocode","text":""},{"location":"reference/hut_services/geocode/#hut_services.geocode","title":"geocode","text":"<p>Modules:</p> <ul> <li> <code>schema</code>           \u2013            </li> <li> <code>script</code>           \u2013            </li> <li> <code>service</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>GeocodeService</code>           \u2013            <p>Service to get Information from</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>geocode_service</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/geocode/#hut_services.geocode-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/geocode/#hut_services.geocode.geocode_service","title":"geocode_service  <code>module-attribute</code>","text":"<pre><code>geocode_service = GeocodeService()\n</code></pre>"},{"location":"reference/hut_services/geocode/#hut_services.geocode-classes","title":"Classes","text":""},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService","title":"GeocodeService","text":"<pre><code>GeocodeService()\n</code></pre> <p>Service to get Information from Nominatim.</p> Note <p>This is not used to get huts, rather to get additional info (like location) from huts.</p> <p>Classes:</p> <ul> <li> <code>MethodNotImplementedError</code>           \u2013            <p>Method is not implemented exception.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>clear_all_cache</code>             \u2013              <p>Clears the cache of all services!</p> </li> <li> <code>get_huts_from_source</code>             \u2013              <p>Get all huts from source.</p> </li> <li> <code>get_huts</code>             \u2013              <p>Get all huts form source and converts them.</p> </li> <li> <code>get_bookings</code>             \u2013              <p>Get bookings for a list of huts.</p> </li> <li> <code>get_location_by_name</code>             \u2013              <p>Get location (coordinates) from a name (uses 'https://nominatim.openstreetmap.org).</p> </li> <li> <code>get_elevations</code>             \u2013              <p>Get elevations from a list of locations (coordinates) (uses 'https://open-elevation.com).</p> </li> <li> <code>get_elevation</code>             \u2013              <p>Get elevation from a location (coordinates) (uses 'https://open-elevation.com).</p> </li> <li> <code>convert</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>support_bbox</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_limit</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_offset</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_convert</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_booking</code>               (<code>bool</code>)           \u2013            </li> <li> <code>loc_request_url</code>           \u2013            </li> <li> <code>ele_request_url</code>           \u2013            </li> <li> <code>httpx_client</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.support_bbox","title":"support_bbox  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_bbox: bool = support_bbox\n</code></pre>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.support_limit","title":"support_limit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_limit: bool = support_limit\n</code></pre>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.support_offset","title":"support_offset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_offset: bool = support_offset\n</code></pre>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.support_convert","title":"support_convert  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_convert: bool = support_convert\n</code></pre>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.support_booking","title":"support_booking  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_booking: bool = support_booking\n</code></pre>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.loc_request_url","title":"loc_request_url  <code>instance-attribute</code>","text":"<pre><code>loc_request_url = (\n    \"https://nominatim.openstreetmap.org/search\"\n)\n</code></pre>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.ele_request_url","title":"ele_request_url  <code>instance-attribute</code>","text":"<pre><code>ele_request_url = (\n    \"https://api.open-elevation.com/api/v1/lookup\"\n)\n</code></pre>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.httpx_client","title":"httpx_client  <code>instance-attribute</code>","text":"<pre><code>httpx_client = Client()\n</code></pre>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService-classes","title":"Classes","text":""},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.MethodNotImplementedError","title":"MethodNotImplementedError","text":"<pre><code>MethodNotImplementedError(obj: BaseService, method: str)\n</code></pre> <p>Method is not implemented exception.</p> <p>Parameters:</p>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.MethodNotImplementedError(obj)","title":"<code>obj</code>","text":"(<code>BaseService</code>)           \u2013            <p>Service object (e.g. <code>MyService</code>).</p>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.MethodNotImplementedError(method)","title":"<code>method</code>","text":"(<code>str</code>)           \u2013            <p>Method which is not implemented.</p>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.MethodNotImplementedError-functions","title":"Functions","text":""},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService-functions","title":"Functions","text":""},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.clear_all_cache","title":"clear_all_cache  <code>classmethod</code>","text":"<pre><code>clear_all_cache() -&gt; None\n</code></pre> <p>Clears the cache of all services!</p>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.get_huts_from_source","title":"get_huts_from_source","text":"<pre><code>get_huts_from_source(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    **kwargs: Any,\n) -&gt; list[THutSourceSchema]\n</code></pre> <p>Get all huts from source.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[THutSourceSchema]</code>           \u2013            <p>Huts from source.</p> </li> </ul>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.get_huts_from_source(bbox)","title":"<code>bbox</code>","text":"(<code>BBox | None</code>, default:                   <code>None</code> )           \u2013            <p>Boundary box.</p>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.get_huts_from_source(limit)","title":"<code>limit</code>","text":"(<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Limit (how many entries to retrieve).</p>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.get_huts_from_source(offset)","title":"<code>offset</code>","text":"(<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Offset of the request.</p>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.get_huts","title":"get_huts","text":"<pre><code>get_huts(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    include_photos: bool = True,\n    **kwargs: Any,\n) -&gt; list[HutSchema]\n</code></pre> <p>Get all huts form source and converts them. Calls <code>get_huts_from_source()</code> and <code>convert()</code>.</p> <p>Returns:</p> <ul> <li> <code>list[HutSchema]</code>           \u2013            <p>Converted huts from source.</p> </li> </ul>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.get_bookings","title":"get_bookings","text":"<pre><code>get_bookings(\n    date: datetime | date | Literal[\"now\"] | None = None,\n    days: int | None = None,\n    source_ids: list[int] | None = None,\n    lang: str = \"de\",\n) -&gt; dict[int, HutBookingsSchema]\n</code></pre> <p>Get bookings for a list of huts.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[int, HutBookingsSchema]</code>           \u2013            <p>A dictionary with the bookings (key = soruce id).</p> </li> </ul>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.get_bookings(date)","title":"<code>date</code>","text":"(<code>datetime | date | Literal['now'] | None</code>, default:                   <code>None</code> )           \u2013            <p>Start daye for the bookings</p>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.get_bookings(days)","title":"<code>days</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Duration in days</p>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.get_bookings(source_ids)","title":"<code>source_ids</code>","text":"(<code>list[int] | None</code>, default:                   <code>None</code> )           \u2013            <p>A list of ids to return (source id, not the hut id), if set to <code>None</code> all are returned</p>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.get_location_by_name","title":"get_location_by_name","text":"<pre><code>get_location_by_name(\n    name: str, client: Client | None = None\n) -&gt; LocationEleSchema | None\n</code></pre> <p>Get location (coordinates) from a name (uses 'https://nominatim.openstreetmap.org).</p>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.get_elevations","title":"get_elevations","text":"<pre><code>get_elevations(\n    locations: Sequence[LocationSchema | LocationEleSchema],\n    client: Client | None = None,\n) -&gt; list[LocationEleSchema]\n</code></pre> <p>Get elevations from a list of locations (coordinates) (uses 'https://open-elevation.com).</p>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.get_elevation","title":"get_elevation","text":"<pre><code>get_elevation(\n    location: LocationSchema | LocationEleSchema,\n    client: Client | None = None,\n) -&gt; LocationEleSchema\n</code></pre> <p>Get elevation from a location (coordinates) (uses 'https://open-elevation.com).</p>"},{"location":"reference/hut_services/geocode/#hut_services.geocode.GeocodeService.convert","title":"convert","text":"<pre><code>convert(\n    src: Mapping | Any, include_photos: bool = True\n) -&gt; HutSchema\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/","title":"schema","text":""},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema","title":"schema","text":"<p>Classes:</p> <ul> <li> <code>GeocodeHutSchema</code>           \u2013            <p>Open street map schema.</p> </li> <li> <code>GeocodeProperties</code>           \u2013            </li> <li> <code>GeocodeHutSource</code>           \u2013            </li> <li> <code>GeocodeHut0Convert</code>           \u2013            </li> </ul> <p>Attributes:</p> <ul> <li> <code>logger</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger(__name__)\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema-classes","title":"Classes","text":""},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSchema","title":"GeocodeHutSchema","text":"<p>Open street map schema.</p> <p>Methods:</p> <ul> <li> <code>get_id</code>             \u2013              <p>Get open street map <code>id</code>.</p> </li> <li> <code>get_name</code>             \u2013              <p>Get open street map hut name.</p> </li> <li> <code>get_location</code>             \u2013              <p>Get open street map location.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>place_id</code>               (<code>int | None</code>)           \u2013            </li> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> <li> <code>lat</code>               (<code>Latitude</code>)           \u2013            </li> <li> <code>lon</code>               (<code>Longitude</code>)           \u2013            </li> <li> <code>licence</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>osm_type</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>osm_id</code>               (<code>int | None</code>)           \u2013            </li> <li> <code>category</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>building_type</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>place_rank</code>               (<code>int | None</code>)           \u2013            </li> <li> <code>importance</code>               (<code>float | None</code>)           \u2013            </li> <li> <code>addresstype</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>display_name</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>extratags</code>               (<code>OSMTagsOptional | None</code>)           \u2013            </li> <li> <code>boundingbox</code>               (<code>BBox | None</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSchema.place_id","title":"place_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>place_id: int | None = None\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSchema.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSchema.lat","title":"lat  <code>instance-attribute</code>","text":"<pre><code>lat: Latitude\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSchema.lon","title":"lon  <code>instance-attribute</code>","text":"<pre><code>lon: Longitude\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSchema.licence","title":"licence  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>licence: str | None = None\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSchema.osm_type","title":"osm_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>osm_type: str | None = None\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSchema.osm_id","title":"osm_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>osm_id: int | None = None\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSchema.category","title":"category  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>category: str | None = None\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSchema.building_type","title":"building_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>building_type: str | None = Field(None, alias='type')\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSchema.place_rank","title":"place_rank  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>place_rank: int | None = None\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSchema.importance","title":"importance  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>importance: float | None = None\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSchema.addresstype","title":"addresstype  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>addresstype: str | None = None\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSchema.display_name","title":"display_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>display_name: str | None = None\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSchema.extratags","title":"extratags  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>extratags: OSMTagsOptional | None = None\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSchema.boundingbox","title":"boundingbox  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>boundingbox: BBox | None = None\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSchema-functions","title":"Functions","text":""},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSchema.get_id","title":"get_id","text":"<pre><code>get_id() -&gt; str\n</code></pre> <p>Get open street map <code>id</code>.</p>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSchema.get_name","title":"get_name","text":"<pre><code>get_name() -&gt; str\n</code></pre> <p>Get open street map hut name.</p>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSchema.get_location","title":"get_location","text":"<pre><code>get_location() -&gt; LocationEleSchema\n</code></pre> <p>Get open street map location.</p>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeProperties","title":"GeocodeProperties","text":""},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSource","title":"GeocodeHutSource","text":"<p>Methods:</p> <ul> <li> <code>__str__</code>             \u2013              </li> <li> <code>show</code>             \u2013              <p>Returns a formatted string with the hut information which can be printed.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> <li> <code>location</code>               (<code>LocationEleSchema | None</code>)           \u2013            </li> <li> <code>source_id</code>               (<code>str</code>)           \u2013            </li> <li> <code>source_data</code>               (<code>TSourceData_co | None</code>)           \u2013            </li> <li> <code>source_properties</code>               (<code>TProperties_co | None</code>)           \u2013            </li> <li> <code>created</code>               (<code>datetime</code>)           \u2013            </li> <li> <code>source_properties_schema</code>               (<code>dict</code>)           \u2013            <p>Returns JSON schema for the 'source_properties' fields.</p> </li> <li> <code>version</code>               (<code>int</code>)           \u2013            </li> <li> <code>source_name</code>               (<code>str</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSource-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSource.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(coerce_numbers_to_str=True)\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSource.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = Field(..., description='Original hut name.')\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSource.location","title":"location  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>location: LocationEleSchema | None = Field(\n    None, description=\"Location of the hut.\"\n)\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSource.source_id","title":"source_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_id: str = Field(\n    ..., description=\"Originial source id of the hut.\"\n)\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSource.source_data","title":"source_data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_data: TSourceData_co | None = Field(\n    None, description=\"Source data for this hut.\"\n)\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSource.source_properties","title":"source_properties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_properties: TProperties_co | None = Field(\n    None, description=\"Additinal source data properties.\"\n)\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSource.created","title":"created  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created: datetime = Field(\n    default_factory=now,\n    description=\"Version of the service when this entry was created.\",\n)\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSource.source_properties_schema","title":"source_properties_schema  <code>property</code>","text":"<pre><code>source_properties_schema: dict\n</code></pre> <p>Returns JSON schema for the 'source_properties' fields.</p> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>JSON schema.</p> </li> </ul>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSource.version","title":"version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>version: int = 0\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSource.source_name","title":"source_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_name: str = 'geocode'\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSource-functions","title":"Functions","text":""},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSource.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSource.show","title":"show","text":"<pre><code>show(\n    source_id: bool = True,\n    location: bool = True,\n    elevation: bool = True,\n    source_name: bool = True,\n    version: bool = False,\n    created: bool = False,\n) -&gt; str\n</code></pre> <p>Returns a formatted string with the hut information which can be printed.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>Formatted string.</p> </li> </ul>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSource.show(source_id)","title":"<code>source_id</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show source ID.</p>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSource.show(location)","title":"<code>location</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show location.</p>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSource.show(elevation)","title":"<code>elevation</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show elevation.</p>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSource.show(source_name)","title":"<code>source_name</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show source name.</p>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSource.show(version)","title":"<code>version</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Show verions.</p>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHutSource.show(created)","title":"<code>created</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Show created date.</p>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert","title":"GeocodeHut0Convert","text":"<p>Classes:</p> <ul> <li> <code>FieldNotImplementedError</code>           \u2013            <p>Field is not implemented.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get_hut</code>             \u2013              <p>Convert to hut.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>source_data</code>               (<code>TSourceData</code>)           \u2013            </li> <li> <code>include_photos</code>               (<code>bool</code>)           \u2013            </li> <li> <code>slug</code>               (<code>str</code>)           \u2013            </li> <li> <code>source</code>               (<code>SourceSchema | None</code>)           \u2013            </li> <li> <code>author</code>               (<code>AuthorSchema | None</code>)           \u2013            </li> <li> <code>source_name</code>               (<code>str</code>)           \u2013            </li> <li> <code>location</code>               (<code>LocationEleSchema</code>)           \u2013            </li> <li> <code>notes</code>               (<code>list[TranslationSchema]</code>)           \u2013            </li> <li> <code>owner</code>               (<code>OwnerSchema | None</code>)           \u2013            </li> <li> <code>url</code>               (<code>str</code>)           \u2013            </li> <li> <code>contacts</code>               (<code>list[ContactSchema]</code>)           \u2013            </li> <li> <code>country_code</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>comment</code>               (<code>str</code>)           \u2013            </li> <li> <code>capacity</code>               (<code>CapacitySchema</code>)           \u2013            </li> <li> <code>hut_type</code>               (<code>HutTypeSchema</code>)           \u2013            </li> <li> <code>photos</code>               (<code>list[PhotoSchema]</code>)           \u2013            </li> <li> <code>open_monthly</code>               (<code>OpenMonthlySchema</code>)           \u2013            </li> <li> <code>is_active</code>               (<code>bool</code>)           \u2013            </li> <li> <code>is_public</code>               (<code>bool</code>)           \u2013            </li> <li> <code>extras</code>               (<code>dict[str, Any]</code>)           \u2013            </li> <li> <code>name</code>               (<code>TranslationSchema</code>)           \u2013            </li> <li> <code>description</code>               (<code>TranslationSchema</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.source_data","title":"source_data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_data: TSourceData = Field(..., exclude=True)\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.include_photos","title":"include_photos  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>include_photos: bool = True\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.slug","title":"slug  <code>property</code>","text":"<pre><code>slug: str\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.source","title":"source  <code>property</code>","text":"<pre><code>source: SourceSchema | None\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.author","title":"author  <code>property</code>","text":"<pre><code>author: AuthorSchema | None\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.source_name","title":"source_name  <code>property</code>","text":"<pre><code>source_name: str\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.location","title":"location  <code>property</code>","text":"<pre><code>location: LocationEleSchema\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.notes","title":"notes  <code>property</code>","text":"<pre><code>notes: list[TranslationSchema]\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.owner","title":"owner  <code>property</code>","text":"<pre><code>owner: OwnerSchema | None\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.url","title":"url  <code>property</code>","text":"<pre><code>url: str\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.contacts","title":"contacts  <code>property</code>","text":"<pre><code>contacts: list[ContactSchema]\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.country_code","title":"country_code  <code>property</code>","text":"<pre><code>country_code: str | None\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.comment","title":"comment  <code>property</code>","text":"<pre><code>comment: str\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.capacity","title":"capacity  <code>property</code>","text":"<pre><code>capacity: CapacitySchema\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.hut_type","title":"hut_type  <code>property</code>","text":"<pre><code>hut_type: HutTypeSchema\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.photos","title":"photos  <code>property</code>","text":"<pre><code>photos: list[PhotoSchema]\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.open_monthly","title":"open_monthly  <code>property</code>","text":"<pre><code>open_monthly: OpenMonthlySchema\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.is_active","title":"is_active  <code>property</code>","text":"<pre><code>is_active: bool\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.is_public","title":"is_public  <code>property</code>","text":"<pre><code>is_public: bool\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.extras","title":"extras  <code>property</code>","text":"<pre><code>extras: dict[str, Any]\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.name","title":"name  <code>property</code>","text":"<pre><code>name: TranslationSchema\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.description","title":"description  <code>property</code>","text":"<pre><code>description: TranslationSchema\n</code></pre>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert-classes","title":"Classes","text":""},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.FieldNotImplementedError","title":"FieldNotImplementedError","text":"<pre><code>FieldNotImplementedError(\n    obj: BaseHutConverterSchema, field: str\n)\n</code></pre> <p>Field is not implemented.</p> <p>Parameters:</p>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.FieldNotImplementedError(obj)","title":"<code>obj</code>","text":"(<code>BaseHutConverterSchema</code>)           \u2013            <p>Current object.</p>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.FieldNotImplementedError(field)","title":"<code>field</code>","text":"(<code>str</code>)           \u2013            <p>Field which is not implementd.</p>"},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.FieldNotImplementedError-functions","title":"Functions","text":""},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert-functions","title":"Functions","text":""},{"location":"reference/hut_services/geocode/schema/#hut_services.geocode.schema.GeocodeHut0Convert.get_hut","title":"get_hut","text":"<pre><code>get_hut() -&gt; HutSchema\n</code></pre> <p>Convert to hut.</p> <p>Returns:</p> <ul> <li> <code>HutSchema</code>           \u2013            <p>Converted hut.</p> </li> </ul>"},{"location":"reference/hut_services/geocode/script/","title":"script","text":""},{"location":"reference/hut_services/geocode/script/#hut_services.geocode.script","title":"script","text":"<p>Attributes:</p> <ul> <li> <code>request_url</code>           \u2013            </li> <li> <code>langs</code>           \u2013            </li> <li> <code>params</code>           \u2013            </li> <li> <code>res</code>           \u2013            </li> <li> <code>hut</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/geocode/script/#hut_services.geocode.script-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/geocode/script/#hut_services.geocode.script.request_url","title":"request_url  <code>module-attribute</code>","text":"<pre><code>request_url = 'https://nominatim.openstreetmap.org/search'\n</code></pre>"},{"location":"reference/hut_services/geocode/script/#hut_services.geocode.script.langs","title":"langs  <code>module-attribute</code>","text":"<pre><code>langs = join(['ch', 'de', 'fr', 'it', 'at'])\n</code></pre>"},{"location":"reference/hut_services/geocode/script/#hut_services.geocode.script.params","title":"params  <code>module-attribute</code>","text":"<pre><code>params = {\n    \"amenity\": \"Neue Regensburger Huette\",\n    \"format\": \"jsonv2\",\n    \"limit\": 1,\n    \"extratags\": True,\n    \"countrycodes\": langs,\n    \"accept-language\": langs,\n}\n</code></pre>"},{"location":"reference/hut_services/geocode/script/#hut_services.geocode.script.res","title":"res  <code>module-attribute</code>","text":"<pre><code>res = json()\n</code></pre>"},{"location":"reference/hut_services/geocode/script/#hut_services.geocode.script.hut","title":"hut  <code>module-attribute</code>","text":"<pre><code>hut = res[0]\n</code></pre>"},{"location":"reference/hut_services/geocode/service/","title":"service","text":""},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service","title":"service","text":"<p>Classes:</p> <ul> <li> <code>GeocodeService</code>           \u2013            <p>Service to get Information from</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>logger</code>           \u2013            </li> <li> <code>geocode_service</code>           \u2013            </li> <li> <code>limit</code>           \u2013            </li> <li> <code>service</code>           \u2013            </li> <li> <code>loc</code>           \u2013            </li> <li> <code>eles</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger(__name__)\n</code></pre>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.geocode_service","title":"geocode_service  <code>module-attribute</code>","text":"<pre><code>geocode_service = GeocodeService()\n</code></pre>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.limit","title":"limit  <code>module-attribute</code>","text":"<pre><code>limit = 5\n</code></pre>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.service","title":"service  <code>module-attribute</code>","text":"<pre><code>service = GeocodeService()\n</code></pre>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.loc","title":"loc  <code>module-attribute</code>","text":"<pre><code>loc = get_location_by_name('Allmagelerhuette')\n</code></pre>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.eles","title":"eles  <code>module-attribute</code>","text":"<pre><code>eles = get_elevations([loc])\n</code></pre>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service-classes","title":"Classes","text":""},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService","title":"GeocodeService","text":"<pre><code>GeocodeService()\n</code></pre> <p>Service to get Information from Nominatim.</p> Note <p>This is not used to get huts, rather to get additional info (like location) from huts.</p> <p>Classes:</p> <ul> <li> <code>MethodNotImplementedError</code>           \u2013            <p>Method is not implemented exception.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>clear_all_cache</code>             \u2013              <p>Clears the cache of all services!</p> </li> <li> <code>get_huts_from_source</code>             \u2013              <p>Get all huts from source.</p> </li> <li> <code>get_huts</code>             \u2013              <p>Get all huts form source and converts them.</p> </li> <li> <code>get_bookings</code>             \u2013              <p>Get bookings for a list of huts.</p> </li> <li> <code>get_location_by_name</code>             \u2013              <p>Get location (coordinates) from a name (uses 'https://nominatim.openstreetmap.org).</p> </li> <li> <code>get_elevations</code>             \u2013              <p>Get elevations from a list of locations (coordinates) (uses 'https://open-elevation.com).</p> </li> <li> <code>get_elevation</code>             \u2013              <p>Get elevation from a location (coordinates) (uses 'https://open-elevation.com).</p> </li> <li> <code>convert</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>support_bbox</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_limit</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_offset</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_convert</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_booking</code>               (<code>bool</code>)           \u2013            </li> <li> <code>loc_request_url</code>           \u2013            </li> <li> <code>ele_request_url</code>           \u2013            </li> <li> <code>httpx_client</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.support_bbox","title":"support_bbox  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_bbox: bool = support_bbox\n</code></pre>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.support_limit","title":"support_limit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_limit: bool = support_limit\n</code></pre>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.support_offset","title":"support_offset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_offset: bool = support_offset\n</code></pre>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.support_convert","title":"support_convert  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_convert: bool = support_convert\n</code></pre>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.support_booking","title":"support_booking  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_booking: bool = support_booking\n</code></pre>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.loc_request_url","title":"loc_request_url  <code>instance-attribute</code>","text":"<pre><code>loc_request_url = (\n    \"https://nominatim.openstreetmap.org/search\"\n)\n</code></pre>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.ele_request_url","title":"ele_request_url  <code>instance-attribute</code>","text":"<pre><code>ele_request_url = (\n    \"https://api.open-elevation.com/api/v1/lookup\"\n)\n</code></pre>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.httpx_client","title":"httpx_client  <code>instance-attribute</code>","text":"<pre><code>httpx_client = Client()\n</code></pre>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService-classes","title":"Classes","text":""},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.MethodNotImplementedError","title":"MethodNotImplementedError","text":"<pre><code>MethodNotImplementedError(obj: BaseService, method: str)\n</code></pre> <p>Method is not implemented exception.</p> <p>Parameters:</p>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.MethodNotImplementedError(obj)","title":"<code>obj</code>","text":"(<code>BaseService</code>)           \u2013            <p>Service object (e.g. <code>MyService</code>).</p>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.MethodNotImplementedError(method)","title":"<code>method</code>","text":"(<code>str</code>)           \u2013            <p>Method which is not implemented.</p>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.MethodNotImplementedError-functions","title":"Functions","text":""},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService-functions","title":"Functions","text":""},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.clear_all_cache","title":"clear_all_cache  <code>classmethod</code>","text":"<pre><code>clear_all_cache() -&gt; None\n</code></pre> <p>Clears the cache of all services!</p>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.get_huts_from_source","title":"get_huts_from_source","text":"<pre><code>get_huts_from_source(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    **kwargs: Any,\n) -&gt; list[THutSourceSchema]\n</code></pre> <p>Get all huts from source.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[THutSourceSchema]</code>           \u2013            <p>Huts from source.</p> </li> </ul>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.get_huts_from_source(bbox)","title":"<code>bbox</code>","text":"(<code>BBox | None</code>, default:                   <code>None</code> )           \u2013            <p>Boundary box.</p>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.get_huts_from_source(limit)","title":"<code>limit</code>","text":"(<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Limit (how many entries to retrieve).</p>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.get_huts_from_source(offset)","title":"<code>offset</code>","text":"(<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Offset of the request.</p>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.get_huts","title":"get_huts","text":"<pre><code>get_huts(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    include_photos: bool = True,\n    **kwargs: Any,\n) -&gt; list[HutSchema]\n</code></pre> <p>Get all huts form source and converts them. Calls <code>get_huts_from_source()</code> and <code>convert()</code>.</p> <p>Returns:</p> <ul> <li> <code>list[HutSchema]</code>           \u2013            <p>Converted huts from source.</p> </li> </ul>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.get_bookings","title":"get_bookings","text":"<pre><code>get_bookings(\n    date: datetime | date | Literal[\"now\"] | None = None,\n    days: int | None = None,\n    source_ids: list[int] | None = None,\n    lang: str = \"de\",\n) -&gt; dict[int, HutBookingsSchema]\n</code></pre> <p>Get bookings for a list of huts.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[int, HutBookingsSchema]</code>           \u2013            <p>A dictionary with the bookings (key = soruce id).</p> </li> </ul>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.get_bookings(date)","title":"<code>date</code>","text":"(<code>datetime | date | Literal['now'] | None</code>, default:                   <code>None</code> )           \u2013            <p>Start daye for the bookings</p>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.get_bookings(days)","title":"<code>days</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Duration in days</p>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.get_bookings(source_ids)","title":"<code>source_ids</code>","text":"(<code>list[int] | None</code>, default:                   <code>None</code> )           \u2013            <p>A list of ids to return (source id, not the hut id), if set to <code>None</code> all are returned</p>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.get_location_by_name","title":"get_location_by_name","text":"<pre><code>get_location_by_name(\n    name: str, client: Client | None = None\n) -&gt; LocationEleSchema | None\n</code></pre> <p>Get location (coordinates) from a name (uses 'https://nominatim.openstreetmap.org).</p>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.get_elevations","title":"get_elevations","text":"<pre><code>get_elevations(\n    locations: Sequence[LocationSchema | LocationEleSchema],\n    client: Client | None = None,\n) -&gt; list[LocationEleSchema]\n</code></pre> <p>Get elevations from a list of locations (coordinates) (uses 'https://open-elevation.com).</p>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.get_elevation","title":"get_elevation","text":"<pre><code>get_elevation(\n    location: LocationSchema | LocationEleSchema,\n    client: Client | None = None,\n) -&gt; LocationEleSchema\n</code></pre> <p>Get elevation from a location (coordinates) (uses 'https://open-elevation.com).</p>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service.GeocodeService.convert","title":"convert","text":"<pre><code>convert(\n    src: Mapping | Any, include_photos: bool = True\n) -&gt; HutSchema\n</code></pre>"},{"location":"reference/hut_services/geocode/service/#hut_services.geocode.service-functions","title":"Functions","text":""},{"location":"reference/hut_services/osm/","title":"osm","text":""},{"location":"reference/hut_services/osm/#hut_services.osm","title":"osm","text":"<p>Modules:</p> <ul> <li> <code>coordinates</code>           \u2013            </li> <li> <code>exceptions</code>           \u2013            </li> <li> <code>schema</code>           \u2013            </li> <li> <code>service</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>OsmService</code>           \u2013            <p>Service to get huts from</p> </li> </ul>"},{"location":"reference/hut_services/osm/#hut_services.osm-classes","title":"Classes","text":""},{"location":"reference/hut_services/osm/#hut_services.osm.OsmService","title":"OsmService","text":"<pre><code>OsmService(\n    request_url: str = \"https://overpass.osm.ch/api/\",\n)\n</code></pre> <p>Service to get huts from Open Street Map with overpass api.</p> Note <p>The methods are descriebed in <code>BaseService</code>.</p> <p>Classes:</p> <ul> <li> <code>MethodNotImplementedError</code>           \u2013            <p>Method is not implemented exception.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>clear_all_cache</code>             \u2013              <p>Clears the cache of all services!</p> </li> <li> <code>get_huts</code>             \u2013              <p>Get all huts form source and converts them.</p> </li> <li> <code>get_bookings</code>             \u2013              <p>Get bookings for a list of huts.</p> </li> <li> <code>get_huts_from_source</code>             \u2013              </li> <li> <code>convert</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>support_bbox</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_limit</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_offset</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_convert</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_booking</code>               (<code>bool</code>)           \u2013            </li> <li> <code>request_url</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/osm/#hut_services.osm.OsmService-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/osm/#hut_services.osm.OsmService.support_bbox","title":"support_bbox  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_bbox: bool = support_bbox\n</code></pre>"},{"location":"reference/hut_services/osm/#hut_services.osm.OsmService.support_limit","title":"support_limit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_limit: bool = support_limit\n</code></pre>"},{"location":"reference/hut_services/osm/#hut_services.osm.OsmService.support_offset","title":"support_offset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_offset: bool = support_offset\n</code></pre>"},{"location":"reference/hut_services/osm/#hut_services.osm.OsmService.support_convert","title":"support_convert  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_convert: bool = support_convert\n</code></pre>"},{"location":"reference/hut_services/osm/#hut_services.osm.OsmService.support_booking","title":"support_booking  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_booking: bool = support_booking\n</code></pre>"},{"location":"reference/hut_services/osm/#hut_services.osm.OsmService.request_url","title":"request_url  <code>instance-attribute</code>","text":"<pre><code>request_url = request_url\n</code></pre>"},{"location":"reference/hut_services/osm/#hut_services.osm.OsmService-classes","title":"Classes","text":""},{"location":"reference/hut_services/osm/#hut_services.osm.OsmService.MethodNotImplementedError","title":"MethodNotImplementedError","text":"<pre><code>MethodNotImplementedError(obj: BaseService, method: str)\n</code></pre> <p>Method is not implemented exception.</p> <p>Parameters:</p>"},{"location":"reference/hut_services/osm/#hut_services.osm.OsmService.MethodNotImplementedError(obj)","title":"<code>obj</code>","text":"(<code>BaseService</code>)           \u2013            <p>Service object (e.g. <code>MyService</code>).</p>"},{"location":"reference/hut_services/osm/#hut_services.osm.OsmService.MethodNotImplementedError(method)","title":"<code>method</code>","text":"(<code>str</code>)           \u2013            <p>Method which is not implemented.</p>"},{"location":"reference/hut_services/osm/#hut_services.osm.OsmService.MethodNotImplementedError-functions","title":"Functions","text":""},{"location":"reference/hut_services/osm/#hut_services.osm.OsmService-functions","title":"Functions","text":""},{"location":"reference/hut_services/osm/#hut_services.osm.OsmService.clear_all_cache","title":"clear_all_cache  <code>classmethod</code>","text":"<pre><code>clear_all_cache() -&gt; None\n</code></pre> <p>Clears the cache of all services!</p>"},{"location":"reference/hut_services/osm/#hut_services.osm.OsmService.get_huts","title":"get_huts","text":"<pre><code>get_huts(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    include_photos: bool = True,\n    **kwargs: Any,\n) -&gt; list[HutSchema]\n</code></pre> <p>Get all huts form source and converts them. Calls <code>get_huts_from_source()</code> and <code>convert()</code>.</p> <p>Returns:</p> <ul> <li> <code>list[HutSchema]</code>           \u2013            <p>Converted huts from source.</p> </li> </ul>"},{"location":"reference/hut_services/osm/#hut_services.osm.OsmService.get_bookings","title":"get_bookings","text":"<pre><code>get_bookings(\n    date: datetime | date | Literal[\"now\"] | None = None,\n    days: int | None = None,\n    source_ids: list[int] | None = None,\n    lang: str = \"de\",\n) -&gt; dict[int, HutBookingsSchema]\n</code></pre> <p>Get bookings for a list of huts.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[int, HutBookingsSchema]</code>           \u2013            <p>A dictionary with the bookings (key = soruce id).</p> </li> </ul>"},{"location":"reference/hut_services/osm/#hut_services.osm.OsmService.get_bookings(date)","title":"<code>date</code>","text":"(<code>datetime | date | Literal['now'] | None</code>, default:                   <code>None</code> )           \u2013            <p>Start daye for the bookings</p>"},{"location":"reference/hut_services/osm/#hut_services.osm.OsmService.get_bookings(days)","title":"<code>days</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Duration in days</p>"},{"location":"reference/hut_services/osm/#hut_services.osm.OsmService.get_bookings(source_ids)","title":"<code>source_ids</code>","text":"(<code>list[int] | None</code>, default:                   <code>None</code> )           \u2013            <p>A list of ids to return (source id, not the hut id), if set to <code>None</code> all are returned</p>"},{"location":"reference/hut_services/osm/#hut_services.osm.OsmService.get_huts_from_source","title":"get_huts_from_source","text":"<pre><code>get_huts_from_source(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    **kwargs: dict,\n) -&gt; list[OsmHutSource]\n</code></pre>"},{"location":"reference/hut_services/osm/#hut_services.osm.OsmService.convert","title":"convert","text":"<pre><code>convert(\n    src: Mapping | Any, include_photos: bool = True\n) -&gt; HutSchema\n</code></pre>"},{"location":"reference/hut_services/osm/coordinates/","title":"coordinates","text":""},{"location":"reference/hut_services/osm/coordinates/#hut_services.osm.coordinates","title":"coordinates","text":"<p>Attributes:</p> <ul> <li> <code>CORRECTIONS</code>               (<code>dict[int, tuple[float, float]]</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/osm/coordinates/#hut_services.osm.coordinates-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/osm/coordinates/#hut_services.osm.coordinates.CORRECTIONS","title":"CORRECTIONS  <code>module-attribute</code>","text":"<pre><code>CORRECTIONS: dict[int, tuple[float, float]] = {\n    936745007: (45.95379, 7.15546)\n}\n</code></pre>"},{"location":"reference/hut_services/osm/exceptions/","title":"exceptions","text":""},{"location":"reference/hut_services/osm/exceptions/#hut_services.osm.exceptions","title":"exceptions","text":"<p>Classes:</p> <ul> <li> <code>OSMCoordinatesError</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/osm/exceptions/#hut_services.osm.exceptions-classes","title":"Classes","text":""},{"location":"reference/hut_services/osm/exceptions/#hut_services.osm.exceptions.OSMCoordinatesError","title":"OSMCoordinatesError","text":"<pre><code>OSMCoordinatesError(osm_id: int | str, name: str = '')\n</code></pre>"},{"location":"reference/hut_services/osm/exceptions/#hut_services.osm.exceptions.OSMCoordinatesError-functions","title":"Functions","text":""},{"location":"reference/hut_services/osm/schema/","title":"schema","text":""},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema","title":"schema","text":"<p>Classes:</p> <ul> <li> <code>OSMTags</code>           \u2013            <p>Open street map tags.</p> </li> <li> <code>OSMTagsOptional</code>           \u2013            <p>Open street map tags, all optional.</p> </li> <li> <code>OsmHutSchema</code>           \u2013            <p>Open street map schema.</p> </li> <li> <code>OsmProperties</code>           \u2013            </li> <li> <code>OsmHutSource</code>           \u2013            </li> <li> <code>OsmHut0Convert</code>           \u2013            </li> </ul> <p>Attributes:</p> <ul> <li> <code>logger</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger(__name__)\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema-classes","title":"Classes","text":""},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTags","title":"OSMTags","text":"<p>Open street map tags.</p> <p>Attributes:</p> <ul> <li> <code>tourism</code>               (<code>Literal['alpine_hut', 'wilderness_hut']</code>)           \u2013            </li> <li> <code>wikidata</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> <li> <code>operator</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>email</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>contact_email</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>phone</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>contact_phone</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>website</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>contact_website</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>note</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>bed</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>beds</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>capacity</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>access</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>fireplace</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>wall</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>amenity</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>shelter_type</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>winter_room</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>reservation</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>ele</code>               (<code>Elevation | None</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTags-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTags.tourism","title":"tourism  <code>instance-attribute</code>","text":"<pre><code>tourism: Literal['alpine_hut', 'wilderness_hut']\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTags.wikidata","title":"wikidata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>wikidata: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTags.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTags.operator","title":"operator  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>operator: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTags.email","title":"email  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>email: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTags.contact_email","title":"contact_email  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contact_email: str | None = Field(\n    None, alias=\"contact:field\"\n)\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTags.phone","title":"phone  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>phone: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTags.contact_phone","title":"contact_phone  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contact_phone: str | None = Field(\n    None, alias=\"contact:phone\"\n)\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTags.website","title":"website  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>website: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTags.contact_website","title":"contact_website  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contact_website: str | None = Field(\n    None, alias=\"contact:website\"\n)\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTags.note","title":"note  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>note: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTags.bed","title":"bed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bed: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTags.beds","title":"beds  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>beds: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTags.capacity","title":"capacity  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>capacity: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTags.access","title":"access  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>access: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTags.fireplace","title":"fireplace  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fireplace: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTags.wall","title":"wall  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>wall: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTags.amenity","title":"amenity  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>amenity: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTags.shelter_type","title":"shelter_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>shelter_type: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTags.winter_room","title":"winter_room  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>winter_room: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTags.reservation","title":"reservation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reservation: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTags.ele","title":"ele  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ele: Elevation | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTagsOptional","title":"OSMTagsOptional","text":"<p>Open street map tags, all optional.</p> <p>Attributes:</p> <ul> <li> <code>wikidata</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>operator</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>email</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>contact_email</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>phone</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>contact_phone</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>website</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>contact_website</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>note</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>bed</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>beds</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>capacity</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>access</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>fireplace</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>wall</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>amenity</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>shelter_type</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>winter_room</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>reservation</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>tourism</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>name</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>ele</code>               (<code>float | str | None</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTagsOptional-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTagsOptional.wikidata","title":"wikidata  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>wikidata: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTagsOptional.operator","title":"operator  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>operator: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTagsOptional.email","title":"email  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>email: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTagsOptional.contact_email","title":"contact_email  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contact_email: str | None = Field(\n    None, alias=\"contact:field\"\n)\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTagsOptional.phone","title":"phone  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>phone: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTagsOptional.contact_phone","title":"contact_phone  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contact_phone: str | None = Field(\n    None, alias=\"contact:phone\"\n)\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTagsOptional.website","title":"website  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>website: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTagsOptional.contact_website","title":"contact_website  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>contact_website: str | None = Field(\n    None, alias=\"contact:website\"\n)\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTagsOptional.note","title":"note  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>note: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTagsOptional.bed","title":"bed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>bed: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTagsOptional.beds","title":"beds  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>beds: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTagsOptional.capacity","title":"capacity  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>capacity: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTagsOptional.access","title":"access  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>access: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTagsOptional.fireplace","title":"fireplace  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>fireplace: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTagsOptional.wall","title":"wall  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>wall: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTagsOptional.amenity","title":"amenity  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>amenity: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTagsOptional.shelter_type","title":"shelter_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>shelter_type: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTagsOptional.winter_room","title":"winter_room  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>winter_room: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTagsOptional.reservation","title":"reservation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>reservation: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTagsOptional.tourism","title":"tourism  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>tourism: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTagsOptional.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OSMTagsOptional.ele","title":"ele  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ele: float | str | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSchema","title":"OsmHutSchema","text":"<p>Open street map schema.</p> <p>Methods:</p> <ul> <li> <code>get_id</code>             \u2013              <p>Get open street map <code>id</code>.</p> </li> <li> <code>get_name</code>             \u2013              <p>Get open street map hut name.</p> </li> <li> <code>get_location</code>             \u2013              <p>Get open street map location.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>osm_type</code>               (<code>Literal['node', 'way', 'area'] | None</code>)           \u2013            </li> <li> <code>osm_id</code>               (<code>int</code>)           \u2013            </li> <li> <code>lat</code>               (<code>Latitude | None</code>)           \u2013            </li> <li> <code>lon</code>               (<code>Longitude | None</code>)           \u2013            </li> <li> <code>center_lat</code>               (<code>Latitude | None</code>)           \u2013            </li> <li> <code>center_lon</code>               (<code>Longitude | None</code>)           \u2013            </li> <li> <code>tags</code>               (<code>OSMTags</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSchema.osm_type","title":"osm_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>osm_type: Literal['node', 'way', 'area'] | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSchema.osm_id","title":"osm_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>osm_id: int = Field(..., alias='id')\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSchema.lat","title":"lat  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lat: Latitude | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSchema.lon","title":"lon  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>lon: Longitude | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSchema.center_lat","title":"center_lat  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>center_lat: Latitude | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSchema.center_lon","title":"center_lon  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>center_lon: Longitude | None = None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSchema.tags","title":"tags  <code>instance-attribute</code>","text":"<pre><code>tags: OSMTags\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSchema-functions","title":"Functions","text":""},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSchema.get_id","title":"get_id","text":"<pre><code>get_id() -&gt; str\n</code></pre> <p>Get open street map <code>id</code>.</p>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSchema.get_name","title":"get_name","text":"<pre><code>get_name() -&gt; str\n</code></pre> <p>Get open street map hut name.</p>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSchema.get_location","title":"get_location","text":"<pre><code>get_location() -&gt; LocationEleSchema\n</code></pre> <p>Get open street map location.</p>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmProperties","title":"OsmProperties","text":"<p>Attributes:</p> <ul> <li> <code>osm_type</code>               (<code>Literal['node', 'way', 'area']</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmProperties-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmProperties.osm_type","title":"osm_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>osm_type: Literal[\"node\", \"way\", \"area\"] = Field(\n    ..., description=\"osm object type: node, way, or area\"\n)\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSource","title":"OsmHutSource","text":"<p>Methods:</p> <ul> <li> <code>__str__</code>             \u2013              </li> <li> <code>show</code>             \u2013              <p>Returns a formatted string with the hut information which can be printed.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> <li> <code>location</code>               (<code>LocationEleSchema | None</code>)           \u2013            </li> <li> <code>source_id</code>               (<code>str</code>)           \u2013            </li> <li> <code>source_data</code>               (<code>TSourceData_co | None</code>)           \u2013            </li> <li> <code>source_properties</code>               (<code>TProperties_co | None</code>)           \u2013            </li> <li> <code>created</code>               (<code>datetime</code>)           \u2013            </li> <li> <code>source_properties_schema</code>               (<code>dict</code>)           \u2013            <p>Returns JSON schema for the 'source_properties' fields.</p> </li> <li> <code>version</code>               (<code>int</code>)           \u2013            </li> <li> <code>source_name</code>               (<code>str</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSource-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSource.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(coerce_numbers_to_str=True)\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSource.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = Field(..., description='Original hut name.')\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSource.location","title":"location  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>location: LocationEleSchema | None = Field(\n    None, description=\"Location of the hut.\"\n)\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSource.source_id","title":"source_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_id: str = Field(\n    ..., description=\"Originial source id of the hut.\"\n)\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSource.source_data","title":"source_data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_data: TSourceData_co | None = Field(\n    None, description=\"Source data for this hut.\"\n)\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSource.source_properties","title":"source_properties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_properties: TProperties_co | None = Field(\n    None, description=\"Additinal source data properties.\"\n)\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSource.created","title":"created  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created: datetime = Field(\n    default_factory=now,\n    description=\"Version of the service when this entry was created.\",\n)\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSource.source_properties_schema","title":"source_properties_schema  <code>property</code>","text":"<pre><code>source_properties_schema: dict\n</code></pre> <p>Returns JSON schema for the 'source_properties' fields.</p> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>JSON schema.</p> </li> </ul>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSource.version","title":"version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>version: int = 0\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSource.source_name","title":"source_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_name: str = 'osm'\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSource-functions","title":"Functions","text":""},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSource.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSource.show","title":"show","text":"<pre><code>show(\n    source_id: bool = True,\n    location: bool = True,\n    elevation: bool = True,\n    source_name: bool = True,\n    version: bool = False,\n    created: bool = False,\n) -&gt; str\n</code></pre> <p>Returns a formatted string with the hut information which can be printed.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>Formatted string.</p> </li> </ul>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSource.show(source_id)","title":"<code>source_id</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show source ID.</p>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSource.show(location)","title":"<code>location</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show location.</p>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSource.show(elevation)","title":"<code>elevation</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show elevation.</p>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSource.show(source_name)","title":"<code>source_name</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show source name.</p>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSource.show(version)","title":"<code>version</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Show verions.</p>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHutSource.show(created)","title":"<code>created</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Show created date.</p>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert","title":"OsmHut0Convert","text":"<p>Classes:</p> <ul> <li> <code>FieldNotImplementedError</code>           \u2013            <p>Field is not implemented.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get_hut</code>             \u2013              <p>Convert to hut.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>source_data</code>               (<code>TSourceData</code>)           \u2013            </li> <li> <code>slug</code>               (<code>str</code>)           \u2013            </li> <li> <code>source</code>               (<code>SourceSchema | None</code>)           \u2013            </li> <li> <code>author</code>               (<code>AuthorSchema | None</code>)           \u2013            </li> <li> <code>location</code>               (<code>LocationEleSchema</code>)           \u2013            </li> <li> <code>notes</code>               (<code>list[TranslationSchema]</code>)           \u2013            </li> <li> <code>country_code</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>open_monthly</code>               (<code>OpenMonthlySchema</code>)           \u2013            </li> <li> <code>include_photos</code>               (<code>bool</code>)           \u2013            </li> <li> <code>name</code>               (<code>TranslationSchema</code>)           \u2013            </li> <li> <code>source_name</code>               (<code>str</code>)           \u2013            </li> <li> <code>description</code>               (<code>TranslationSchema</code>)           \u2013            </li> <li> <code>owner</code>               (<code>OwnerSchema | None</code>)           \u2013            </li> <li> <code>url</code>               (<code>str</code>)           \u2013            </li> <li> <code>contacts</code>               (<code>list[ContactSchema]</code>)           \u2013            </li> <li> <code>comment</code>               (<code>str</code>)           \u2013            </li> <li> <code>capacity</code>               (<code>CapacitySchema</code>)           \u2013            </li> <li> <code>hut_type</code>               (<code>HutTypeSchema</code>)           \u2013            </li> <li> <code>wikidata_entity</code>               (<code>None</code>)           \u2013            </li> <li> <code>photos</code>               (<code>list[PhotoSchema]</code>)           \u2013            <p>Not supported for osm data, use wikidata isntead which are based on the osm data.</p> </li> <li> <code>is_active</code>               (<code>bool</code>)           \u2013            </li> <li> <code>is_public</code>               (<code>bool</code>)           \u2013            </li> <li> <code>extras</code>               (<code>dict[str, Any]</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.source_data","title":"source_data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_data: TSourceData = Field(..., exclude=True)\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.slug","title":"slug  <code>property</code>","text":"<pre><code>slug: str\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.source","title":"source  <code>property</code>","text":"<pre><code>source: SourceSchema | None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.author","title":"author  <code>property</code>","text":"<pre><code>author: AuthorSchema | None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.location","title":"location  <code>property</code>","text":"<pre><code>location: LocationEleSchema\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.notes","title":"notes  <code>property</code>","text":"<pre><code>notes: list[TranslationSchema]\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.country_code","title":"country_code  <code>property</code>","text":"<pre><code>country_code: str | None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.open_monthly","title":"open_monthly  <code>property</code>","text":"<pre><code>open_monthly: OpenMonthlySchema\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.include_photos","title":"include_photos  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>include_photos: bool = False\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.name","title":"name  <code>property</code>","text":"<pre><code>name: TranslationSchema\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.source_name","title":"source_name  <code>property</code>","text":"<pre><code>source_name: str\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.description","title":"description  <code>property</code>","text":"<pre><code>description: TranslationSchema\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.owner","title":"owner  <code>property</code>","text":"<pre><code>owner: OwnerSchema | None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.url","title":"url  <code>property</code>","text":"<pre><code>url: str\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.contacts","title":"contacts  <code>property</code>","text":"<pre><code>contacts: list[ContactSchema]\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.comment","title":"comment  <code>property</code>","text":"<pre><code>comment: str\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.capacity","title":"capacity  <code>property</code>","text":"<pre><code>capacity: CapacitySchema\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.hut_type","title":"hut_type  <code>property</code>","text":"<pre><code>hut_type: HutTypeSchema\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.wikidata_entity","title":"wikidata_entity  <code>property</code>","text":"<pre><code>wikidata_entity: None\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.photos","title":"photos  <code>property</code>","text":"<pre><code>photos: list[PhotoSchema]\n</code></pre> <p>Not supported for osm data, use wikidata isntead which are based on the osm data.</p>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.is_active","title":"is_active  <code>property</code>","text":"<pre><code>is_active: bool\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.is_public","title":"is_public  <code>property</code>","text":"<pre><code>is_public: bool\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.extras","title":"extras  <code>property</code>","text":"<pre><code>extras: dict[str, Any]\n</code></pre>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert-classes","title":"Classes","text":""},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.FieldNotImplementedError","title":"FieldNotImplementedError","text":"<pre><code>FieldNotImplementedError(\n    obj: BaseHutConverterSchema, field: str\n)\n</code></pre> <p>Field is not implemented.</p> <p>Parameters:</p>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.FieldNotImplementedError(obj)","title":"<code>obj</code>","text":"(<code>BaseHutConverterSchema</code>)           \u2013            <p>Current object.</p>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.FieldNotImplementedError(field)","title":"<code>field</code>","text":"(<code>str</code>)           \u2013            <p>Field which is not implementd.</p>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.FieldNotImplementedError-functions","title":"Functions","text":""},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert-functions","title":"Functions","text":""},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema.OsmHut0Convert.get_hut","title":"get_hut","text":"<pre><code>get_hut() -&gt; HutSchema\n</code></pre> <p>Convert to hut.</p> <p>Returns:</p> <ul> <li> <code>HutSchema</code>           \u2013            <p>Converted hut.</p> </li> </ul>"},{"location":"reference/hut_services/osm/schema/#hut_services.osm.schema-functions","title":"Functions","text":""},{"location":"reference/hut_services/osm/service/","title":"service","text":""},{"location":"reference/hut_services/osm/service/#hut_services.osm.service","title":"service","text":"<p>Classes:</p> <ul> <li> <code>OsmService</code>           \u2013            <p>Service to get huts from</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>logger</code>           \u2013            </li> <li> <code>limit</code>           \u2013            </li> <li> <code>wikidata_photos</code>           \u2013            </li> <li> <code>osm_service</code>           \u2013            </li> <li> <code>huts</code>           \u2013            </li> <li> <code>hut</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger(__name__)\n</code></pre>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.limit","title":"limit  <code>module-attribute</code>","text":"<pre><code>limit = 10\n</code></pre>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.wikidata_photos","title":"wikidata_photos  <code>module-attribute</code>","text":"<pre><code>wikidata_photos = True\n</code></pre>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.osm_service","title":"osm_service  <code>module-attribute</code>","text":"<pre><code>osm_service = OsmService()\n</code></pre>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.huts","title":"huts  <code>module-attribute</code>","text":"<pre><code>huts = get_huts_from_source(limit=limit)\n</code></pre>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.hut","title":"hut  <code>module-attribute</code>","text":"<pre><code>hut = convert(model_dump(by_alias=True))\n</code></pre>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service-classes","title":"Classes","text":""},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.OsmService","title":"OsmService","text":"<pre><code>OsmService(\n    request_url: str = \"https://overpass.osm.ch/api/\",\n)\n</code></pre> <p>Service to get huts from Open Street Map with overpass api.</p> Note <p>The methods are descriebed in <code>BaseService</code>.</p> <p>Classes:</p> <ul> <li> <code>MethodNotImplementedError</code>           \u2013            <p>Method is not implemented exception.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>clear_all_cache</code>             \u2013              <p>Clears the cache of all services!</p> </li> <li> <code>get_huts</code>             \u2013              <p>Get all huts form source and converts them.</p> </li> <li> <code>get_bookings</code>             \u2013              <p>Get bookings for a list of huts.</p> </li> <li> <code>get_huts_from_source</code>             \u2013              </li> <li> <code>convert</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>support_bbox</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_limit</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_offset</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_convert</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_booking</code>               (<code>bool</code>)           \u2013            </li> <li> <code>request_url</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.OsmService-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.OsmService.support_bbox","title":"support_bbox  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_bbox: bool = support_bbox\n</code></pre>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.OsmService.support_limit","title":"support_limit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_limit: bool = support_limit\n</code></pre>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.OsmService.support_offset","title":"support_offset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_offset: bool = support_offset\n</code></pre>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.OsmService.support_convert","title":"support_convert  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_convert: bool = support_convert\n</code></pre>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.OsmService.support_booking","title":"support_booking  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_booking: bool = support_booking\n</code></pre>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.OsmService.request_url","title":"request_url  <code>instance-attribute</code>","text":"<pre><code>request_url = request_url\n</code></pre>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.OsmService-classes","title":"Classes","text":""},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.OsmService.MethodNotImplementedError","title":"MethodNotImplementedError","text":"<pre><code>MethodNotImplementedError(obj: BaseService, method: str)\n</code></pre> <p>Method is not implemented exception.</p> <p>Parameters:</p>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.OsmService.MethodNotImplementedError(obj)","title":"<code>obj</code>","text":"(<code>BaseService</code>)           \u2013            <p>Service object (e.g. <code>MyService</code>).</p>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.OsmService.MethodNotImplementedError(method)","title":"<code>method</code>","text":"(<code>str</code>)           \u2013            <p>Method which is not implemented.</p>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.OsmService.MethodNotImplementedError-functions","title":"Functions","text":""},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.OsmService-functions","title":"Functions","text":""},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.OsmService.clear_all_cache","title":"clear_all_cache  <code>classmethod</code>","text":"<pre><code>clear_all_cache() -&gt; None\n</code></pre> <p>Clears the cache of all services!</p>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.OsmService.get_huts","title":"get_huts","text":"<pre><code>get_huts(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    include_photos: bool = True,\n    **kwargs: Any,\n) -&gt; list[HutSchema]\n</code></pre> <p>Get all huts form source and converts them. Calls <code>get_huts_from_source()</code> and <code>convert()</code>.</p> <p>Returns:</p> <ul> <li> <code>list[HutSchema]</code>           \u2013            <p>Converted huts from source.</p> </li> </ul>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.OsmService.get_bookings","title":"get_bookings","text":"<pre><code>get_bookings(\n    date: datetime | date | Literal[\"now\"] | None = None,\n    days: int | None = None,\n    source_ids: list[int] | None = None,\n    lang: str = \"de\",\n) -&gt; dict[int, HutBookingsSchema]\n</code></pre> <p>Get bookings for a list of huts.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[int, HutBookingsSchema]</code>           \u2013            <p>A dictionary with the bookings (key = soruce id).</p> </li> </ul>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.OsmService.get_bookings(date)","title":"<code>date</code>","text":"(<code>datetime | date | Literal['now'] | None</code>, default:                   <code>None</code> )           \u2013            <p>Start daye for the bookings</p>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.OsmService.get_bookings(days)","title":"<code>days</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Duration in days</p>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.OsmService.get_bookings(source_ids)","title":"<code>source_ids</code>","text":"(<code>list[int] | None</code>, default:                   <code>None</code> )           \u2013            <p>A list of ids to return (source id, not the hut id), if set to <code>None</code> all are returned</p>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.OsmService.get_huts_from_source","title":"get_huts_from_source","text":"<pre><code>get_huts_from_source(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    **kwargs: dict,\n) -&gt; list[OsmHutSource]\n</code></pre>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service.OsmService.convert","title":"convert","text":"<pre><code>convert(\n    src: Mapping | Any, include_photos: bool = True\n) -&gt; HutSchema\n</code></pre>"},{"location":"reference/hut_services/osm/service/#hut_services.osm.service-functions","title":"Functions","text":""},{"location":"reference/hut_services/refuges_info/","title":"refuges_info","text":""},{"location":"reference/hut_services/refuges_info/#hut_services.refuges_info","title":"refuges_info","text":"<p>Modules:</p> <ul> <li> <code>coordinates</code>           \u2013            </li> <li> <code>exceptions</code>           \u2013            </li> <li> <code>massif</code>           \u2013            </li> <li> <code>schema</code>           \u2013            </li> <li> <code>service</code>           \u2013            </li> <li> <code>utils</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>RefugesInfoService</code>           \u2013            <p>Service to get huts from</p> </li> </ul>"},{"location":"reference/hut_services/refuges_info/#hut_services.refuges_info-classes","title":"Classes","text":""},{"location":"reference/hut_services/refuges_info/#hut_services.refuges_info.RefugesInfoService","title":"RefugesInfoService","text":"<pre><code>RefugesInfoService(\n    request_url: str = \"https://www.refuges.info/api\",\n)\n</code></pre> <p>Service to get huts from refuges.info with its api.</p> Note <p>The methods are descriebed in <code>BaseService</code>.</p> <p>Classes:</p> <ul> <li> <code>MethodNotImplementedError</code>           \u2013            <p>Method is not implemented exception.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>clear_all_cache</code>             \u2013              <p>Clears the cache of all services!</p> </li> <li> <code>get_huts</code>             \u2013              <p>Get all huts form source and converts them.</p> </li> <li> <code>get_bookings</code>             \u2013              <p>Get bookings for a list of huts.</p> </li> <li> <code>get_huts_from_source</code>             \u2013              </li> <li> <code>convert</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>support_bbox</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_limit</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_offset</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_convert</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_booking</code>               (<code>bool</code>)           \u2013            </li> <li> <code>request_url</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/refuges_info/#hut_services.refuges_info.RefugesInfoService-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/refuges_info/#hut_services.refuges_info.RefugesInfoService.support_bbox","title":"support_bbox  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_bbox: bool = support_bbox\n</code></pre>"},{"location":"reference/hut_services/refuges_info/#hut_services.refuges_info.RefugesInfoService.support_limit","title":"support_limit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_limit: bool = support_limit\n</code></pre>"},{"location":"reference/hut_services/refuges_info/#hut_services.refuges_info.RefugesInfoService.support_offset","title":"support_offset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_offset: bool = support_offset\n</code></pre>"},{"location":"reference/hut_services/refuges_info/#hut_services.refuges_info.RefugesInfoService.support_convert","title":"support_convert  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_convert: bool = support_convert\n</code></pre>"},{"location":"reference/hut_services/refuges_info/#hut_services.refuges_info.RefugesInfoService.support_booking","title":"support_booking  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_booking: bool = support_booking\n</code></pre>"},{"location":"reference/hut_services/refuges_info/#hut_services.refuges_info.RefugesInfoService.request_url","title":"request_url  <code>instance-attribute</code>","text":"<pre><code>request_url = request_url\n</code></pre>"},{"location":"reference/hut_services/refuges_info/#hut_services.refuges_info.RefugesInfoService-classes","title":"Classes","text":""},{"location":"reference/hut_services/refuges_info/#hut_services.refuges_info.RefugesInfoService.MethodNotImplementedError","title":"MethodNotImplementedError","text":"<pre><code>MethodNotImplementedError(obj: BaseService, method: str)\n</code></pre> <p>Method is not implemented exception.</p> <p>Parameters:</p>"},{"location":"reference/hut_services/refuges_info/#hut_services.refuges_info.RefugesInfoService.MethodNotImplementedError(obj)","title":"<code>obj</code>","text":"(<code>BaseService</code>)           \u2013            <p>Service object (e.g. <code>MyService</code>).</p>"},{"location":"reference/hut_services/refuges_info/#hut_services.refuges_info.RefugesInfoService.MethodNotImplementedError(method)","title":"<code>method</code>","text":"(<code>str</code>)           \u2013            <p>Method which is not implemented.</p>"},{"location":"reference/hut_services/refuges_info/#hut_services.refuges_info.RefugesInfoService.MethodNotImplementedError-functions","title":"Functions","text":""},{"location":"reference/hut_services/refuges_info/#hut_services.refuges_info.RefugesInfoService-functions","title":"Functions","text":""},{"location":"reference/hut_services/refuges_info/#hut_services.refuges_info.RefugesInfoService.clear_all_cache","title":"clear_all_cache  <code>classmethod</code>","text":"<pre><code>clear_all_cache() -&gt; None\n</code></pre> <p>Clears the cache of all services!</p>"},{"location":"reference/hut_services/refuges_info/#hut_services.refuges_info.RefugesInfoService.get_huts","title":"get_huts","text":"<pre><code>get_huts(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    include_photos: bool = True,\n    **kwargs: Any,\n) -&gt; list[HutSchema]\n</code></pre> <p>Get all huts form source and converts them. Calls <code>get_huts_from_source()</code> and <code>convert()</code>.</p> <p>Returns:</p> <ul> <li> <code>list[HutSchema]</code>           \u2013            <p>Converted huts from source.</p> </li> </ul>"},{"location":"reference/hut_services/refuges_info/#hut_services.refuges_info.RefugesInfoService.get_bookings","title":"get_bookings","text":"<pre><code>get_bookings(\n    date: datetime | date | Literal[\"now\"] | None = None,\n    days: int | None = None,\n    source_ids: list[int] | None = None,\n    lang: str = \"de\",\n) -&gt; dict[int, HutBookingsSchema]\n</code></pre> <p>Get bookings for a list of huts.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[int, HutBookingsSchema]</code>           \u2013            <p>A dictionary with the bookings (key = soruce id).</p> </li> </ul>"},{"location":"reference/hut_services/refuges_info/#hut_services.refuges_info.RefugesInfoService.get_bookings(date)","title":"<code>date</code>","text":"(<code>datetime | date | Literal['now'] | None</code>, default:                   <code>None</code> )           \u2013            <p>Start daye for the bookings</p>"},{"location":"reference/hut_services/refuges_info/#hut_services.refuges_info.RefugesInfoService.get_bookings(days)","title":"<code>days</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Duration in days</p>"},{"location":"reference/hut_services/refuges_info/#hut_services.refuges_info.RefugesInfoService.get_bookings(source_ids)","title":"<code>source_ids</code>","text":"(<code>list[int] | None</code>, default:                   <code>None</code> )           \u2013            <p>A list of ids to return (source id, not the hut id), if set to <code>None</code> all are returned</p>"},{"location":"reference/hut_services/refuges_info/#hut_services.refuges_info.RefugesInfoService.get_huts_from_source","title":"get_huts_from_source","text":"<pre><code>get_huts_from_source(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    **kwargs: Any,\n) -&gt; list[RefugesInfoHutSource]\n</code></pre>"},{"location":"reference/hut_services/refuges_info/#hut_services.refuges_info.RefugesInfoService.convert","title":"convert","text":"<pre><code>convert(\n    src: Mapping | Any, include_photos: bool = True\n) -&gt; HutSchema\n</code></pre>"},{"location":"reference/hut_services/refuges_info/coordinates/","title":"coordinates","text":""},{"location":"reference/hut_services/refuges_info/coordinates/#hut_services.refuges_info.coordinates","title":"coordinates","text":"<p>Attributes:</p> <ul> <li> <code>CORRECTIONS</code>               (<code>dict[int, tuple[float, float]]</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/refuges_info/coordinates/#hut_services.refuges_info.coordinates-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/refuges_info/coordinates/#hut_services.refuges_info.coordinates.CORRECTIONS","title":"CORRECTIONS  <code>module-attribute</code>","text":"<pre><code>CORRECTIONS: dict[int, tuple[float, float]] = {\n    2414: (46.52605, 8.17309),\n    2980: (46.383, 7.46782),\n    3418: (46.48304, 7.1202),\n    403: (46.30683, 6.74356),\n    3605: (46.47469, 6.9107),\n    419: (46.33056, 6.76587),\n    2265: (45.9863, 7.63479),\n    5170: (46.2174989, 8.4489458),\n    2336: (45.93388, 7.70813),\n    2463: (46.1554, 7.27787),\n    239: (45.89486, 6.98097),\n    2382: (46.13942, 7.98927),\n    2464: (46.07422, 7.86581),\n    3638: (46.05932, 7.06211),\n    2890: (46.02005, 7.0112),\n    2473: (46.14465, 6.97053),\n}\n</code></pre>"},{"location":"reference/hut_services/refuges_info/exceptions/","title":"exceptions","text":""},{"location":"reference/hut_services/refuges_info/exceptions/#hut_services.refuges_info.exceptions","title":"exceptions","text":""},{"location":"reference/hut_services/refuges_info/massif/","title":"massif","text":""},{"location":"reference/hut_services/refuges_info/massif/#hut_services.refuges_info.massif","title":"massif","text":"<p>Attributes:</p> <ul> <li> <code>MASSIF_ALPES</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/refuges_info/massif/#hut_services.refuges_info.massif-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/refuges_info/massif/#hut_services.refuges_info.massif.MASSIF_ALPES","title":"MASSIF_ALPES  <code>module-attribute</code>","text":"<pre><code>MASSIF_ALPES = (\n    43,\n    12,\n    427,\n    404,\n    339,\n    407,\n    405,\n    45,\n    3314,\n    5070,\n    14,\n    11,\n    7,\n    342,\n    3,\n    49,\n    425,\n    17,\n    20,\n    2,\n    15,\n    29,\n    414,\n    18,\n    430,\n    422,\n    16,\n    343,\n    412,\n    431,\n    5073,\n    338,\n    6,\n    25,\n    8,\n    26,\n    5071,\n    44,\n    413,\n    426,\n    5068,\n    42,\n    5130,\n    428,\n    411,\n    344,\n    22,\n    408,\n    429,\n    5081,\n    432,\n    423,\n    406,\n    19,\n    433,\n    52,\n    5069,\n    24,\n    424,\n    9,\n    4,\n    421,\n)\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/","title":"schema","text":""},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema","title":"schema","text":"<p>Classes:</p> <ul> <li> <code>HutTypeRefugesEnum</code>           \u2013            </li> <li> <code>RefugesInfoProperties</code>           \u2013            <p>Properties save together with the source data.</p> </li> <li> <code>RefugesInfoFeature</code>           \u2013            <p>RefugesInfo Feature Model with required properties and geometry.</p> </li> <li> <code>RefugesInfoFeatureCollection</code>           \u2013            <p>Used to get FeatureCollection, not returned by the service.</p> </li> <li> <code>RefugesInfoHutSource</code>           \u2013            <p>Data from refuges.info database.</p> </li> <li> <code>RefugesInfoHut0Convert</code>           \u2013            </li> </ul> <p>Attributes:</p> <ul> <li> <code>logger</code>           \u2013            </li> <li> <code>REFUGES_HUT_TYPES</code>               (<code>dict[int, HutTypeRefugesEnum]</code>)           \u2013            </li> <li> <code>WODORE_HUT_TYPES</code>               (<code>dict[int, HutTypeEnum]</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger(__name__)\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.REFUGES_HUT_TYPES","title":"REFUGES_HUT_TYPES  <code>module-attribute</code>","text":"<pre><code>REFUGES_HUT_TYPES: dict[int, HutTypeRefugesEnum] = {\n    7: cabane_non_gardee,\n    10: refuge_garde,\n    9: gite_d_etape,\n    28: batiment_en_montagne,\n}\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.WODORE_HUT_TYPES","title":"WODORE_HUT_TYPES  <code>module-attribute</code>","text":"<pre><code>WODORE_HUT_TYPES: dict[int, HutTypeEnum] = {\n    7: selfhut,\n    10: hut,\n    9: hut,\n    28: bhotel,\n}\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema-classes","title":"Classes","text":""},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.HutTypeRefugesEnum","title":"HutTypeRefugesEnum","text":"<p>Attributes:</p> <ul> <li> <code>missing</code>           \u2013            </li> <li> <code>cabane_non_gardee</code>           \u2013            </li> <li> <code>refuge_garde</code>           \u2013            </li> <li> <code>gite_d_etape</code>           \u2013            </li> <li> <code>batiment_en_montagne</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.HutTypeRefugesEnum-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.HutTypeRefugesEnum.missing","title":"missing  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>missing = 'missing'\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.HutTypeRefugesEnum.cabane_non_gardee","title":"cabane_non_gardee  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>cabane_non_gardee = 'cabane-non-gardee'\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.HutTypeRefugesEnum.refuge_garde","title":"refuge_garde  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>refuge_garde = 'refuge-garde'\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.HutTypeRefugesEnum.gite_d_etape","title":"gite_d_etape  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>gite_d_etape = 'gite-d-etape'\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.HutTypeRefugesEnum.batiment_en_montagne","title":"batiment_en_montagne  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>batiment_en_montagne = 'batiment-en-montagne'\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoProperties","title":"RefugesInfoProperties","text":"<p>Properties save together with the source data.</p> <p>Attributes:</p> <ul> <li> <code>slug</code>               (<code>str</code>)           \u2013            </li> <li> <code>hut_type</code>               (<code>HutTypeRefugesEnum</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoProperties-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoProperties.slug","title":"slug  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>slug: str = Field(\n    ..., description=\"hut slug by refuges.info\"\n)\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoProperties.hut_type","title":"hut_type  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>hut_type: HutTypeRefugesEnum = Field(\n    ..., description=\"hut type by refuges.info.\"\n)\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoFeature","title":"RefugesInfoFeature","text":"<p>RefugesInfo Feature Model with required properties and geometry.</p> <p>Methods:</p> <ul> <li> <code>get_id</code>             \u2013              </li> <li> <code>get_name</code>             \u2013              </li> <li> <code>get_location</code>             \u2013              </li> <li> <code>get_properties</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>geometry</code>               (<code>Point</code>)           \u2013            </li> <li> <code>properties</code>               (<code>_RefugesInfoFeatureProperties</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoFeature-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoFeature.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoFeature.geometry","title":"geometry  <code>instance-attribute</code>","text":"<pre><code>geometry: Point\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoFeature.properties","title":"properties  <code>instance-attribute</code>","text":"<pre><code>properties: _RefugesInfoFeatureProperties\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoFeature-functions","title":"Functions","text":""},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoFeature.get_id","title":"get_id","text":"<pre><code>get_id() -&gt; str\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoFeature.get_name","title":"get_name","text":"<pre><code>get_name() -&gt; str\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoFeature.get_location","title":"get_location","text":"<pre><code>get_location() -&gt; LocationEleSchema\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoFeature.get_properties","title":"get_properties","text":"<pre><code>get_properties() -&gt; RefugesInfoProperties\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoFeatureCollection","title":"RefugesInfoFeatureCollection","text":"<p>Used to get FeatureCollection, not returned by the service.</p> <p>Attributes:</p> <ul> <li> <code>generator</code>               (<code>str</code>)           \u2013            </li> <li> <code>copyright_by</code>               (<code>str</code>)           \u2013            </li> <li> <code>timestamp</code>               (<code>str</code>)           \u2013            </li> <li> <code>size</code>               (<code>str</code>)           \u2013            </li> <li> <code>features</code>               (<code>list[RefugesInfoFeature]</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoFeatureCollection-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoFeatureCollection.generator","title":"generator  <code>instance-attribute</code>","text":"<pre><code>generator: str\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoFeatureCollection.copyright_by","title":"copyright_by  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>copyright_by: str = Field(..., alias='copyright')\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoFeatureCollection.timestamp","title":"timestamp  <code>instance-attribute</code>","text":"<pre><code>timestamp: str\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoFeatureCollection.size","title":"size  <code>instance-attribute</code>","text":"<pre><code>size: str\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoFeatureCollection.features","title":"features  <code>instance-attribute</code>","text":"<pre><code>features: list[RefugesInfoFeature]\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHutSource","title":"RefugesInfoHutSource","text":"<p>Data from refuges.info database.</p> <p>Methods:</p> <ul> <li> <code>__str__</code>             \u2013              </li> <li> <code>show</code>             \u2013              <p>Returns a formatted string with the hut information which can be printed.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> <li> <code>location</code>               (<code>LocationEleSchema | None</code>)           \u2013            </li> <li> <code>source_id</code>               (<code>str</code>)           \u2013            </li> <li> <code>source_data</code>               (<code>TSourceData_co | None</code>)           \u2013            </li> <li> <code>source_properties</code>               (<code>TProperties_co | None</code>)           \u2013            </li> <li> <code>version</code>               (<code>int</code>)           \u2013            </li> <li> <code>created</code>               (<code>datetime</code>)           \u2013            </li> <li> <code>source_properties_schema</code>               (<code>dict</code>)           \u2013            <p>Returns JSON schema for the 'source_properties' fields.</p> </li> <li> <code>source_name</code>               (<code>str</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHutSource-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHutSource.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(coerce_numbers_to_str=True)\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHutSource.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = Field(..., description='Original hut name.')\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHutSource.location","title":"location  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>location: LocationEleSchema | None = Field(\n    None, description=\"Location of the hut.\"\n)\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHutSource.source_id","title":"source_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_id: str = Field(\n    ..., description=\"Originial source id of the hut.\"\n)\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHutSource.source_data","title":"source_data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_data: TSourceData_co | None = Field(\n    None, description=\"Source data for this hut.\"\n)\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHutSource.source_properties","title":"source_properties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_properties: TProperties_co | None = Field(\n    None, description=\"Additinal source data properties.\"\n)\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHutSource.version","title":"version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>version: int = Field(\n    default=0,\n    description=\"Version of the service when this entry was created.\",\n)\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHutSource.created","title":"created  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created: datetime = Field(\n    default_factory=now,\n    description=\"Version of the service when this entry was created.\",\n)\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHutSource.source_properties_schema","title":"source_properties_schema  <code>property</code>","text":"<pre><code>source_properties_schema: dict\n</code></pre> <p>Returns JSON schema for the 'source_properties' fields.</p> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>JSON schema.</p> </li> </ul>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHutSource.source_name","title":"source_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_name: str = 'refuges'\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHutSource-functions","title":"Functions","text":""},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHutSource.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHutSource.show","title":"show","text":"<pre><code>show(\n    source_id: bool = True,\n    location: bool = True,\n    elevation: bool = True,\n    source_name: bool = True,\n    version: bool = False,\n    created: bool = False,\n) -&gt; str\n</code></pre> <p>Returns a formatted string with the hut information which can be printed.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>Formatted string.</p> </li> </ul>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHutSource.show(source_id)","title":"<code>source_id</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show source ID.</p>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHutSource.show(location)","title":"<code>location</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show location.</p>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHutSource.show(elevation)","title":"<code>elevation</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show elevation.</p>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHutSource.show(source_name)","title":"<code>source_name</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show source name.</p>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHutSource.show(version)","title":"<code>version</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Show verions.</p>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHutSource.show(created)","title":"<code>created</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Show created date.</p>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert","title":"RefugesInfoHut0Convert","text":"<p>Classes:</p> <ul> <li> <code>FieldNotImplementedError</code>           \u2013            <p>Field is not implemented.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get_hut</code>             \u2013              <p>Convert to hut.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>source_data</code>               (<code>TSourceData</code>)           \u2013            </li> <li> <code>include_photos</code>               (<code>bool</code>)           \u2013            </li> <li> <code>slug</code>               (<code>str</code>)           \u2013            </li> <li> <code>location</code>               (<code>LocationEleSchema</code>)           \u2013            </li> <li> <code>contacts</code>               (<code>list[ContactSchema]</code>)           \u2013            </li> <li> <code>country_code</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>comment</code>               (<code>str</code>)           \u2013            </li> <li> <code>open_monthly</code>               (<code>OpenMonthlySchema</code>)           \u2013            </li> <li> <code>is_active</code>               (<code>bool</code>)           \u2013            </li> <li> <code>extras</code>               (<code>dict[str, Any]</code>)           \u2013            </li> <li> <code>name</code>               (<code>TranslationSchema</code>)           \u2013            </li> <li> <code>source_name</code>               (<code>str</code>)           \u2013            </li> <li> <code>description</code>               (<code>TranslationSchema</code>)           \u2013            </li> <li> <code>author</code>               (<code>AuthorSchema | None</code>)           \u2013            </li> <li> <code>source</code>               (<code>SourceSchema | None</code>)           \u2013            </li> <li> <code>license</code>               (<code>LicenseSchema | None</code>)           \u2013            </li> <li> <code>notes</code>               (<code>list[TranslationSchema]</code>)           \u2013            </li> <li> <code>owner</code>               (<code>OwnerSchema | None</code>)           \u2013            </li> <li> <code>photos</code>               (<code>list[PhotoSchema]</code>)           \u2013            </li> <li> <code>url</code>               (<code>str</code>)           \u2013            </li> <li> <code>capacity</code>               (<code>CapacitySchema</code>)           \u2013            </li> <li> <code>hut_type</code>               (<code>HutTypeSchema</code>)           \u2013            </li> <li> <code>is_public</code>               (<code>bool</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.source_data","title":"source_data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_data: TSourceData = Field(..., exclude=True)\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.include_photos","title":"include_photos  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>include_photos: bool = True\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.slug","title":"slug  <code>property</code>","text":"<pre><code>slug: str\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.location","title":"location  <code>property</code>","text":"<pre><code>location: LocationEleSchema\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.contacts","title":"contacts  <code>property</code>","text":"<pre><code>contacts: list[ContactSchema]\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.country_code","title":"country_code  <code>property</code>","text":"<pre><code>country_code: str | None\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.comment","title":"comment  <code>property</code>","text":"<pre><code>comment: str\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.open_monthly","title":"open_monthly  <code>property</code>","text":"<pre><code>open_monthly: OpenMonthlySchema\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.is_active","title":"is_active  <code>property</code>","text":"<pre><code>is_active: bool\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.extras","title":"extras  <code>property</code>","text":"<pre><code>extras: dict[str, Any]\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.name","title":"name  <code>property</code>","text":"<pre><code>name: TranslationSchema\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.source_name","title":"source_name  <code>property</code>","text":"<pre><code>source_name: str\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.description","title":"description  <code>property</code>","text":"<pre><code>description: TranslationSchema\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.author","title":"author  <code>property</code>","text":"<pre><code>author: AuthorSchema | None\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.source","title":"source  <code>property</code>","text":"<pre><code>source: SourceSchema | None\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.license","title":"license  <code>property</code>","text":"<pre><code>license: LicenseSchema | None\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.notes","title":"notes  <code>property</code>","text":"<pre><code>notes: list[TranslationSchema]\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.owner","title":"owner  <code>property</code>","text":"<pre><code>owner: OwnerSchema | None\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.photos","title":"photos  <code>property</code>","text":"<pre><code>photos: list[PhotoSchema]\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.url","title":"url  <code>property</code>","text":"<pre><code>url: str\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.capacity","title":"capacity  <code>property</code>","text":"<pre><code>capacity: CapacitySchema\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.hut_type","title":"hut_type  <code>property</code>","text":"<pre><code>hut_type: HutTypeSchema\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.is_public","title":"is_public  <code>property</code>","text":"<pre><code>is_public: bool\n</code></pre>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert-classes","title":"Classes","text":""},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.FieldNotImplementedError","title":"FieldNotImplementedError","text":"<pre><code>FieldNotImplementedError(\n    obj: BaseHutConverterSchema, field: str\n)\n</code></pre> <p>Field is not implemented.</p> <p>Parameters:</p>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.FieldNotImplementedError(obj)","title":"<code>obj</code>","text":"(<code>BaseHutConverterSchema</code>)           \u2013            <p>Current object.</p>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.FieldNotImplementedError(field)","title":"<code>field</code>","text":"(<code>str</code>)           \u2013            <p>Field which is not implementd.</p>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.FieldNotImplementedError-functions","title":"Functions","text":""},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert-functions","title":"Functions","text":""},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema.RefugesInfoHut0Convert.get_hut","title":"get_hut","text":"<pre><code>get_hut() -&gt; HutSchema\n</code></pre> <p>Convert to hut.</p> <p>Returns:</p> <ul> <li> <code>HutSchema</code>           \u2013            <p>Converted hut.</p> </li> </ul>"},{"location":"reference/hut_services/refuges_info/schema/#hut_services.refuges_info.schema-functions","title":"Functions","text":""},{"location":"reference/hut_services/refuges_info/service/","title":"service","text":""},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service","title":"service","text":"<p>Classes:</p> <ul> <li> <code>RefugesInfoService</code>           \u2013            <p>Service to get huts from</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>refuges_info_request</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>logger</code>           \u2013            </li> <li> <code>limit</code>           \u2013            </li> <li> <code>include_photos</code>           \u2013            </li> <li> <code>service</code>           \u2013            </li> <li> <code>bbox_ch</code>           \u2013            </li> <li> <code>huts</code>           \u2013            </li> <li> <code>hut</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger(__name__)\n</code></pre>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.limit","title":"limit  <code>module-attribute</code>","text":"<pre><code>limit = 5000\n</code></pre>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.include_photos","title":"include_photos  <code>module-attribute</code>","text":"<pre><code>include_photos = True\n</code></pre>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.service","title":"service  <code>module-attribute</code>","text":"<pre><code>service = RefugesInfoService()\n</code></pre>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.bbox_ch","title":"bbox_ch  <code>module-attribute</code>","text":"<pre><code>bbox_ch = None\n</code></pre>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.huts","title":"huts  <code>module-attribute</code>","text":"<pre><code>huts = get_huts_from_source(limit=limit, bbox=bbox_ch)\n</code></pre>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.hut","title":"hut  <code>module-attribute</code>","text":"<pre><code>hut = convert(h, include_photos=include_photos)\n</code></pre>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service-classes","title":"Classes","text":""},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.RefugesInfoService","title":"RefugesInfoService","text":"<pre><code>RefugesInfoService(\n    request_url: str = \"https://www.refuges.info/api\",\n)\n</code></pre> <p>Service to get huts from refuges.info with its api.</p> Note <p>The methods are descriebed in <code>BaseService</code>.</p> <p>Classes:</p> <ul> <li> <code>MethodNotImplementedError</code>           \u2013            <p>Method is not implemented exception.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>clear_all_cache</code>             \u2013              <p>Clears the cache of all services!</p> </li> <li> <code>get_huts</code>             \u2013              <p>Get all huts form source and converts them.</p> </li> <li> <code>get_bookings</code>             \u2013              <p>Get bookings for a list of huts.</p> </li> <li> <code>get_huts_from_source</code>             \u2013              </li> <li> <code>convert</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>support_bbox</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_limit</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_offset</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_convert</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_booking</code>               (<code>bool</code>)           \u2013            </li> <li> <code>request_url</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.RefugesInfoService-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.RefugesInfoService.support_bbox","title":"support_bbox  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_bbox: bool = support_bbox\n</code></pre>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.RefugesInfoService.support_limit","title":"support_limit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_limit: bool = support_limit\n</code></pre>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.RefugesInfoService.support_offset","title":"support_offset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_offset: bool = support_offset\n</code></pre>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.RefugesInfoService.support_convert","title":"support_convert  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_convert: bool = support_convert\n</code></pre>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.RefugesInfoService.support_booking","title":"support_booking  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_booking: bool = support_booking\n</code></pre>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.RefugesInfoService.request_url","title":"request_url  <code>instance-attribute</code>","text":"<pre><code>request_url = request_url\n</code></pre>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.RefugesInfoService-classes","title":"Classes","text":""},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.RefugesInfoService.MethodNotImplementedError","title":"MethodNotImplementedError","text":"<pre><code>MethodNotImplementedError(obj: BaseService, method: str)\n</code></pre> <p>Method is not implemented exception.</p> <p>Parameters:</p>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.RefugesInfoService.MethodNotImplementedError(obj)","title":"<code>obj</code>","text":"(<code>BaseService</code>)           \u2013            <p>Service object (e.g. <code>MyService</code>).</p>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.RefugesInfoService.MethodNotImplementedError(method)","title":"<code>method</code>","text":"(<code>str</code>)           \u2013            <p>Method which is not implemented.</p>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.RefugesInfoService.MethodNotImplementedError-functions","title":"Functions","text":""},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.RefugesInfoService-functions","title":"Functions","text":""},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.RefugesInfoService.clear_all_cache","title":"clear_all_cache  <code>classmethod</code>","text":"<pre><code>clear_all_cache() -&gt; None\n</code></pre> <p>Clears the cache of all services!</p>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.RefugesInfoService.get_huts","title":"get_huts","text":"<pre><code>get_huts(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    include_photos: bool = True,\n    **kwargs: Any,\n) -&gt; list[HutSchema]\n</code></pre> <p>Get all huts form source and converts them. Calls <code>get_huts_from_source()</code> and <code>convert()</code>.</p> <p>Returns:</p> <ul> <li> <code>list[HutSchema]</code>           \u2013            <p>Converted huts from source.</p> </li> </ul>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.RefugesInfoService.get_bookings","title":"get_bookings","text":"<pre><code>get_bookings(\n    date: datetime | date | Literal[\"now\"] | None = None,\n    days: int | None = None,\n    source_ids: list[int] | None = None,\n    lang: str = \"de\",\n) -&gt; dict[int, HutBookingsSchema]\n</code></pre> <p>Get bookings for a list of huts.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[int, HutBookingsSchema]</code>           \u2013            <p>A dictionary with the bookings (key = soruce id).</p> </li> </ul>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.RefugesInfoService.get_bookings(date)","title":"<code>date</code>","text":"(<code>datetime | date | Literal['now'] | None</code>, default:                   <code>None</code> )           \u2013            <p>Start daye for the bookings</p>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.RefugesInfoService.get_bookings(days)","title":"<code>days</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Duration in days</p>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.RefugesInfoService.get_bookings(source_ids)","title":"<code>source_ids</code>","text":"(<code>list[int] | None</code>, default:                   <code>None</code> )           \u2013            <p>A list of ids to return (source id, not the hut id), if set to <code>None</code> all are returned</p>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.RefugesInfoService.get_huts_from_source","title":"get_huts_from_source","text":"<pre><code>get_huts_from_source(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    **kwargs: Any,\n) -&gt; list[RefugesInfoHutSource]\n</code></pre>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.RefugesInfoService.convert","title":"convert","text":"<pre><code>convert(\n    src: Mapping | Any, include_photos: bool = True\n) -&gt; HutSchema\n</code></pre>"},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service-functions","title":"Functions","text":""},{"location":"reference/hut_services/refuges_info/service/#hut_services.refuges_info.service.refuges_info_request","title":"refuges_info_request","text":"<pre><code>refuges_info_request(\n    url: str,\n    limit: str | int = \"all\",\n    type_points: Sequence[int] = [7, 10, 9, 28],\n    massif: Sequence[int] | None = MASSIF_ALPES,\n    bbox: BBox | None = None,\n    text_format: Literal[\n        \"texte\", \"markdown\", \"html\"\n    ] = \"markdown\",\n    output_format: Literal[\n        \"geojson\", \"xml\", \"csv\"\n    ] = \"geojson\",\n    detail: bool = True,\n    **params: Any,\n) -&gt; RefugesInfoFeatureCollection | Any | bytes\n</code></pre>"},{"location":"reference/hut_services/refuges_info/utils/","title":"utils","text":""},{"location":"reference/hut_services/refuges_info/utils/#hut_services.refuges_info.utils","title":"utils","text":"<p>Functions:</p> <ul> <li> <code>get_original_images</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>logger</code>           \u2013            </li> <li> <code>refuges_lic</code>           \u2013            </li> <li> <code>photos</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/refuges_info/utils/#hut_services.refuges_info.utils-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/refuges_info/utils/#hut_services.refuges_info.utils.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger(__name__)\n</code></pre>"},{"location":"reference/hut_services/refuges_info/utils/#hut_services.refuges_info.utils.refuges_lic","title":"refuges_lic  <code>module-attribute</code>","text":"<pre><code>refuges_lic = LicenseSchema(\n    slug=\"cc-by-sa-2.0\",\n    name=\"CC-BY-SA 2.0\",\n    url=\"https://creativecommons.org/licenses/by-sa/2.0/\",\n)\n</code></pre>"},{"location":"reference/hut_services/refuges_info/utils/#hut_services.refuges_info.utils.photos","title":"photos  <code>module-attribute</code>","text":"<pre><code>photos = get_original_images('9819')\n</code></pre>"},{"location":"reference/hut_services/refuges_info/utils/#hut_services.refuges_info.utils-classes","title":"Classes","text":""},{"location":"reference/hut_services/refuges_info/utils/#hut_services.refuges_info.utils-functions","title":"Functions","text":""},{"location":"reference/hut_services/refuges_info/utils/#hut_services.refuges_info.utils.get_original_images","title":"get_original_images","text":"<pre><code>get_original_images(hut_id: str) -&gt; list[PhotoSchema]\n</code></pre>"},{"location":"reference/hut_services/wikicommons/","title":"wikicommons","text":""},{"location":"reference/hut_services/wikicommons/#hut_services.wikicommons","title":"wikicommons","text":"<p>Modules:</p> <ul> <li> <code>service</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>WikicommonsService</code>           \u2013            <p>Service to get photo from</p> </li> </ul>"},{"location":"reference/hut_services/wikicommons/#hut_services.wikicommons-classes","title":"Classes","text":""},{"location":"reference/hut_services/wikicommons/#hut_services.wikicommons.WikicommonsService","title":"WikicommonsService","text":"<pre><code>WikicommonsService(\n    request_url: str = \"https://magnus-toolserver.toolforge.org/commonsapi.php\",\n    max_dimension: int = 3600,\n)\n</code></pre> <p>Service to get photo from Wikimedia Commons.</p> Note <p>This is only used to get photo information, not to get huts!</p> <p>Methods:</p> <ul> <li> <code>get_photo</code>             \u2013              </li> <li> <code>get_huts_from_source</code>             \u2013              </li> <li> <code>convert</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>request_url</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/wikicommons/#hut_services.wikicommons.WikicommonsService-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/wikicommons/#hut_services.wikicommons.WikicommonsService.request_url","title":"request_url  <code>instance-attribute</code>","text":"<pre><code>request_url = request_url\n</code></pre>"},{"location":"reference/hut_services/wikicommons/#hut_services.wikicommons.WikicommonsService-functions","title":"Functions","text":""},{"location":"reference/hut_services/wikicommons/#hut_services.wikicommons.WikicommonsService.get_photo","title":"get_photo","text":"<pre><code>get_photo(filename: str) -&gt; PhotoSchema\n</code></pre>"},{"location":"reference/hut_services/wikicommons/#hut_services.wikicommons.WikicommonsService.get_huts_from_source","title":"get_huts_from_source","text":"<pre><code>get_huts_from_source(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    **kwargs: dict,\n) -&gt; list\n</code></pre>"},{"location":"reference/hut_services/wikicommons/#hut_services.wikicommons.WikicommonsService.convert","title":"convert","text":"<pre><code>convert(src: Mapping | Any) -&gt; HutSchema\n</code></pre>"},{"location":"reference/hut_services/wikicommons/service/","title":"service","text":""},{"location":"reference/hut_services/wikicommons/service/#hut_services.wikicommons.service","title":"service","text":"<p>Classes:</p> <ul> <li> <code>WikicommonsService</code>           \u2013            <p>Service to get photo from</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_wikicommon_photo_info</code>             \u2013              <p>Fetch image information from Magnus Toolserver API and return structured data using Pydantic.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>logger</code>           \u2013            </li> <li> <code>wikicommons_service</code>           \u2013            </li> <li> <code>file_names</code>           \u2013            </li> <li> <code>image_info</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/wikicommons/service/#hut_services.wikicommons.service-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/wikicommons/service/#hut_services.wikicommons.service.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger(__name__)\n</code></pre>"},{"location":"reference/hut_services/wikicommons/service/#hut_services.wikicommons.service.wikicommons_service","title":"wikicommons_service  <code>module-attribute</code>","text":"<pre><code>wikicommons_service = WikicommonsService()\n</code></pre>"},{"location":"reference/hut_services/wikicommons/service/#hut_services.wikicommons.service.file_names","title":"file_names  <code>module-attribute</code>","text":"<pre><code>file_names = [\n    \"Wildhornhuette.jpg\",\n    \"Lohner hut SAC.jpg\",\n    \"RifugioVallanta.jpg\",\n    \"Refuge d'Ambin.jpeg\",\n]\n</code></pre>"},{"location":"reference/hut_services/wikicommons/service/#hut_services.wikicommons.service.image_info","title":"image_info  <code>module-attribute</code>","text":"<pre><code>image_info = get_photo(file_name)\n</code></pre>"},{"location":"reference/hut_services/wikicommons/service/#hut_services.wikicommons.service-classes","title":"Classes","text":""},{"location":"reference/hut_services/wikicommons/service/#hut_services.wikicommons.service.WikicommonsService","title":"WikicommonsService","text":"<pre><code>WikicommonsService(\n    request_url: str = \"https://magnus-toolserver.toolforge.org/commonsapi.php\",\n    max_dimension: int = 3600,\n)\n</code></pre> <p>Service to get photo from Wikimedia Commons.</p> Note <p>This is only used to get photo information, not to get huts!</p> <p>Methods:</p> <ul> <li> <code>get_photo</code>             \u2013              </li> <li> <code>get_huts_from_source</code>             \u2013              </li> <li> <code>convert</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>request_url</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/wikicommons/service/#hut_services.wikicommons.service.WikicommonsService-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/wikicommons/service/#hut_services.wikicommons.service.WikicommonsService.request_url","title":"request_url  <code>instance-attribute</code>","text":"<pre><code>request_url = request_url\n</code></pre>"},{"location":"reference/hut_services/wikicommons/service/#hut_services.wikicommons.service.WikicommonsService-functions","title":"Functions","text":""},{"location":"reference/hut_services/wikicommons/service/#hut_services.wikicommons.service.WikicommonsService.get_photo","title":"get_photo","text":"<pre><code>get_photo(filename: str) -&gt; PhotoSchema\n</code></pre>"},{"location":"reference/hut_services/wikicommons/service/#hut_services.wikicommons.service.WikicommonsService.get_huts_from_source","title":"get_huts_from_source","text":"<pre><code>get_huts_from_source(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    **kwargs: dict,\n) -&gt; list\n</code></pre>"},{"location":"reference/hut_services/wikicommons/service/#hut_services.wikicommons.service.WikicommonsService.convert","title":"convert","text":"<pre><code>convert(src: Mapping | Any) -&gt; HutSchema\n</code></pre>"},{"location":"reference/hut_services/wikicommons/service/#hut_services.wikicommons.service-functions","title":"Functions","text":""},{"location":"reference/hut_services/wikicommons/service/#hut_services.wikicommons.service.get_wikicommon_photo_info","title":"get_wikicommon_photo_info","text":"<pre><code>get_wikicommon_photo_info(\n    filename: str,\n    api_url: str = \"https://magnus-toolserver.toolforge.org/commonsapi.php\",\n    max_dimension: int = 3000,\n) -&gt; PhotoSchema\n</code></pre> <p>Fetch image information from Magnus Toolserver API and return structured data using Pydantic.</p>"},{"location":"reference/hut_services/wikidata/","title":"wikidata","text":""},{"location":"reference/hut_services/wikidata/#hut_services.wikidata","title":"wikidata","text":"<p>Modules:</p> <ul> <li> <code>schema</code>           \u2013            </li> <li> <code>script</code>           \u2013            </li> <li> <code>service</code>           \u2013            </li> </ul> <p>Classes:</p> <ul> <li> <code>WikidataService</code>           \u2013            <p>Service to get Information from</p> </li> </ul>"},{"location":"reference/hut_services/wikidata/#hut_services.wikidata-classes","title":"Classes","text":""},{"location":"reference/hut_services/wikidata/#hut_services.wikidata.WikidataService","title":"WikidataService","text":"<pre><code>WikidataService(\n    request_url: str = \"https://www.wikidata.org/\",\n)\n</code></pre> <p>Service to get Information from Wikidata with a Python Wikidata client.</p> Note <p>It is not (yet) possible to get huts and convert them.</p> <p>Classes:</p> <ul> <li> <code>MethodNotImplementedError</code>           \u2013            <p>Method is not implemented exception.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>clear_all_cache</code>             \u2013              <p>Clears the cache of all services!</p> </li> <li> <code>get_huts</code>             \u2013              <p>Get all huts form source and converts them.</p> </li> <li> <code>get_bookings</code>             \u2013              <p>Get bookings for a list of huts.</p> </li> <li> <code>get_entity</code>             \u2013              </li> <li> <code>get_huts_from_source</code>             \u2013              </li> <li> <code>convert</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>support_bbox</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_limit</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_offset</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_convert</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_booking</code>               (<code>bool</code>)           \u2013            </li> <li> <code>request_url</code>           \u2013            </li> <li> <code>wikidata_client</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/wikidata/#hut_services.wikidata.WikidataService-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/wikidata/#hut_services.wikidata.WikidataService.support_bbox","title":"support_bbox  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_bbox: bool = support_bbox\n</code></pre>"},{"location":"reference/hut_services/wikidata/#hut_services.wikidata.WikidataService.support_limit","title":"support_limit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_limit: bool = support_limit\n</code></pre>"},{"location":"reference/hut_services/wikidata/#hut_services.wikidata.WikidataService.support_offset","title":"support_offset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_offset: bool = support_offset\n</code></pre>"},{"location":"reference/hut_services/wikidata/#hut_services.wikidata.WikidataService.support_convert","title":"support_convert  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_convert: bool = support_convert\n</code></pre>"},{"location":"reference/hut_services/wikidata/#hut_services.wikidata.WikidataService.support_booking","title":"support_booking  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_booking: bool = support_booking\n</code></pre>"},{"location":"reference/hut_services/wikidata/#hut_services.wikidata.WikidataService.request_url","title":"request_url  <code>instance-attribute</code>","text":"<pre><code>request_url = request_url\n</code></pre>"},{"location":"reference/hut_services/wikidata/#hut_services.wikidata.WikidataService.wikidata_client","title":"wikidata_client  <code>instance-attribute</code>","text":"<pre><code>wikidata_client = Client(base_url=request_url)\n</code></pre>"},{"location":"reference/hut_services/wikidata/#hut_services.wikidata.WikidataService-classes","title":"Classes","text":""},{"location":"reference/hut_services/wikidata/#hut_services.wikidata.WikidataService.MethodNotImplementedError","title":"MethodNotImplementedError","text":"<pre><code>MethodNotImplementedError(obj: BaseService, method: str)\n</code></pre> <p>Method is not implemented exception.</p> <p>Parameters:</p>"},{"location":"reference/hut_services/wikidata/#hut_services.wikidata.WikidataService.MethodNotImplementedError(obj)","title":"<code>obj</code>","text":"(<code>BaseService</code>)           \u2013            <p>Service object (e.g. <code>MyService</code>).</p>"},{"location":"reference/hut_services/wikidata/#hut_services.wikidata.WikidataService.MethodNotImplementedError(method)","title":"<code>method</code>","text":"(<code>str</code>)           \u2013            <p>Method which is not implemented.</p>"},{"location":"reference/hut_services/wikidata/#hut_services.wikidata.WikidataService.MethodNotImplementedError-functions","title":"Functions","text":""},{"location":"reference/hut_services/wikidata/#hut_services.wikidata.WikidataService-functions","title":"Functions","text":""},{"location":"reference/hut_services/wikidata/#hut_services.wikidata.WikidataService.clear_all_cache","title":"clear_all_cache  <code>classmethod</code>","text":"<pre><code>clear_all_cache() -&gt; None\n</code></pre> <p>Clears the cache of all services!</p>"},{"location":"reference/hut_services/wikidata/#hut_services.wikidata.WikidataService.get_huts","title":"get_huts","text":"<pre><code>get_huts(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    include_photos: bool = True,\n    **kwargs: Any,\n) -&gt; list[HutSchema]\n</code></pre> <p>Get all huts form source and converts them. Calls <code>get_huts_from_source()</code> and <code>convert()</code>.</p> <p>Returns:</p> <ul> <li> <code>list[HutSchema]</code>           \u2013            <p>Converted huts from source.</p> </li> </ul>"},{"location":"reference/hut_services/wikidata/#hut_services.wikidata.WikidataService.get_bookings","title":"get_bookings","text":"<pre><code>get_bookings(\n    date: datetime | date | Literal[\"now\"] | None = None,\n    days: int | None = None,\n    source_ids: list[int] | None = None,\n    lang: str = \"de\",\n) -&gt; dict[int, HutBookingsSchema]\n</code></pre> <p>Get bookings for a list of huts.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[int, HutBookingsSchema]</code>           \u2013            <p>A dictionary with the bookings (key = soruce id).</p> </li> </ul>"},{"location":"reference/hut_services/wikidata/#hut_services.wikidata.WikidataService.get_bookings(date)","title":"<code>date</code>","text":"(<code>datetime | date | Literal['now'] | None</code>, default:                   <code>None</code> )           \u2013            <p>Start daye for the bookings</p>"},{"location":"reference/hut_services/wikidata/#hut_services.wikidata.WikidataService.get_bookings(days)","title":"<code>days</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Duration in days</p>"},{"location":"reference/hut_services/wikidata/#hut_services.wikidata.WikidataService.get_bookings(source_ids)","title":"<code>source_ids</code>","text":"(<code>list[int] | None</code>, default:                   <code>None</code> )           \u2013            <p>A list of ids to return (source id, not the hut id), if set to <code>None</code> all are returned</p>"},{"location":"reference/hut_services/wikidata/#hut_services.wikidata.WikidataService.get_entity","title":"get_entity","text":"<pre><code>get_entity(qid: str) -&gt; WikidataEntity\n</code></pre>"},{"location":"reference/hut_services/wikidata/#hut_services.wikidata.WikidataService.get_huts_from_source","title":"get_huts_from_source","text":"<pre><code>get_huts_from_source(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    **kwargs: dict,\n) -&gt; list[WikidataHutSource]\n</code></pre>"},{"location":"reference/hut_services/wikidata/#hut_services.wikidata.WikidataService.convert","title":"convert","text":"<pre><code>convert(\n    src: Mapping | Any, include_photos: bool = True\n) -&gt; HutSchema\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/","title":"schema","text":""},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema","title":"schema","text":"<p>Classes:</p> <ul> <li> <code>WikidataPhotoInfo</code>           \u2013            </li> <li> <code>WikidataPhotoAttributes</code>           \u2013            </li> <li> <code>WikidataPhoto</code>           \u2013            <p>Wikidata photo.</p> </li> <li> <code>WikidataHutSchema</code>           \u2013            <p>Open street map schema.</p> </li> <li> <code>WikidataProperties</code>           \u2013            </li> <li> <code>WikidataHutSource</code>           \u2013            </li> <li> <code>WikidataHut0Convert</code>           \u2013            </li> </ul> <p>Attributes:</p> <ul> <li> <code>logger</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger(__name__)\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema-classes","title":"Classes","text":""},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoInfo","title":"WikidataPhotoInfo","text":"<p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>size</code>               (<code>int</code>)           \u2013            </li> <li> <code>width</code>               (<code>int</code>)           \u2013            </li> <li> <code>height</code>               (<code>int</code>)           \u2013            </li> <li> <code>url</code>               (<code>str</code>)           \u2013            </li> <li> <code>descriptionurl</code>               (<code>str</code>)           \u2013            </li> <li> <code>descriptionshorturl</code>               (<code>str</code>)           \u2013            </li> <li> <code>mime</code>               (<code>str</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoInfo-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoInfo.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoInfo.size","title":"size  <code>instance-attribute</code>","text":"<pre><code>size: int\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoInfo.width","title":"width  <code>instance-attribute</code>","text":"<pre><code>width: int\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoInfo.height","title":"height  <code>instance-attribute</code>","text":"<pre><code>height: int\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoInfo.url","title":"url  <code>instance-attribute</code>","text":"<pre><code>url: str\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoInfo.descriptionurl","title":"descriptionurl  <code>instance-attribute</code>","text":"<pre><code>descriptionurl: str\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoInfo.descriptionshorturl","title":"descriptionshorturl  <code>instance-attribute</code>","text":"<pre><code>descriptionshorturl: str\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoInfo.mime","title":"mime  <code>instance-attribute</code>","text":"<pre><code>mime: str\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoAttributes","title":"WikidataPhotoAttributes","text":"<p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>ns</code>               (<code>int</code>)           \u2013            </li> <li> <code>title</code>               (<code>str</code>)           \u2013            </li> <li> <code>missing</code>               (<code>str</code>)           \u2013            </li> <li> <code>known</code>               (<code>str</code>)           \u2013            </li> <li> <code>imagerepository</code>               (<code>str</code>)           \u2013            </li> <li> <code>imageinfo</code>               (<code>list[WikidataPhotoInfo]</code>)           \u2013            </li> <li> <code>contentmodel</code>               (<code>str</code>)           \u2013            </li> <li> <code>pagelanguage</code>               (<code>str</code>)           \u2013            </li> <li> <code>pagelanguagehtmlcode</code>               (<code>str</code>)           \u2013            </li> <li> <code>pagelanguagedir</code>               (<code>str</code>)           \u2013            </li> <li> <code>fullurl</code>               (<code>str</code>)           \u2013            </li> <li> <code>editurl</code>               (<code>str</code>)           \u2013            </li> <li> <code>canonicalurl</code>               (<code>str</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoAttributes-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoAttributes.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoAttributes.ns","title":"ns  <code>instance-attribute</code>","text":"<pre><code>ns: int\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoAttributes.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoAttributes.missing","title":"missing  <code>instance-attribute</code>","text":"<pre><code>missing: str\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoAttributes.known","title":"known  <code>instance-attribute</code>","text":"<pre><code>known: str\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoAttributes.imagerepository","title":"imagerepository  <code>instance-attribute</code>","text":"<pre><code>imagerepository: str\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoAttributes.imageinfo","title":"imageinfo  <code>instance-attribute</code>","text":"<pre><code>imageinfo: list[WikidataPhotoInfo]\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoAttributes.contentmodel","title":"contentmodel  <code>instance-attribute</code>","text":"<pre><code>contentmodel: str\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoAttributes.pagelanguage","title":"pagelanguage  <code>instance-attribute</code>","text":"<pre><code>pagelanguage: str\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoAttributes.pagelanguagehtmlcode","title":"pagelanguagehtmlcode  <code>instance-attribute</code>","text":"<pre><code>pagelanguagehtmlcode: str\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoAttributes.pagelanguagedir","title":"pagelanguagedir  <code>instance-attribute</code>","text":"<pre><code>pagelanguagedir: str\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoAttributes.fullurl","title":"fullurl  <code>instance-attribute</code>","text":"<pre><code>fullurl: str\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoAttributes.editurl","title":"editurl  <code>instance-attribute</code>","text":"<pre><code>editurl: str\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhotoAttributes.canonicalurl","title":"canonicalurl  <code>instance-attribute</code>","text":"<pre><code>canonicalurl: str\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhoto","title":"WikidataPhoto","text":"<p>Wikidata photo.</p> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>title</code>               (<code>str</code>)           \u2013            </li> <li> <code>attributes</code>               (<code>WikidataPhotoAttributes</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhoto-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhoto.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhoto.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataPhoto.attributes","title":"attributes  <code>instance-attribute</code>","text":"<pre><code>attributes: WikidataPhotoAttributes\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSchema","title":"WikidataHutSchema","text":"<p>Open street map schema.</p> <p>Methods:</p> <ul> <li> <code>get_id</code>             \u2013              <p>Get open street map <code>id</code>.</p> </li> <li> <code>get_name</code>             \u2013              <p>Get open street map hut name.</p> </li> <li> <code>get_location</code>             \u2013              <p>Get open street map location.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>attributes</code>               (<code>dict[str, Any]</code>)           \u2013            </li> <li> <code>photo</code>               (<code>WikidataPhoto | None</code>)           \u2013            </li> <li> <code>wikidata_id</code>               (<code>str</code>)           \u2013            </li> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> <li> <code>lat</code>               (<code>Latitude | None</code>)           \u2013            </li> <li> <code>lon</code>               (<code>Longitude | None</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSchema-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSchema.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(\n    from_attributes=True, extra=\"allow\"\n)\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSchema.attributes","title":"attributes  <code>instance-attribute</code>","text":"<pre><code>attributes: dict[str, Any]\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSchema.photo","title":"photo  <code>instance-attribute</code>","text":"<pre><code>photo: WikidataPhoto | None\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSchema.wikidata_id","title":"wikidata_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>wikidata_id: str = Field(..., alias='id')\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSchema.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSchema.lat","title":"lat  <code>instance-attribute</code>","text":"<pre><code>lat: Latitude | None\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSchema.lon","title":"lon  <code>instance-attribute</code>","text":"<pre><code>lon: Longitude | None\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSchema-functions","title":"Functions","text":""},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSchema.get_id","title":"get_id","text":"<pre><code>get_id() -&gt; str\n</code></pre> <p>Get open street map <code>id</code>.</p>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSchema.get_name","title":"get_name","text":"<pre><code>get_name() -&gt; str\n</code></pre> <p>Get open street map hut name.</p>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSchema.get_location","title":"get_location","text":"<pre><code>get_location() -&gt; LocationEleSchema\n</code></pre> <p>Get open street map location.</p>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataProperties","title":"WikidataProperties","text":""},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSource","title":"WikidataHutSource","text":"<p>Methods:</p> <ul> <li> <code>__str__</code>             \u2013              </li> <li> <code>show</code>             \u2013              <p>Returns a formatted string with the hut information which can be printed.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>model_config</code>           \u2013            </li> <li> <code>name</code>               (<code>str</code>)           \u2013            </li> <li> <code>location</code>               (<code>LocationEleSchema | None</code>)           \u2013            </li> <li> <code>source_id</code>               (<code>str</code>)           \u2013            </li> <li> <code>source_data</code>               (<code>TSourceData_co | None</code>)           \u2013            </li> <li> <code>source_properties</code>               (<code>TProperties_co | None</code>)           \u2013            </li> <li> <code>created</code>               (<code>datetime</code>)           \u2013            </li> <li> <code>source_properties_schema</code>               (<code>dict</code>)           \u2013            <p>Returns JSON schema for the 'source_properties' fields.</p> </li> <li> <code>version</code>               (<code>int</code>)           \u2013            </li> <li> <code>source_name</code>               (<code>str</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSource-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSource.model_config","title":"model_config  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>model_config = ConfigDict(coerce_numbers_to_str=True)\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSource.name","title":"name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>name: str = Field(..., description='Original hut name.')\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSource.location","title":"location  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>location: LocationEleSchema | None = Field(\n    None, description=\"Location of the hut.\"\n)\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSource.source_id","title":"source_id  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_id: str = Field(\n    ..., description=\"Originial source id of the hut.\"\n)\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSource.source_data","title":"source_data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_data: TSourceData_co | None = Field(\n    None, description=\"Source data for this hut.\"\n)\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSource.source_properties","title":"source_properties  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_properties: TProperties_co | None = Field(\n    None, description=\"Additinal source data properties.\"\n)\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSource.created","title":"created  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>created: datetime = Field(\n    default_factory=now,\n    description=\"Version of the service when this entry was created.\",\n)\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSource.source_properties_schema","title":"source_properties_schema  <code>property</code>","text":"<pre><code>source_properties_schema: dict\n</code></pre> <p>Returns JSON schema for the 'source_properties' fields.</p> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>JSON schema.</p> </li> </ul>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSource.version","title":"version  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>version: int = 0\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSource.source_name","title":"source_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_name: str = 'wikidata'\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSource-functions","title":"Functions","text":""},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSource.__str__","title":"__str__","text":"<pre><code>__str__() -&gt; str\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSource.show","title":"show","text":"<pre><code>show(\n    source_id: bool = True,\n    location: bool = True,\n    elevation: bool = True,\n    source_name: bool = True,\n    version: bool = False,\n    created: bool = False,\n) -&gt; str\n</code></pre> <p>Returns a formatted string with the hut information which can be printed.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>Formatted string.</p> </li> </ul>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSource.show(source_id)","title":"<code>source_id</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show source ID.</p>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSource.show(location)","title":"<code>location</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show location.</p>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSource.show(elevation)","title":"<code>elevation</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show elevation.</p>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSource.show(source_name)","title":"<code>source_name</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Show source name.</p>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSource.show(version)","title":"<code>version</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Show verions.</p>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHutSource.show(created)","title":"<code>created</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Show created date.</p>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert","title":"WikidataHut0Convert","text":"<p>Classes:</p> <ul> <li> <code>FieldNotImplementedError</code>           \u2013            <p>Field is not implemented.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>get_hut</code>             \u2013              <p>Convert to hut.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>source_data</code>               (<code>TSourceData</code>)           \u2013            </li> <li> <code>include_photos</code>               (<code>bool</code>)           \u2013            </li> <li> <code>slug</code>               (<code>str</code>)           \u2013            </li> <li> <code>author</code>               (<code>AuthorSchema | None</code>)           \u2013            </li> <li> <code>location</code>               (<code>LocationEleSchema</code>)           \u2013            </li> <li> <code>notes</code>               (<code>list[TranslationSchema]</code>)           \u2013            </li> <li> <code>owner</code>               (<code>OwnerSchema | None</code>)           \u2013            </li> <li> <code>url</code>               (<code>str</code>)           \u2013            </li> <li> <code>contacts</code>               (<code>list[ContactSchema]</code>)           \u2013            </li> <li> <code>country_code</code>               (<code>str | None</code>)           \u2013            </li> <li> <code>comment</code>               (<code>str</code>)           \u2013            </li> <li> <code>capacity</code>               (<code>CapacitySchema</code>)           \u2013            </li> <li> <code>hut_type</code>               (<code>HutTypeSchema</code>)           \u2013            </li> <li> <code>open_monthly</code>               (<code>OpenMonthlySchema</code>)           \u2013            </li> <li> <code>is_active</code>               (<code>bool</code>)           \u2013            </li> <li> <code>is_public</code>               (<code>bool</code>)           \u2013            </li> <li> <code>extras</code>               (<code>dict[str, Any]</code>)           \u2013            </li> <li> <code>name</code>               (<code>TranslationSchema</code>)           \u2013            </li> <li> <code>source_name</code>               (<code>str</code>)           \u2013            </li> <li> <code>description</code>               (<code>TranslationSchema</code>)           \u2013            </li> <li> <code>photos</code>               (<code>list[PhotoSchema]</code>)           \u2013            </li> <li> <code>source</code>               (<code>SourceSchema | None</code>)           \u2013            </li> <li> <code>license</code>               (<code>LicenseSchema | None</code>)           \u2013            </li> </ul>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.source_data","title":"source_data  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>source_data: TSourceData = Field(..., exclude=True)\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.include_photos","title":"include_photos  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>include_photos: bool = True\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.slug","title":"slug  <code>property</code>","text":"<pre><code>slug: str\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.author","title":"author  <code>property</code>","text":"<pre><code>author: AuthorSchema | None\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.location","title":"location  <code>property</code>","text":"<pre><code>location: LocationEleSchema\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.notes","title":"notes  <code>property</code>","text":"<pre><code>notes: list[TranslationSchema]\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.owner","title":"owner  <code>property</code>","text":"<pre><code>owner: OwnerSchema | None\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.url","title":"url  <code>property</code>","text":"<pre><code>url: str\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.contacts","title":"contacts  <code>property</code>","text":"<pre><code>contacts: list[ContactSchema]\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.country_code","title":"country_code  <code>property</code>","text":"<pre><code>country_code: str | None\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.comment","title":"comment  <code>property</code>","text":"<pre><code>comment: str\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.capacity","title":"capacity  <code>property</code>","text":"<pre><code>capacity: CapacitySchema\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.hut_type","title":"hut_type  <code>property</code>","text":"<pre><code>hut_type: HutTypeSchema\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.open_monthly","title":"open_monthly  <code>property</code>","text":"<pre><code>open_monthly: OpenMonthlySchema\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.is_active","title":"is_active  <code>property</code>","text":"<pre><code>is_active: bool\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.is_public","title":"is_public  <code>property</code>","text":"<pre><code>is_public: bool\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.extras","title":"extras  <code>property</code>","text":"<pre><code>extras: dict[str, Any]\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.name","title":"name  <code>property</code>","text":"<pre><code>name: TranslationSchema\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.source_name","title":"source_name  <code>property</code>","text":"<pre><code>source_name: str\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.description","title":"description  <code>property</code>","text":"<pre><code>description: TranslationSchema\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.photos","title":"photos  <code>property</code>","text":"<pre><code>photos: list[PhotoSchema]\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.source","title":"source  <code>property</code>","text":"<pre><code>source: SourceSchema | None\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.license","title":"license  <code>property</code>","text":"<pre><code>license: LicenseSchema | None\n</code></pre>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert-classes","title":"Classes","text":""},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.FieldNotImplementedError","title":"FieldNotImplementedError","text":"<pre><code>FieldNotImplementedError(\n    obj: BaseHutConverterSchema, field: str\n)\n</code></pre> <p>Field is not implemented.</p> <p>Parameters:</p>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.FieldNotImplementedError(obj)","title":"<code>obj</code>","text":"(<code>BaseHutConverterSchema</code>)           \u2013            <p>Current object.</p>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.FieldNotImplementedError(field)","title":"<code>field</code>","text":"(<code>str</code>)           \u2013            <p>Field which is not implementd.</p>"},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.FieldNotImplementedError-functions","title":"Functions","text":""},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert-functions","title":"Functions","text":""},{"location":"reference/hut_services/wikidata/schema/#hut_services.wikidata.schema.WikidataHut0Convert.get_hut","title":"get_hut","text":"<pre><code>get_hut() -&gt; HutSchema\n</code></pre> <p>Convert to hut.</p> <p>Returns:</p> <ul> <li> <code>HutSchema</code>           \u2013            <p>Converted hut.</p> </li> </ul>"},{"location":"reference/hut_services/wikidata/script/","title":"script","text":""},{"location":"reference/hut_services/wikidata/script/#hut_services.wikidata.script","title":"script","text":"<p>Attributes:</p> <ul> <li> <code>qid</code>           \u2013            </li> <li> <code>width</code>           \u2013            </li> <li> <code>client</code>           \u2013            </li> <li> <code>entity</code>           \u2013            </li> <li> <code>image_prop</code>           \u2013            </li> <li> <code>image</code>           \u2013            </li> <li> <code>title</code>           \u2013            </li> <li> <code>link</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/wikidata/script/#hut_services.wikidata.script-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/wikidata/script/#hut_services.wikidata.script.qid","title":"qid  <code>module-attribute</code>","text":"<pre><code>qid = 'Q887175'\n</code></pre>"},{"location":"reference/hut_services/wikidata/script/#hut_services.wikidata.script.width","title":"width  <code>module-attribute</code>","text":"<pre><code>width = 1000\n</code></pre>"},{"location":"reference/hut_services/wikidata/script/#hut_services.wikidata.script.client","title":"client  <code>module-attribute</code>","text":"<pre><code>client = Client()\n</code></pre>"},{"location":"reference/hut_services/wikidata/script/#hut_services.wikidata.script.entity","title":"entity  <code>module-attribute</code>","text":"<pre><code>entity = get(qid, load=True)\n</code></pre>"},{"location":"reference/hut_services/wikidata/script/#hut_services.wikidata.script.image_prop","title":"image_prop  <code>module-attribute</code>","text":"<pre><code>image_prop = get('P18')\n</code></pre>"},{"location":"reference/hut_services/wikidata/script/#hut_services.wikidata.script.image","title":"image  <code>module-attribute</code>","text":"<pre><code>image = entity[image_prop]\n</code></pre>"},{"location":"reference/hut_services/wikidata/script/#hut_services.wikidata.script.title","title":"title  <code>module-attribute</code>","text":"<pre><code>title = quote(title)\n</code></pre>"},{"location":"reference/hut_services/wikidata/script/#hut_services.wikidata.script.link","title":"link  <code>module-attribute</code>","text":"<pre><code>link = f\"https://commons.wikimedia.org/w/index.php?title=Special:Redirect/file/{title}&amp;width={width}\"\n</code></pre>"},{"location":"reference/hut_services/wikidata/service/","title":"service","text":""},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service","title":"service","text":"<p>Classes:</p> <ul> <li> <code>WikidataEntity</code>           \u2013            </li> <li> <code>WikidataService</code>           \u2013            <p>Service to get Information from</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>logger</code>           \u2013            </li> <li> <code>wikidata_service</code>           \u2013            </li> <li> <code>limit</code>           \u2013            </li> <li> <code>include_photos</code>           \u2013            </li> <li> <code>service</code>           \u2013            </li> <li> <code>huts</code>           \u2013            </li> <li> <code>hut</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.logger","title":"logger  <code>module-attribute</code>","text":"<pre><code>logger = getLogger(__name__)\n</code></pre>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.wikidata_service","title":"wikidata_service  <code>module-attribute</code>","text":"<pre><code>wikidata_service = WikidataService()\n</code></pre>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.limit","title":"limit  <code>module-attribute</code>","text":"<pre><code>limit = 10\n</code></pre>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.include_photos","title":"include_photos  <code>module-attribute</code>","text":"<pre><code>include_photos = True\n</code></pre>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.service","title":"service  <code>module-attribute</code>","text":"<pre><code>service = WikidataService()\n</code></pre>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.huts","title":"huts  <code>module-attribute</code>","text":"<pre><code>huts = get_huts_from_source(limit=limit)\n</code></pre>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.hut","title":"hut  <code>module-attribute</code>","text":"<pre><code>hut = convert(\n    model_dump(by_alias=True), include_photos=include_photos\n)\n</code></pre>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service-classes","title":"Classes","text":""},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataEntity","title":"WikidataEntity","text":"<pre><code>WikidataEntity(qid: EntityId, client: Client | None)\n</code></pre> <p>Methods:</p> <ul> <li> <code>get_photo</code>             \u2013              <p>Get a list of photos from wikidata.</p> </li> <li> <code>get_attributes</code>             \u2013              <p>Get a list of photos from wikidata.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>client</code>           \u2013            </li> <li> <code>qid</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataEntity-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataEntity.client","title":"client  <code>instance-attribute</code>","text":"<pre><code>client = Client() if client is None else client\n</code></pre>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataEntity.qid","title":"qid  <code>instance-attribute</code>","text":"<pre><code>qid = qid\n</code></pre>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataEntity-functions","title":"Functions","text":""},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataEntity.get_photo","title":"get_photo","text":"<pre><code>get_photo() -&gt; WikidataPhoto | None\n</code></pre> <p>Get a list of photos from wikidata.</p>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataEntity.get_attributes","title":"get_attributes","text":"<pre><code>get_attributes() -&gt; dict[str, Any]\n</code></pre> <p>Get a list of photos from wikidata.</p>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataService","title":"WikidataService","text":"<pre><code>WikidataService(\n    request_url: str = \"https://www.wikidata.org/\",\n)\n</code></pre> <p>Service to get Information from Wikidata with a Python Wikidata client.</p> Note <p>It is not (yet) possible to get huts and convert them.</p> <p>Classes:</p> <ul> <li> <code>MethodNotImplementedError</code>           \u2013            <p>Method is not implemented exception.</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>clear_all_cache</code>             \u2013              <p>Clears the cache of all services!</p> </li> <li> <code>get_huts</code>             \u2013              <p>Get all huts form source and converts them.</p> </li> <li> <code>get_bookings</code>             \u2013              <p>Get bookings for a list of huts.</p> </li> <li> <code>get_entity</code>             \u2013              </li> <li> <code>get_huts_from_source</code>             \u2013              </li> <li> <code>convert</code>             \u2013              </li> </ul> <p>Attributes:</p> <ul> <li> <code>support_bbox</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_limit</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_offset</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_convert</code>               (<code>bool</code>)           \u2013            </li> <li> <code>support_booking</code>               (<code>bool</code>)           \u2013            </li> <li> <code>request_url</code>           \u2013            </li> <li> <code>wikidata_client</code>           \u2013            </li> </ul>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataService-attributes","title":"Attributes","text":""},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataService.support_bbox","title":"support_bbox  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_bbox: bool = support_bbox\n</code></pre>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataService.support_limit","title":"support_limit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_limit: bool = support_limit\n</code></pre>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataService.support_offset","title":"support_offset  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_offset: bool = support_offset\n</code></pre>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataService.support_convert","title":"support_convert  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_convert: bool = support_convert\n</code></pre>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataService.support_booking","title":"support_booking  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>support_booking: bool = support_booking\n</code></pre>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataService.request_url","title":"request_url  <code>instance-attribute</code>","text":"<pre><code>request_url = request_url\n</code></pre>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataService.wikidata_client","title":"wikidata_client  <code>instance-attribute</code>","text":"<pre><code>wikidata_client = Client(base_url=request_url)\n</code></pre>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataService-classes","title":"Classes","text":""},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataService.MethodNotImplementedError","title":"MethodNotImplementedError","text":"<pre><code>MethodNotImplementedError(obj: BaseService, method: str)\n</code></pre> <p>Method is not implemented exception.</p> <p>Parameters:</p>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataService.MethodNotImplementedError(obj)","title":"<code>obj</code>","text":"(<code>BaseService</code>)           \u2013            <p>Service object (e.g. <code>MyService</code>).</p>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataService.MethodNotImplementedError(method)","title":"<code>method</code>","text":"(<code>str</code>)           \u2013            <p>Method which is not implemented.</p>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataService.MethodNotImplementedError-functions","title":"Functions","text":""},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataService-functions","title":"Functions","text":""},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataService.clear_all_cache","title":"clear_all_cache  <code>classmethod</code>","text":"<pre><code>clear_all_cache() -&gt; None\n</code></pre> <p>Clears the cache of all services!</p>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataService.get_huts","title":"get_huts","text":"<pre><code>get_huts(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    include_photos: bool = True,\n    **kwargs: Any,\n) -&gt; list[HutSchema]\n</code></pre> <p>Get all huts form source and converts them. Calls <code>get_huts_from_source()</code> and <code>convert()</code>.</p> <p>Returns:</p> <ul> <li> <code>list[HutSchema]</code>           \u2013            <p>Converted huts from source.</p> </li> </ul>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataService.get_bookings","title":"get_bookings","text":"<pre><code>get_bookings(\n    date: datetime | date | Literal[\"now\"] | None = None,\n    days: int | None = None,\n    source_ids: list[int] | None = None,\n    lang: str = \"de\",\n) -&gt; dict[int, HutBookingsSchema]\n</code></pre> <p>Get bookings for a list of huts.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>dict[int, HutBookingsSchema]</code>           \u2013            <p>A dictionary with the bookings (key = soruce id).</p> </li> </ul>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataService.get_bookings(date)","title":"<code>date</code>","text":"(<code>datetime | date | Literal['now'] | None</code>, default:                   <code>None</code> )           \u2013            <p>Start daye for the bookings</p>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataService.get_bookings(days)","title":"<code>days</code>","text":"(<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Duration in days</p>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataService.get_bookings(source_ids)","title":"<code>source_ids</code>","text":"(<code>list[int] | None</code>, default:                   <code>None</code> )           \u2013            <p>A list of ids to return (source id, not the hut id), if set to <code>None</code> all are returned</p>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataService.get_entity","title":"get_entity","text":"<pre><code>get_entity(qid: str) -&gt; WikidataEntity\n</code></pre>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataService.get_huts_from_source","title":"get_huts_from_source","text":"<pre><code>get_huts_from_source(\n    bbox: BBox | None = None,\n    limit: int = 1,\n    offset: int = 0,\n    **kwargs: dict,\n) -&gt; list[WikidataHutSource]\n</code></pre>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service.WikidataService.convert","title":"convert","text":"<pre><code>convert(\n    src: Mapping | Any, include_photos: bool = True\n) -&gt; HutSchema\n</code></pre>"},{"location":"reference/hut_services/wikidata/service/#hut_services.wikidata.service-functions","title":"Functions","text":""}]}